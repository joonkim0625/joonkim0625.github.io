<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DNS on All Things Cyber – joonkim0625</title>
    <link>https://joonkim0625.github.io/tags/dns/</link>
    <description>Recent content in DNS on All Things Cyber – joonkim0625</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://joonkim0625.github.io/tags/dns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FriendZone HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-07-03-htb-friendzone/</link>
      <pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-07-03-htb-friendzone/</guid>
      <description>&lt;p&gt;This post covers my process for solving the &lt;strong&gt;FriendZone&lt;/strong&gt; box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://0xdf.gitlab.io/2019/07/13/htb-friendzone.html&#34;&gt;0xdf’s writeup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rastating.github.io/privilege-escalation-via-python-library-hijacking/&#34;&gt;Python library hijack privilege escalation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recon&#34;&gt;Recon&lt;/h2&gt;
&lt;h3 id=&#34;nmap-scan&#34;&gt;NMAP Scan&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;└──╼ [★]$ nmap -sC -sV 10.10.10.123
Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-07-03 15:01 CDT
Nmap scan report for 10.10.10.123
Host is up (0.011s latency).
Not shown: 993 closed tcp ports (reset)
PORT    STATE SERVICE     VERSION
21/tcp  open  ftp         vsftpd 3.0.3
22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA)
|   256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA)
|_  256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519)
53/tcp  open  domain      ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux)
| dns-nsid: 
|_  bind.version: 9.11.3-1ubuntu1.2-Ubuntu
80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))
|_http-title: Friend Zone Escape software
|_http-server-header: Apache/2.4.29 (Ubuntu)
139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)
443/tcp open  ssl/http    Apache httpd 2.4.29
|_http-server-header: Apache/2.4.29 (Ubuntu)
| tls-alpn: 
|_  http/1.1
|_ssl-date: TLS randomness does not represent time
|_http-title: 404 Not Found
| ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO
| Not valid before: 2018-10-05T21:02:30
|_Not valid after:  2018-11-04T21:02:30
445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)
Service Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

Host script results:
| smb2-time: 
|   date: 2025-07-03T20:02:08
|_  start_date: N/A
| smb2-security-mode: 
|   3:1:1: 
|_    Message signing enabled but not required
|_clock-skew: mean: -1h00m00s, deviation: 1h43m55s, median: -1s
| smb-os-discovery: 
|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)
|   Computer name: friendzone
|   NetBIOS computer name: FRIENDZONE\x00
|   Domain name: \x00
|   FQDN: friendzone
|_  System time: 2025-07-03T23:02:09+03:00
|_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; (unknown)
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 21.29 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;tags-htb-friendzone-smb-lfi-privilege-escalation-python-hijack-reverse-shell-dns-enumeration&#34;&gt;title: FriendZone HTB Walkthrough
date: 2025-07-03
categories: [Penetration Testing, CTF Walkthrough, Privilege Escalation, Web Application Security]
tags: [HTB, FriendZone, SMB, LFI, privilege escalation, python hijack, reverse shell, DNS, enumeration]&lt;/h2&gt;
&lt;p&gt;This post covers my process for solving the &lt;strong&gt;FriendZone&lt;/strong&gt; box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DNS &amp; Web Browser Request</title>
      <link>https://joonkim0625.github.io/posts/2023-2-14-dns-and-webbrowser-request/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2023-2-14-dns-and-webbrowser-request/</guid>
      <description>&lt;h2 id=&#34;what-happens-if-a-web-browser-client-sends-a-reqeust-to-a-server&#34;&gt;What happens if a web browser (client) sends a reqeust to a server?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mpQZVYPuDGU&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is DNS (Domain Name System)?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS resolves names domain names to IP addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steps that DNS takes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;We try to access &lt;code&gt;yahoo.com&lt;/code&gt; in our browser&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The browser (or your OS) checks its own cache memory for IP Address&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;if not found, it sends the query to the resolver server&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The resolver server is basically your ISP (Internet service provider)&lt;/li&gt;
&lt;li&gt;Once it receives the query, it checks its own cache memory to find the IP
address to &lt;code&gt;yahoo.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;if not found, it sends the query to the root server&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Root server is the top, or the root, of the DNS hierarchy&lt;/li&gt;
&lt;li&gt;13 sets of these root servers strategically placed around the world&lt;/li&gt;
&lt;li&gt;operated by 12 different organizations&lt;/li&gt;
&lt;li&gt;each set has their own unique IP address&lt;/li&gt;
&lt;li&gt;when the root server receives the query for the IP address for
&lt;code&gt;yahoo.com&lt;/code&gt;, it is not going to know what the IP address is. But, it
knows where to send the resolver to find the IP address. The root server
will direct the resolver to the TLD (Top Level Domain server) server for
the &lt;code&gt;.com&lt;/code&gt; domain&lt;/li&gt;
&lt;li&gt;Top Level Domain Server stores the address information for top level
domains such as &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.net&lt;/code&gt;, &lt;code&gt;.org&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;TLD server is not going to know what the IP address for &lt;code&gt;yahoo.com&lt;/code&gt;. So
it will direct the resolver to the next and final level which
are the Authoritative Name servers&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;The resolver asks the authoritative name server for the IP address for
&lt;code&gt;yahoo.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Authoritative Name Servers are responsible for knowing everything about
the domain including the IP address&lt;/li&gt;
&lt;li&gt;when it receives for the query from the resolver, the name server responds
with the IP address for &lt;code&gt;yahoo.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Finally, the resolver tells your computer the IP address for &lt;code&gt;yahoo.com&lt;/code&gt;
and your computer now can retrieve the web page for &lt;code&gt;yahoo.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;once the resolver receives the IP address for &lt;code&gt;yahoo.com&lt;/code&gt;, it will store
the IP address in its cache memory to prevent going through all these
steps again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the steps above&amp;hellip;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
