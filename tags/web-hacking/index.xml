<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Web Hacking on All Things Cyber – joonkim0625</title>
    <link>https://joonkim0625.github.io/tags/web-hacking/</link>
    <description>Recent content in Web Hacking on All Things Cyber – joonkim0625</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://joonkim0625.github.io/tags/web-hacking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neonify HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-22-neonify/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-22-neonify/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Neonify&lt;/strong&gt; box on Hack The Box. This challenge revolves around a Ruby application vulnerable to Server-Side Template Injection (SSTI) via a regex newline bypass.&lt;/p&gt;
&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s time for a shiny new reveal for the first-ever text neonifier. Come test out our brand new website and make any text glow like a lo-fi neon tube!&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;After looking at the source code, I noticed it was a Ruby application and suspected some kind of command injection. I didn&amp;rsquo;t immediately see the path, so I referred to a writeup and discovered that the challenge is about &amp;ldquo;ERB SSTI via newline regex bypass.&amp;rdquo; There’s very little public writeup info on this exact method, which made it a great learning opportunity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toxic HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-21-toxic/</link>
      <pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-21-toxic/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Toxic&lt;/strong&gt; box on Hack The Box. This box is all about PHP insecure deserialization, exploiting LFI, and using log poisoning to achieve remote code execution.&lt;/p&gt;
&lt;h2 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;PHP insecure deserialization to LFI that abuses log poisoning for RCE.&lt;/p&gt;
&lt;h2 id=&#34;learning&#34;&gt;Learning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ianpeter.medium.com/exploiting-log-poisoning-through-lfi-and-serialization-in-php-e039e7b126ad&#34;&gt;https://ianpeter.medium.com/exploiting-log-poisoning-through-lfi-and-serialization-in-php-e039e7b126ad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The official writeup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wasn&amp;rsquo;t sure what to do at first, so I checked the writeup after struggling for a while.&lt;/p&gt;
&lt;h2 id=&#34;challenge-analysis--source-code-review&#34;&gt;Challenge Analysis &amp;amp; Source Code Review&lt;/h2&gt;
&lt;p&gt;The web page didn&amp;rsquo;t reveal much, but looking at the source code, you see:&lt;/p&gt;</description>
    </item>
    <item>
      <title>LoveTok HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-20-lovetok/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-20-lovetok/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;LoveTok&lt;/strong&gt; box on Hack The Box. The challenge involves analyzing PHP source code, understanding the misuse of &lt;code&gt;addslashes&lt;/code&gt;, and exploiting command injection through the eval function.&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;True love is tough, and even harder to find. Once the sun has set, the lights close and the bell has rung&amp;hellip; you find yourself licking your wounds and contemplating human existence. You wish to have somebody important in your life to share the experiences that come with it, the good and the bad. This is why we made LoveTok, the brand new service that accurately predicts in the threshold of milliseconds when love will come knockin&amp;rsquo; (at your door). Come and check it out, but don&amp;rsquo;t try to cheat love because love cheats back.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Phonebook HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-19-phonebook/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-19-phonebook/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Phonebook&lt;/strong&gt; box on Hack The Box. The box focuses on LDAP injection and brute-forcing credentials using knowledge of LDAP search/filter syntax.&lt;/p&gt;
&lt;h2 id=&#34;solve&#34;&gt;Solve&lt;/h2&gt;
&lt;p&gt;I didn’t find any obvious attack vectors except for a DOM-based HTML injection. After checking a writeup, I learned the challenge was about LDAP injection—a topic I had little prior experience with.&lt;/p&gt;
&lt;h3 id=&#34;what-is-ldap-injection&#34;&gt;What is LDAP Injection?&lt;/h3&gt;
&lt;p&gt;According to PayloadAllTheThings, LDAP Injection is a vulnerability that occurs when user-supplied input is used to construct LDAP queries without proper sanitization or escaping.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pandora HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-13-pandora/</link>
      <pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-13-pandora/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Pandora&lt;/strong&gt; box on Hack The Box. The challenge focuses on recon, SNMP enumeration, port forwarding, SQLi on an internal service, and a series of lateral movement and privilege escalation steps.&lt;/p&gt;
&lt;h2 id=&#34;recon&#34;&gt;Recon&lt;/h2&gt;
&lt;p&gt;Initial port scan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ports&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nmap -p- --min-rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; -T4 10.10.11.136 | grep ^&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; | sed s/,$//&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -p$ports -sC -sV 10.10.11.136
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Open ports:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22 (SSH)&lt;/li&gt;
&lt;li&gt;80 (HTTP, Apache, Ubuntu)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enumerated with UDP scan (&lt;code&gt;-sU&lt;/code&gt;):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Validation HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-10-validation/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-10-validation/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Validation&lt;/strong&gt; box on Hack The Box. This challenge centers on SQL injection, writing a web shell via SQLi, and privilege escalation via password reuse.&lt;/p&gt;
&lt;h2 id=&#34;recon&#34;&gt;Recon&lt;/h2&gt;
&lt;p&gt;Started with full port scan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ports&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nmap -p- --min-rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; -T4 &amp;lt;IP&amp;gt; | grep ^&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0-9&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | tr &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; | sed s/,$//&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo $ports
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 22,80,4566,5000,5001,5002,5003,5004,5005,5006,5007,5008,8080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -p$ports -sC -sV 10.10.11.116
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Main open ports: 22 (SSH), 80 (Apache), 4566 (nginx), 8080 (nginx).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writeup HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-04-01-writeup/</link>
      <pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-04-01-writeup/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Writeup&lt;/strong&gt; box on Hack The Box. The machine revolves around web enumeration, CMS exploitation, SQLi, hash cracking, and privilege escalation via PATH hijacking.&lt;/p&gt;
&lt;h2 id=&#34;recon&#34;&gt;Recon&lt;/h2&gt;
&lt;p&gt;Target: 10.10.10.138&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -sC -sV 10.10.10.138
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Results:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22/tcp (SSH) OpenSSH 9.2p1 Debian&lt;/li&gt;
&lt;li&gt;80/tcp (HTTP) Apache httpd 2.4.25 (Debian)&lt;/li&gt;
&lt;li&gt;robots.txt has a disallowed entry: &lt;code&gt;/writeup/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Site uses CMS Made Simple, version 2.2.9.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cms-exploitation&#34;&gt;CMS Exploitation&lt;/h2&gt;
&lt;p&gt;Accessed &lt;code&gt;/writeup&lt;/code&gt; and &lt;code&gt;/writeup/doc/CHANGELOG.txt&lt;/code&gt; to confirm CMS version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Help HTB Walkthrough</title>
      <link>https://joonkim0625.github.io/posts/2025-03-31-help/</link>
      <pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-03-31-help/</guid>
      <description>&lt;p&gt;This post documents my process for solving the &lt;strong&gt;Help&lt;/strong&gt; box on Hack The Box. This box involves GraphQL enumeration, credential dumping, hash cracking, and classic web application enumeration and exploitation.&lt;/p&gt;
&lt;h2 id=&#34;recon&#34;&gt;Recon&lt;/h2&gt;
&lt;p&gt;Initial nmap scan:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -sC -sV -oA nmap/help &amp;lt;IP&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Found GraphQL running on port 3000.&lt;/p&gt;
&lt;h2 id=&#34;graphql-enumeration&#34;&gt;GraphQL Enumeration&lt;/h2&gt;
&lt;p&gt;Referred to &lt;a href=&#34;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/GraphQL%20Injection/README.md&#34;&gt;PayloadsAllTheThings - GraphQL Injection&lt;/a&gt; to start enumeration.&lt;/p&gt;
&lt;p&gt;Discovered GraphQL types via introspection:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://10.10.10.121:3000/graphql?query={__schema{types{name}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Full schema dump and queries revealed a &lt;code&gt;user&lt;/code&gt; type with &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>webhackingkr old 02</title>
      <link>https://joonkim0625.github.io/posts/2025-02-09-webhackingkr-old-02/</link>
      <pubDate>Sun, 09 Feb 2025 00:34:20 +0000</pubDate>
      <guid>https://joonkim0625.github.io/posts/2025-02-09-webhackingkr-old-02/</guid>
      <description>&lt;p&gt;This is a challenge &lt;code&gt;old-02&lt;/code&gt; from &lt;code&gt;webhacking.kr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I was stuck trying to understand how people were discovering this SQLi vulnerability through a cookie, as no blog posts explained why the attack was effective. This wasn&amp;rsquo;t a typical SQLi challenge that I&amp;rsquo;m used to, so I really wanted to know why it worked the way it did. The goal of this challenge is to figure out the password used for the &lt;code&gt;admin.php&lt;/code&gt; page (mentioned in the HTML comment).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
