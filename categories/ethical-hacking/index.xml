<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ethical Hacking on My Blog</title>
    <link>http://localhost:1313/categories/ethical-hacking/</link>
    <description>Recent content in Ethical Hacking on My Blog</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2024 22:41:30 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/ethical-hacking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SANS Holiday Hack Challenge Elf Connect</title>
      <link>http://localhost:1313/posts/2024-12-10-sans-holiday-hack-challenge-elf-connect/</link>
      <pubDate>Tue, 10 Dec 2024 22:41:30 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-12-10-sans-holiday-hack-challenge-elf-connect/</guid>
      <description>&lt;h2 id=&#34;hacking-a-javascript-game&#34;&gt;Hacking a JavaScript Game&lt;/h2&gt;
&lt;p&gt;Referring to &lt;a href=&#34;https://www.youtube.com/watch?v=XsEqZvrTyoU&amp;amp;t=126s&#34;&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;examination&#34;&gt;Examination&lt;/h2&gt;
&lt;p&gt;This is a web-based game, so we begin by inspecting the game page using the browser&amp;rsquo;s developer tools.&lt;/p&gt;
&lt;h3 id=&#34;inspecting-the-game&#34;&gt;Inspecting the Game&lt;/h3&gt;
&lt;p&gt;Open the browser&amp;rsquo;s developer tools and navigate to the debugger section. This section displays all the files associated with the page you are inspecting.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Debugger Section&#34; loading=&#34;lazy&#34; src=&#34;https://joonkim0625.github.io/images/sans-holiday-hack/elf-connect/debugger.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can view the HTML source code of the Elf Connect game here:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Game Code&#34; loading=&#34;lazy&#34; src=&#34;https://joonkim0625.github.io/images/sans-holiday-hack/elf-connect/game-code.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>XSS Skills Assessment</title>
      <link>http://localhost:1313/posts/2024-11-14-xss-skills-assessment/</link>
      <pubDate>Thu, 14 Nov 2024 00:10:37 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-11-14-xss-skills-assessment/</guid>
      <description>&lt;p&gt;The search bar didn’t seem to be a viable target for XSS injection because either it simply echoes the search query or it sanitizes/blocks the payloads I tested (for example, the payloads generated by XSStrike didn’t work).&lt;/p&gt;
&lt;p&gt;Next, I explored the &amp;ldquo;Leave a Comment&amp;rdquo; section, which includes multiple input fields. When posting a comment, I noticed that the inputs aren’t reflected directly back on the page. Searching for a comment only shows the search result, not the actual comment content, which means we need to identify which input area, if any, is vulnerable.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
