<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cross-Site Scripting on My Blog</title>
    <link>http://localhost:1313/categories/cross-site-scripting/</link>
    <description>Recent content in Cross-Site Scripting on My Blog</description>
    <generator>Hugo -- 0.148.0</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Nov 2024 00:10:37 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/cross-site-scripting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XSS Skills Assessment</title>
      <link>http://localhost:1313/posts/2024-11-14-xss-skills-assessment/</link>
      <pubDate>Thu, 14 Nov 2024 00:10:37 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-11-14-xss-skills-assessment/</guid>
      <description>&lt;p&gt;The search bar didn’t seem to be a viable target for XSS injection because either it simply echoes the search query or it sanitizes/blocks the payloads I tested (for example, the payloads generated by XSStrike didn’t work).&lt;/p&gt;
&lt;p&gt;Next, I explored the &amp;ldquo;Leave a Comment&amp;rdquo; section, which includes multiple input fields. When posting a comment, I noticed that the inputs aren’t reflected directly back on the page. Searching for a comment only shows the search result, not the actual comment content, which means we need to identify which input area, if any, is vulnerable.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
